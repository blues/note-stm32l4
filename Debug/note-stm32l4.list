
note-stm32l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08008780  08008780  00018780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cb8  08008cb8  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cc0  08008cc0  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cc4  08008cc4  00018cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08008cc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000238  08008f00  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08008f00  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001960e  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003668  00000000  00000000  00039876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003cee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  0003e418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023093  00000000  00000000  0003f848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010bc9  00000000  00000000  000628db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc274  00000000  00000000  000734a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  0013f794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008768 	.word	0x08008768

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	08008768 	.word	0x08008768

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f97c 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f80d 	bl	8000f0c <HAL_InitTick>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	e001      	b.n	8000f02 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efe:	f003 fd27 	bl	8004950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_InitTick+0x68>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d022      	beq.n	8000f66 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_InitTick+0x68>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f998 	bl	800126a <HAL_SYSTICK_Config>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d10f      	bne.n	8000f60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d809      	bhi.n	8000f5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4e:	f000 f954 	bl	80011fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_InitTick+0x70>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e007      	b.n	8000f6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	e004      	b.n	8000f6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e001      	b.n	8000f6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000000 	.word	0x20000000

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_IncTick+0x1c>)
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	200004c4 	.word	0x200004c4
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200004c4 	.word	0x200004c4

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d004      	beq.n	8000fe0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_Delay+0x40>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe0:	bf00      	nop
 8000fe2:	f7ff ffdf 	bl	8000fa4 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d8f7      	bhi.n	8000fe2 <HAL_Delay+0x26>
  {
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	; (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	db10      	blt.n	80010d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 021f 	and.w	r2, r3, #31
 80010b8:	4909      	ldr	r1, [pc, #36]	; (80010e0 <__NVIC_DisableIRQ+0x40>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	2001      	movs	r0, #1
 80010c2:	fa00 f202 	lsl.w	r2, r0, r2
 80010c6:	3320      	adds	r3, #32
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80010d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff07 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff1c 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff0f 	bl	8001064 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff1f 	bl	80010a0 <__NVIC_DisableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff94 	bl	80011a0 <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d005      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2204      	movs	r2, #4
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e029      	b.n	80012fa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f003 021c 	and.w	r2, r3, #28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    }
  }
  return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e148      	b.n	80015a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 813a 	beq.w	80015a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x38>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d00b      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d007      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b12      	cmp	r3, #18
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8094 	beq.w	80015a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001478:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <HAL_GPIO_Init+0x2c0>)
 800147a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x2c0>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6613      	str	r3, [r2, #96]	; 0x60
 8001484:	4b4f      	ldr	r3, [pc, #316]	; (80015c4 <HAL_GPIO_Init+0x2c0>)
 8001486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001490:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <HAL_GPIO_Init+0x2c4>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ba:	d00d      	beq.n	80014d8 <HAL_GPIO_Init+0x1d4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a43      	ldr	r2, [pc, #268]	; (80015cc <HAL_GPIO_Init+0x2c8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0x1d0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a42      	ldr	r2, [pc, #264]	; (80015d0 <HAL_GPIO_Init+0x2cc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_GPIO_Init+0x1cc>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e004      	b.n	80014da <HAL_GPIO_Init+0x1d6>
 80014d0:	2307      	movs	r3, #7
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x1d6>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_GPIO_Init+0x1d6>
 80014d8:	2300      	movs	r3, #0
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	f002 0203 	and.w	r2, r2, #3
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ea:	4937      	ldr	r1, [pc, #220]	; (80015c8 <HAL_GPIO_Init+0x2c4>)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_GPIO_Init+0x2d0>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f47f aeaf 	bne.w	8001314 <HAL_GPIO_Init+0x10>
  }
}
 80015b6:	bf00      	nop
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80015e6:	e0ab      	b.n	8001740 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80015e8:	2201      	movs	r2, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 809e 	beq.w	800173a <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80015fe:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_GPIO_DeInit+0x184>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001626:	d00d      	beq.n	8001644 <HAL_GPIO_DeInit+0x6c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4d      	ldr	r2, [pc, #308]	; (8001760 <HAL_GPIO_DeInit+0x188>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d007      	beq.n	8001640 <HAL_GPIO_DeInit+0x68>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4c      	ldr	r2, [pc, #304]	; (8001764 <HAL_GPIO_DeInit+0x18c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_GPIO_DeInit+0x64>
 8001638:	2302      	movs	r3, #2
 800163a:	e004      	b.n	8001646 <HAL_GPIO_DeInit+0x6e>
 800163c:	2307      	movs	r3, #7
 800163e:	e002      	b.n	8001646 <HAL_GPIO_DeInit+0x6e>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_DeInit+0x6e>
 8001644:	2300      	movs	r3, #0
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	d132      	bne.n	80016bc <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	4942      	ldr	r1, [pc, #264]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 8001660:	4013      	ands	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	493e      	ldr	r1, [pc, #248]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 800166e:	4013      	ands	r3, r2
 8001670:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	493b      	ldr	r1, [pc, #236]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 800167c:	4013      	ands	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	4937      	ldr	r1, [pc, #220]	; (8001768 <HAL_GPIO_DeInit+0x190>)
 800168a:	4013      	ands	r3, r2
 800168c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_GPIO_DeInit+0x184>)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	482b      	ldr	r0, [pc, #172]	; (800175c <HAL_GPIO_DeInit+0x184>)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	400a      	ands	r2, r1
 80016b6:	3302      	adds	r3, #2
 80016b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2103      	movs	r1, #3
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	08da      	lsrs	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3208      	adds	r2, #8
 80016d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	08d2      	lsrs	r2, r2, #3
 80016f0:	4019      	ands	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2103      	movs	r1, #3
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	401a      	ands	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2103      	movs	r1, #3
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f af4d 	bne.w	80015e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40010000 	.word	0x40010000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	40010400 	.word	0x40010400

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001788:	e002      	b.n	8001790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f826 	bl	800480c <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e021      	b.n	8001822 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2224      	movs	r2, #36	; 0x24
 80017e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f003 f8ce 	bl	8004998 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	2b00      	cmp	r3, #0
 8001848:	d005      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
  }
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b20      	cmp	r3, #32
 8001872:	d138      	bne.n	80018e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800187e:	2302      	movs	r3, #2
 8001880:	e032      	b.n	80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2224      	movs	r2, #36	; 0x24
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0201 	orr.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e6:	2302      	movs	r3, #2
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e080      	b.n	8001a08 <HAL_LPTIM_Init+0x114>

#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f003 f8c8 	bl	8004ab0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d004      	beq.n	8001942 <HAL_LPTIM_Init+0x4e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001940:	d103      	bne.n	800194a <HAL_LPTIM_Init+0x56>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f023 031e 	bic.w	r3, r3, #30
 8001948:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	4293      	cmp	r3, r2
 8001954:	d005      	beq.n	8001962 <HAL_LPTIM_Init+0x6e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800195c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001960:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_LPTIM_Init+0x11c>)
 8001966:	4013      	ands	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001972:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001978:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800197e:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001984:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d004      	beq.n	800199e <HAL_LPTIM_Init+0xaa>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800199c:	d107      	bne.n	80019ae <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80019a6:	4313      	orrs	r3, r2
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00a      	beq.n	80019d0 <HAL_LPTIM_Init+0xdc>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80019c2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80019c8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_LPTIM_Init+0x120>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d108      	bne.n	80019f4 <HAL_LPTIM_Init+0x100>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	e004      	b.n	80019fe <HAL_LPTIM_Init+0x10a>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019fc:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	ff19f1f8 	.word	0xff19f1f8
 8001a14:	40007c00 	.word	0x40007c00

08001a18 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_LPTIM_TimeOut_Start_IT+0x88>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	615a      	str	r2, [r3, #20]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0204 	orr.w	r2, r2, #4
 8001a86:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d106      	bne.n	8001ad6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f002 fddf 	bl	8004694 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d10d      	bne.n	8001b00 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d106      	bne.n	8001b00 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f86d 	bl	8001bda <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d10d      	bne.n	8001b2a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d106      	bne.n	8001b2a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f862 	bl	8001bee <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d10d      	bne.n	8001b54 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d106      	bne.n	8001b54 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f857 	bl	8001c02 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b10      	cmp	r3, #16
 8001b60:	d10d      	bne.n	8001b7e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b10      	cmp	r3, #16
 8001b6e:	d106      	bne.n	8001b7e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f84c 	bl	8001c16 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b20      	cmp	r3, #32
 8001b8a:	d10d      	bne.n	8001ba8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d106      	bne.n	8001ba8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f841 	bl	8001c2a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b40      	cmp	r3, #64	; 0x40
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d106      	bne.n	8001bd2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f836 	bl	8001c3e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */      
    }
  }
#endif
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40007000 	.word	0x40007000

08001c74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40007000 	.word	0x40007000

08001c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c9e:	d130      	bne.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cac:	d038      	beq.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cae:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2232      	movs	r2, #50	; 0x32
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0c9b      	lsrs	r3, r3, #18
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd4:	e002      	b.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce8:	d102      	bne.n	8001cf0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f2      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfc:	d110      	bne.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e00f      	b.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d007      	beq.n	8001d20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40007000 	.word	0x40007000
 8001d34:	20000008 	.word	0x20000008
 8001d38:	431bde83 	.word	0x431bde83

08001d3c <HAL_PWREx_EnableSRAM2ContentRetention>:
  * @note  When RRS bit is set, SRAM2 is powered by the low-power regulator in
  *         Standby mode and its content is kept.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_PWREx_EnableSRAM2ContentRetention+0x1c>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6093      	str	r3, [r2, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e3db      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6e:	4ba4      	ldr	r3, [pc, #656]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d78:	4ba1      	ldr	r3, [pc, #644]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80e1 	beq.w	8001f52 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4a>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	f040 8088 	bne.w	8001eae <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f040 8084 	bne.w	8001eae <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da6:	4b96      	ldr	r3, [pc, #600]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x62>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e3b3      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x7c>
 8001dce:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd6:	e005      	b.n	8001de4 <HAL_RCC_OscConfig+0x88>
 8001dd8:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d223      	bcs.n	8001e30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fd47 	bl	8002880 <RCC_SetFlashLatencyFromMSIRange>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e394      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfc:	4b80      	ldr	r3, [pc, #512]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7f      	ldr	r2, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b7d      	ldr	r3, [pc, #500]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	497a      	ldr	r1, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1a:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4975      	ldr	r1, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e022      	b.n	8001e76 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a72      	ldr	r2, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b70      	ldr	r3, [pc, #448]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	496d      	ldr	r1, [pc, #436]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4e:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	4968      	ldr	r1, [pc, #416]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fd0a 	bl	8002880 <RCC_SetFlashLatencyFromMSIRange>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e357      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e76:	f000 fc41 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b60      	ldr	r3, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_RCC_OscConfig+0x2a8>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e96:	4b5d      	ldr	r3, [pc, #372]	; (800200c <HAL_RCC_OscConfig+0x2b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f836 	bl	8000f0c <HAL_InitTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d052      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	e33b      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d032      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a51      	ldr	r2, [pc, #324]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f86f 	bl	8000fa4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eca:	f7ff f86b 	bl	8000fa4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e324      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001edc:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee8:	4b45      	ldr	r3, [pc, #276]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a44      	ldr	r2, [pc, #272]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	493f      	ldr	r1, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	493a      	ldr	r1, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
 8001f1a:	e01a      	b.n	8001f52 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a37      	ldr	r2, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f28:	f7ff f83c 	bl	8000fa4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f30:	f7ff f838 	bl	8000fa4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e2f1      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1d4>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d074      	beq.n	8002048 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x214>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d10e      	bne.n	8001f88 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d064      	beq.n	8002046 <HAL_RCC_OscConfig+0x2ea>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d160      	bne.n	8002046 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e2ce      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x244>
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e01d      	b.n	8001fdc <HAL_RCC_OscConfig+0x280>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x268>
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e00b      	b.n	8001fdc <HAL_RCC_OscConfig+0x280>
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x2a4>)
 8001fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01c      	beq.n	800201e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe ffde 	bl	8000fa4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	e011      	b.n	8002010 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7fe ffda 	bl	8000fa4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d90a      	bls.n	8002010 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e293      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	08008ad4 	.word	0x08008ad4
 8002008:	20000008 	.word	0x20000008
 800200c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002010:	4bae      	ldr	r3, [pc, #696]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0e7      	beq.n	8001fec <HAL_RCC_OscConfig+0x290>
 800201c:	e014      	b.n	8002048 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe ffc1 	bl	8000fa4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002026:	f7fe ffbd 	bl	8000fa4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e276      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002038:	4ba4      	ldr	r3, [pc, #656]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x2ca>
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002046:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d060      	beq.n	8002116 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b04      	cmp	r3, #4
 8002058:	d005      	beq.n	8002066 <HAL_RCC_OscConfig+0x30a>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d119      	bne.n	8002094 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d116      	bne.n	8002094 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002066:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_RCC_OscConfig+0x322>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e253      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b93      	ldr	r3, [pc, #588]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	061b      	lsls	r3, r3, #24
 800208c:	498f      	ldr	r1, [pc, #572]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002092:	e040      	b.n	8002116 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209c:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff7c 	bl	8000fa4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe ff78 	bl	8000fa4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e231      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c2:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b7f      	ldr	r3, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	497b      	ldr	r1, [pc, #492]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
 80020e2:	e018      	b.n	8002116 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a78      	ldr	r2, [pc, #480]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80020ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff58 	bl	8000fa4 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff54 	bl	8000fa4 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e20d      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800210a:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03c      	beq.n	800219c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01c      	beq.n	8002164 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800212c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002130:	4a66      	ldr	r2, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe ff33 	bl	8000fa4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002142:	f7fe ff2f 	bl	8000fa4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1e8      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002154:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ef      	beq.n	8002142 <HAL_RCC_OscConfig+0x3e6>
 8002162:	e01b      	b.n	800219c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216a:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe ff16 	bl	8000fa4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7fe ff12 	bl	8000fa4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1cb      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218e:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ef      	bne.n	800217c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a5 	beq.w	80022f4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x574>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_RCC_OscConfig+0x574>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x574>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fed9 	bl	8000fa4 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fed5 	bl	8000fa4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e18e      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x574>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_RCC_OscConfig+0x4d2>
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222c:	e024      	b.n	8002278 <HAL_RCC_OscConfig+0x51c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b05      	cmp	r3, #5
 8002234:	d110      	bne.n	8002258 <HAL_RCC_OscConfig+0x4fc>
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a23      	ldr	r2, [pc, #140]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800223e:	f043 0304 	orr.w	r3, r3, #4
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224c:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x51c>
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a1b      	ldr	r2, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002268:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d016      	beq.n	80022ae <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002280:	f7fe fe90 	bl	8000fa4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002286:	e00a      	b.n	800229e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fe8c 	bl	8000fa4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e143      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x570>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ed      	beq.n	8002288 <HAL_RCC_OscConfig+0x52c>
 80022ac:	e019      	b.n	80022e2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ae:	f7fe fe79 	bl	8000fa4 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b4:	e00e      	b.n	80022d4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe fe75 	bl	8000fa4 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d905      	bls.n	80022d4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e12c      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	4b96      	ldr	r3, [pc, #600]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e9      	bne.n	80022b6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b91      	ldr	r3, [pc, #580]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a90      	ldr	r2, [pc, #576]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002308:	4b89      	ldr	r3, [pc, #548]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230e:	4a88      	ldr	r2, [pc, #544]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe fe44 	bl	8000fa4 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002320:	f7fe fe40 	bl	8000fa4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0f9      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002332:	4b7f      	ldr	r3, [pc, #508]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x5c4>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002342:	4b7b      	ldr	r3, [pc, #492]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002348:	4a79      	ldr	r2, [pc, #484]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fe27 	bl	8000fa4 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235a:	f7fe fe23 	bl	8000fa4 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0dc      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800236c:	4b70      	ldr	r3, [pc, #448]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800236e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80d0 	beq.w	8002524 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	f000 808d 	beq.w	80024a6 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	2b02      	cmp	r3, #2
 8002392:	d15a      	bne.n	800244a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002394:	4b66      	ldr	r3, [pc, #408]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a65      	ldr	r2, [pc, #404]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800239a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fe00 	bl	8000fa4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe fdfc 	bl	8000fa4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0b5      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ba:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023c6:	4b5a      	ldr	r3, [pc, #360]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_RCC_OscConfig+0x7d8>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023e0:	0212      	lsls	r2, r2, #8
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023e8:	0852      	lsrs	r2, r2, #1
 80023ea:	3a01      	subs	r2, #1
 80023ec:	0552      	lsls	r2, r2, #21
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f4:	0852      	lsrs	r2, r2, #1
 80023f6:	3a01      	subs	r2, #1
 80023f8:	0652      	lsls	r2, r2, #25
 80023fa:	4311      	orrs	r1, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002400:	06d2      	lsls	r2, r2, #27
 8002402:	430a      	orrs	r2, r1
 8002404:	494a      	ldr	r1, [pc, #296]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a48      	ldr	r2, [pc, #288]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002410:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002416:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a45      	ldr	r2, [pc, #276]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fdbf 	bl	8000fa4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe fdbb 	bl	8000fa4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e074      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x6ce>
 8002448:	e06c      	b.n	8002524 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a38      	ldr	r2, [pc, #224]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002454:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002456:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002462:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002468:	f023 0303 	bic.w	r3, r3, #3
 800246c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800246e:	4b30      	ldr	r3, [pc, #192]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 8002474:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fd91 	bl	8000fa4 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd8d 	bl	8000fa4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e046      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x72a>
 80024a4:	e03e      	b.n	8002524 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e039      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_RCC_OscConfig+0x7d4>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d12c      	bne.n	8002520 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	3b01      	subs	r3, #1
 80024d2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d123      	bne.n	8002520 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d11b      	bne.n	8002520 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d113      	bne.n	8002520 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	019d808c 	.word	0x019d808c

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0c8      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4961      	ldr	r1, [pc, #388]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b5f      	ldr	r3, [pc, #380]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b0      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d04c      	beq.n	8002622 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d121      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e09e      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d115      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e092      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d109      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e086      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e07e      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 0203 	bic.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	493f      	ldr	r1, [pc, #252]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f2:	f7fe fcd7 	bl	8000fa4 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f7fe fcd3 	bl	8000fa4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e066      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 020c 	and.w	r2, r3, #12
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	429a      	cmp	r2, r3
 8002620:	d1eb      	bne.n	80025fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	492c      	ldr	r1, [pc, #176]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d210      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4924      	ldr	r1, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e036      	b.n	80026de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4918      	ldr	r1, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4910      	ldr	r1, [pc, #64]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ae:	f000 f825 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026b2:	4601      	mov	r1, r0
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fc1a 	bl	8000f0c <HAL_InitTick>
 80026d8:	4603      	mov	r3, r0
 80026da:	72fb      	strb	r3, [r7, #11]

  return status;
 80026dc:	7afb      	ldrb	r3, [r7, #11]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	08008ad4 	.word	0x08008ad4
 80026f4:	20000008 	.word	0x20000008
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002714:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d121      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d11e      	bne.n	800276e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002730:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 800273e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800274c:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <HAL_RCC_GetSysClockFreq+0x108>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10d      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d102      	bne.n	800277a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	e004      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d101      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 8002782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d133      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800279a:	2b03      	cmp	r3, #3
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800279e:	e005      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a2:	617b      	str	r3, [r7, #20]
      break;
 80027a4:	e005      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_GetSysClockFreq+0x110>)
 80027a8:	617b      	str	r3, [r7, #20]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	617b      	str	r3, [r7, #20]
      break;
 80027b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	3301      	adds	r3, #1
 80027be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	fb02 f203 	mul.w	r2, r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_GetSysClockFreq+0x104>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0e5b      	lsrs	r3, r3, #25
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	3301      	adds	r3, #1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027f2:	69bb      	ldr	r3, [r7, #24]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3724      	adds	r7, #36	; 0x24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40021000 	.word	0x40021000
 8002804:	08008aec 	.word	0x08008aec
 8002808:	00f42400 	.word	0x00f42400
 800280c:	007a1200 	.word	0x007a1200

08002810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCC_GetHCLKFreq+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800282c:	f7ff fff0 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002830:	4601      	mov	r1, r0
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800283e:	5cd3      	ldrb	r3, [r2, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	08008ae4 	.word	0x08008ae4

08002854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002858:	f7ff ffda 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800285c:	4601      	mov	r1, r0
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0adb      	lsrs	r3, r3, #11
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK2Freq+0x28>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	08008ae4 	.word	0x08008ae4

08002880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002898:	f7ff f9ec 	bl	8001c74 <HAL_PWREx_GetVoltageRange>
 800289c:	6178      	str	r0, [r7, #20]
 800289e:	e014      	b.n	80028ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a24      	ldr	r2, [pc, #144]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028b8:	f7ff f9dc 	bl	8001c74 <HAL_PWREx_GetVoltageRange>
 80028bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d0:	d10b      	bne.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d919      	bls.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2ba0      	cmp	r3, #160	; 0xa0
 80028dc:	d902      	bls.n	80028e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028de:	2302      	movs	r3, #2
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	e013      	b.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e4:	2301      	movs	r3, #1
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e010      	b.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b80      	cmp	r3, #128	; 0x80
 80028ee:	d902      	bls.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028f0:	2303      	movs	r3, #3
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	e00a      	b.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d102      	bne.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028fc:	2302      	movs	r3, #2
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e004      	b.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d101      	bne.n	800290c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002908:	2301      	movs	r3, #1
 800290a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 0207 	bic.w	r2, r3, #7
 8002914:	4909      	ldr	r1, [pc, #36]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	429a      	cmp	r2, r3
 8002928:	d001      	beq.n	800292e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	40022000 	.word	0x40022000

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002948:	2300      	movs	r3, #0
 800294a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800294c:	2300      	movs	r3, #0
 800294e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02f      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002964:	d005      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002966:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002970:	e00f      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002972:	4bac      	ldr	r3, [pc, #688]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4aab      	ldr	r2, [pc, #684]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800297e:	e00c      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f9dc 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002990:	e003      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	74fb      	strb	r3, [r7, #19]
      break;
 8002996:	e000      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a0:	4ba0      	ldr	r3, [pc, #640]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	499d      	ldr	r1, [pc, #628]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029b6:	e001      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8099 	beq.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ce:	4b95      	ldr	r3, [pc, #596]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b8f      	ldr	r3, [pc, #572]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a8e      	ldr	r2, [pc, #568]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe faca 	bl	8000fa4 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a12:	e009      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fac6 	bl	8000fa4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	74fb      	strb	r3, [r7, #19]
        break;
 8002a26:	e005      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a28:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d155      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01e      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d019      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a56:	4b73      	ldr	r3, [pc, #460]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a72:	4b6c      	ldr	r3, [pc, #432]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	4a6a      	ldr	r2, [pc, #424]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a82:	4a68      	ldr	r2, [pc, #416]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa86 	bl	8000fa4 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fa82 	bl	8000fa4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab2:	e006      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab4:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ec      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	4953      	ldr	r1, [pc, #332]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ade:	e004      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
 8002ae4:	e001      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aea:	7c7b      	ldrb	r3, [r7, #17]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b08:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4943      	ldr	r1, [pc, #268]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 020c 	bic.w	r2, r3, #12
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	493a      	ldr	r1, [pc, #232]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b4c:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	4932      	ldr	r1, [pc, #200]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	4929      	ldr	r1, [pc, #164]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	4921      	ldr	r1, [pc, #132]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4918      	ldr	r1, [pc, #96]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd4:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4910      	ldr	r1, [pc, #64]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d02c      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c14:	d10a      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c16:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4a02      	ldr	r2, [pc, #8]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c20:	60d3      	str	r3, [r2, #12]
 8002c22:	e015      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f881 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d028      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	492d      	ldr	r1, [pc, #180]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	e011      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c92:	d10c      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f852 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2102      	movs	r1, #2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f82f 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10d      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
       ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d76:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
       ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d044      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e041      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d00c      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x6e>
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d013      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x80>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d120      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da0:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e01a      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e013      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc4:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de0:	e006      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e004      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002df0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10d      	bne.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	4944      	ldr	r1, [pc, #272]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d17c      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e26:	f7fe f8bd 	bl	8000fa4 <HAL_GetTick>
 8002e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2c:	e009      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2e:	f7fe f8b9 	bl	8000fa4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d902      	bls.n	8002e42 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e40:	e005      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15f      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d110      	bne.n	8002e7c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0211      	lsls	r1, r2, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68d2      	ldr	r2, [r2, #12]
 8002e70:	06d2      	lsls	r2, r2, #27
 8002e72:	430a      	orrs	r2, r1
 8002e74:	492a      	ldr	r1, [pc, #168]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	610b      	str	r3, [r1, #16]
 8002e7a:	e027      	b.n	8002ecc <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d112      	bne.n	8002ea8 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0211      	lsls	r1, r2, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6912      	ldr	r2, [r2, #16]
 8002e98:	0852      	lsrs	r2, r2, #1
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0552      	lsls	r2, r2, #21
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	491f      	ldr	r1, [pc, #124]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	610b      	str	r3, [r1, #16]
 8002ea6:	e011      	b.n	8002ecc <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6952      	ldr	r2, [r2, #20]
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0652      	lsls	r2, r2, #25
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4916      	ldr	r1, [pc, #88]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f864 	bl	8000fa4 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee0:	f7fe f860 	bl	8000fa4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef2:	e005      	b.n	8002f00 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ef      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e040      	b.n	8002fb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 fd46 	bl	80049d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fae4 	bl	8003530 <UART_SetConfig>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fda2 	bl	8003ac4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fe29 	bl	8003c08 <UART_CheckIdleState>
 8002fb6:	4603      	mov	r3, r0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e027      	b.n	8003022 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2224      	movs	r2, #36	; 0x24
 8002fd6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f001 fd35 	bl	8004a70 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af02      	add	r7, sp, #8
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	2b20      	cmp	r3, #32
 8003040:	f040 8081 	bne.w	8003146 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Transmit+0x26>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e079      	b.n	8003148 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_UART_Transmit+0x38>
 800305e:	2302      	movs	r3, #2
 8003060:	e072      	b.n	8003148 <HAL_UART_Transmit+0x11e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2221      	movs	r2, #33	; 0x21
 8003074:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003076:	f7fd ff95 	bl	8000fa4 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d108      	bne.n	80030a8 <HAL_UART_Transmit+0x7e>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e003      	b.n	80030b0 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030b0:	e02d      	b.n	800310e <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fde8 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03d      	b.n	8003148 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030de:	b292      	uxth	r2, r2
 80030e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	3302      	adds	r3, #2
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e008      	b.n	80030fc <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b292      	uxth	r2, r2
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1cb      	bne.n	80030b2 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2200      	movs	r2, #0
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fdb4 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e009      	b.n	8003148 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
  }
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 808a 	bne.w	800327c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Receive_IT+0x24>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e082      	b.n	800327e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Receive_IT+0x36>
 8003182:	2302      	movs	r3, #2
 8003184:	e07b      	b.n	800327e <HAL_UART_Receive_IT+0x12e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d10e      	bne.n	80031d2 <HAL_UART_Receive_IT+0x82>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <HAL_UART_Receive_IT+0x78>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031c6:	e02d      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	22ff      	movs	r2, #255	; 0xff
 80031cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031d0:	e028      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <HAL_UART_Receive_IT+0xa6>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <HAL_UART_Receive_IT+0x9c>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	22ff      	movs	r2, #255	; 0xff
 80031e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ea:	e01b      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	227f      	movs	r2, #127	; 0x7f
 80031f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031f4:	e016      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031fe:	d10d      	bne.n	800321c <HAL_UART_Receive_IT+0xcc>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_UART_Receive_IT+0xc2>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	227f      	movs	r2, #127	; 0x7f
 800320c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003210:	e008      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	223f      	movs	r2, #63	; 0x3f
 8003216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800321a:	e003      	b.n	8003224 <HAL_UART_Receive_IT+0xd4>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2222      	movs	r2, #34	; 0x22
 800322e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003248:	d107      	bne.n	800325a <HAL_UART_Receive_IT+0x10a>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_UART_Receive_IT+0x13c>)
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
 8003258:	e002      	b.n	8003260 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <HAL_UART_Receive_IT+0x140>)
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003276:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	08003e6b 	.word	0x08003e6b
 8003290:	08003dc1 	.word	0x08003dc1

08003294 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d113      	bne.n	80032ea <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80ff 	beq.w	80034de <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
      }
      return;
 80032e8:	e0f9      	b.n	80034de <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80c1 	beq.w	8003474 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80b6 	beq.w	8003474 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <HAL_UART_IRQHandler+0x9c>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00e      	beq.n	8003358 <HAL_UART_IRQHandler+0xc4>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2202      	movs	r2, #2
 800334a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <HAL_UART_IRQHandler+0xec>
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2204      	movs	r2, #4
 8003372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003378:	f043 0202 	orr.w	r2, r3, #2
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2208      	movs	r2, #8
 80033a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033aa:	f043 0208 	orr.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 8093 	beq.w	80034e2 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d004      	beq.n	80033fe <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d031      	beq.n	8003462 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fc8f 	bl	8003d22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d123      	bne.n	800345a <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003420:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d013      	beq.n	8003452 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342e:	4a30      	ldr	r2, [pc, #192]	; (80034f0 <HAL_UART_IRQHandler+0x25c>)
 8003430:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd ff23 	bl	8001282 <HAL_DMA_Abort_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800344c:	4610      	mov	r0, r2
 800344e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	e00e      	b.n	8003470 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f862 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e00a      	b.n	8003470 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f85e 	bl	800351c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e006      	b.n	8003470 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f85a 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800346e:	e038      	b.n	80034e2 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	bf00      	nop
    return;
 8003472:	e036      	b.n	80034e2 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <HAL_UART_IRQHandler+0x206>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003490:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fd3e 	bl	8003f14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003498:	e026      	b.n	80034e8 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d017      	beq.n	80034e6 <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
    }
    return;
 80034be:	e012      	b.n	80034e6 <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <HAL_UART_IRQHandler+0x254>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fc5a 	bl	8003d8e <UART_EndTransmit_IT>
    return;
 80034da:	bf00      	nop
 80034dc:	e004      	b.n	80034e8 <HAL_UART_IRQHandler+0x254>
      return;
 80034de:	bf00      	nop
 80034e0:	e002      	b.n	80034e8 <HAL_UART_IRQHandler+0x254>
    return;
 80034e2:	bf00      	nop
 80034e4:	e000      	b.n	80034e8 <HAL_UART_IRQHandler+0x254>
    return;
 80034e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	08003d63 	.word	0x08003d63

080034f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003530:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003534:	b088      	sub	sp, #32
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4313      	orrs	r3, r2
 800355c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4bbc      	ldr	r3, [pc, #752]	; (8003858 <UART_SetConfig+0x328>)
 8003566:	4013      	ands	r3, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	69f9      	ldr	r1, [r7, #28]
 800356e:	430b      	orrs	r3, r1
 8003570:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4ab2      	ldr	r2, [pc, #712]	; (800385c <UART_SetConfig+0x32c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4aa9      	ldr	r2, [pc, #676]	; (8003860 <UART_SetConfig+0x330>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d121      	bne.n	8003604 <UART_SetConfig+0xd4>
 80035c0:	4ba8      	ldr	r3, [pc, #672]	; (8003864 <UART_SetConfig+0x334>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d816      	bhi.n	80035fc <UART_SetConfig+0xcc>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0xa4>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035f1 	.word	0x080035f1
 80035dc:	080035eb 	.word	0x080035eb
 80035e0:	080035f7 	.word	0x080035f7
 80035e4:	2301      	movs	r3, #1
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e072      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80035ea:	2302      	movs	r3, #2
 80035ec:	76fb      	strb	r3, [r7, #27]
 80035ee:	e06f      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80035f0:	2304      	movs	r3, #4
 80035f2:	76fb      	strb	r3, [r7, #27]
 80035f4:	e06c      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80035f6:	2308      	movs	r3, #8
 80035f8:	76fb      	strb	r3, [r7, #27]
 80035fa:	e069      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80035fc:	2310      	movs	r3, #16
 80035fe:	76fb      	strb	r3, [r7, #27]
 8003600:	bf00      	nop
 8003602:	e065      	b.n	80036d0 <UART_SetConfig+0x1a0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a97      	ldr	r2, [pc, #604]	; (8003868 <UART_SetConfig+0x338>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d134      	bne.n	8003678 <UART_SetConfig+0x148>
 800360e:	4b95      	ldr	r3, [pc, #596]	; (8003864 <UART_SetConfig+0x334>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d829      	bhi.n	8003670 <UART_SetConfig+0x140>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0xf4>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003659 	.word	0x08003659
 8003628:	08003671 	.word	0x08003671
 800362c:	08003671 	.word	0x08003671
 8003630:	08003671 	.word	0x08003671
 8003634:	08003665 	.word	0x08003665
 8003638:	08003671 	.word	0x08003671
 800363c:	08003671 	.word	0x08003671
 8003640:	08003671 	.word	0x08003671
 8003644:	0800365f 	.word	0x0800365f
 8003648:	08003671 	.word	0x08003671
 800364c:	08003671 	.word	0x08003671
 8003650:	08003671 	.word	0x08003671
 8003654:	0800366b 	.word	0x0800366b
 8003658:	2300      	movs	r3, #0
 800365a:	76fb      	strb	r3, [r7, #27]
 800365c:	e038      	b.n	80036d0 <UART_SetConfig+0x1a0>
 800365e:	2302      	movs	r3, #2
 8003660:	76fb      	strb	r3, [r7, #27]
 8003662:	e035      	b.n	80036d0 <UART_SetConfig+0x1a0>
 8003664:	2304      	movs	r3, #4
 8003666:	76fb      	strb	r3, [r7, #27]
 8003668:	e032      	b.n	80036d0 <UART_SetConfig+0x1a0>
 800366a:	2308      	movs	r3, #8
 800366c:	76fb      	strb	r3, [r7, #27]
 800366e:	e02f      	b.n	80036d0 <UART_SetConfig+0x1a0>
 8003670:	2310      	movs	r3, #16
 8003672:	76fb      	strb	r3, [r7, #27]
 8003674:	bf00      	nop
 8003676:	e02b      	b.n	80036d0 <UART_SetConfig+0x1a0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a77      	ldr	r2, [pc, #476]	; (800385c <UART_SetConfig+0x32c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d124      	bne.n	80036cc <UART_SetConfig+0x19c>
 8003682:	4b78      	ldr	r3, [pc, #480]	; (8003864 <UART_SetConfig+0x334>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003690:	d012      	beq.n	80036b8 <UART_SetConfig+0x188>
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d802      	bhi.n	800369e <UART_SetConfig+0x16e>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <UART_SetConfig+0x17c>
 800369c:	e012      	b.n	80036c4 <UART_SetConfig+0x194>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d006      	beq.n	80036b2 <UART_SetConfig+0x182>
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a8:	d009      	beq.n	80036be <UART_SetConfig+0x18e>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x194>
 80036ac:	2300      	movs	r3, #0
 80036ae:	76fb      	strb	r3, [r7, #27]
 80036b0:	e00e      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80036b2:	2302      	movs	r3, #2
 80036b4:	76fb      	strb	r3, [r7, #27]
 80036b6:	e00b      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80036b8:	2304      	movs	r3, #4
 80036ba:	76fb      	strb	r3, [r7, #27]
 80036bc:	e008      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80036be:	2308      	movs	r3, #8
 80036c0:	76fb      	strb	r3, [r7, #27]
 80036c2:	e005      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80036c4:	2310      	movs	r3, #16
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	bf00      	nop
 80036ca:	e001      	b.n	80036d0 <UART_SetConfig+0x1a0>
 80036cc:	2310      	movs	r3, #16
 80036ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a61      	ldr	r2, [pc, #388]	; (800385c <UART_SetConfig+0x32c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f040 80f4 	bne.w	80038c4 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036dc:	7efb      	ldrb	r3, [r7, #27]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d823      	bhi.n	800372a <UART_SetConfig+0x1fa>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <UART_SetConfig+0x1b8>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800370d 	.word	0x0800370d
 80036ec:	0800372b 	.word	0x0800372b
 80036f0:	08003715 	.word	0x08003715
 80036f4:	0800372b 	.word	0x0800372b
 80036f8:	0800371b 	.word	0x0800371b
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	0800372b 	.word	0x0800372b
 8003704:	0800372b 	.word	0x0800372b
 8003708:	08003723 	.word	0x08003723
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff f88c 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003710:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003712:	e00d      	b.n	8003730 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003714:	4b55      	ldr	r3, [pc, #340]	; (800386c <UART_SetConfig+0x33c>)
 8003716:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003718:	e00a      	b.n	8003730 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800371a:	f7fe ffef 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 800371e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003720:	e006      	b.n	8003730 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003726:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003728:	e002      	b.n	8003730 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	74fb      	strb	r3, [r7, #19]
        break;
 800372e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 81b9 	beq.w	8003aaa <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d305      	bcc.n	8003754 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	429a      	cmp	r2, r3
 8003752:	d902      	bls.n	800375a <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	74fb      	strb	r3, [r7, #19]
 8003758:	e1a7      	b.n	8003aaa <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 800375a:	7efb      	ldrb	r3, [r7, #27]
 800375c:	2b08      	cmp	r3, #8
 800375e:	f200 809e 	bhi.w	800389e <UART_SetConfig+0x36e>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0x238>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800378d 	.word	0x0800378d
 800376c:	0800389f 	.word	0x0800389f
 8003770:	080037d9 	.word	0x080037d9
 8003774:	0800389f 	.word	0x0800389f
 8003778:	0800380d 	.word	0x0800380d
 800377c:	0800389f 	.word	0x0800389f
 8003780:	0800389f 	.word	0x0800389f
 8003784:	0800389f 	.word	0x0800389f
 8003788:	08003875 	.word	0x08003875
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800378c:	f7ff f84c 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003790:	4603      	mov	r3, r0
 8003792:	4619      	mov	r1, r3
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	f04f 0400 	mov.w	r4, #0
 80037a0:	0214      	lsls	r4, r2, #8
 80037a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037a6:	020b      	lsls	r3, r1, #8
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6852      	ldr	r2, [r2, #4]
 80037ac:	0852      	lsrs	r2, r2, #1
 80037ae:	4611      	mov	r1, r2
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	eb13 0b01 	adds.w	fp, r3, r1
 80037b8:	eb44 0c02 	adc.w	ip, r4, r2
 80037bc:	4658      	mov	r0, fp
 80037be:	4661      	mov	r1, ip
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4623      	mov	r3, r4
 80037cc:	f7fd fa06 	bl	8000bdc <__aeabi_uldivmod>
 80037d0:	4603      	mov	r3, r0
 80037d2:	460c      	mov	r4, r1
 80037d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80037d6:	e065      	b.n	80038a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	4923      	ldr	r1, [pc, #140]	; (8003870 <UART_SetConfig+0x340>)
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	eb13 0b01 	adds.w	fp, r3, r1
 80037ec:	eb44 0c02 	adc.w	ip, r4, r2
 80037f0:	4658      	mov	r0, fp
 80037f2:	4661      	mov	r1, ip
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f7fd f9ec 	bl	8000bdc <__aeabi_uldivmod>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800380a:	e04b      	b.n	80038a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800380c:	f7fe ff76 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003810:	4603      	mov	r3, r0
 8003812:	4619      	mov	r1, r3
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	0214      	lsls	r4, r2, #8
 8003822:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003826:	020b      	lsls	r3, r1, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6852      	ldr	r2, [r2, #4]
 800382c:	0852      	lsrs	r2, r2, #1
 800382e:	4611      	mov	r1, r2
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	eb13 0b01 	adds.w	fp, r3, r1
 8003838:	eb44 0c02 	adc.w	ip, r4, r2
 800383c:	4658      	mov	r0, fp
 800383e:	4661      	mov	r1, ip
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f04f 0400 	mov.w	r4, #0
 8003848:	461a      	mov	r2, r3
 800384a:	4623      	mov	r3, r4
 800384c:	f7fd f9c6 	bl	8000bdc <__aeabi_uldivmod>
 8003850:	4603      	mov	r3, r0
 8003852:	460c      	mov	r4, r1
 8003854:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003856:	e025      	b.n	80038a4 <UART_SetConfig+0x374>
 8003858:	efff69f3 	.word	0xefff69f3
 800385c:	40008000 	.word	0x40008000
 8003860:	40013800 	.word	0x40013800
 8003864:	40021000 	.word	0x40021000
 8003868:	40004400 	.word	0x40004400
 800386c:	00f42400 	.word	0x00f42400
 8003870:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003882:	f144 0100 	adc.w	r1, r4, #0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f04f 0400 	mov.w	r4, #0
 800388e:	461a      	mov	r2, r3
 8003890:	4623      	mov	r3, r4
 8003892:	f7fd f9a3 	bl	8000bdc <__aeabi_uldivmod>
 8003896:	4603      	mov	r3, r0
 8003898:	460c      	mov	r4, r1
 800389a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800389c:	e002      	b.n	80038a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	74fb      	strb	r3, [r7, #19]
            break;
 80038a2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038aa:	d308      	bcc.n	80038be <UART_SetConfig+0x38e>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d204      	bcs.n	80038be <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e0f5      	b.n	8003aaa <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	74fb      	strb	r3, [r7, #19]
 80038c2:	e0f2      	b.n	8003aaa <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	d17f      	bne.n	80039ce <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80038ce:	7efb      	ldrb	r3, [r7, #27]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d85c      	bhi.n	800398e <UART_SetConfig+0x45e>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_SetConfig+0x3ac>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003901 	.word	0x08003901
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800393d 	.word	0x0800393d
 80038e8:	0800398f 	.word	0x0800398f
 80038ec:	08003959 	.word	0x08003959
 80038f0:	0800398f 	.word	0x0800398f
 80038f4:	0800398f 	.word	0x0800398f
 80038f8:	0800398f 	.word	0x0800398f
 80038fc:	08003977 	.word	0x08003977
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003900:	f7fe ff92 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003904:	4603      	mov	r3, r0
 8003906:	005a      	lsls	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	fbb2 f3f3 	udiv	r3, r2, r3
 8003918:	b29b      	uxth	r3, r3
 800391a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800391c:	e03a      	b.n	8003994 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800391e:	f7fe ff99 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003922:	4603      	mov	r3, r0
 8003924:	005a      	lsls	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800393a:	e02b      	b.n	8003994 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003946:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6852      	ldr	r2, [r2, #4]
 800394e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003956:	e01d      	b.n	8003994 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003958:	f7fe fed0 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 800395c:	4603      	mov	r3, r0
 800395e:	005a      	lsls	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	b29b      	uxth	r3, r3
 8003972:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003974:	e00e      	b.n	8003994 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	b29b      	uxth	r3, r3
 800398a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800398c:	e002      	b.n	8003994 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	74fb      	strb	r3, [r7, #19]
        break;
 8003992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d916      	bls.n	80039c8 <UART_SetConfig+0x498>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d212      	bcs.n	80039c8 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f023 030f 	bic.w	r3, r3, #15
 80039aa:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	897a      	ldrh	r2, [r7, #10]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	e070      	b.n	8003aaa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	74fb      	strb	r3, [r7, #19]
 80039cc:	e06d      	b.n	8003aaa <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80039ce:	7efb      	ldrb	r3, [r7, #27]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d859      	bhi.n	8003a88 <UART_SetConfig+0x558>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x4ac>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	08003a89 	.word	0x08003a89
 80039ec:	08003a55 	.word	0x08003a55
 80039f0:	08003a89 	.word	0x08003a89
 80039f4:	08003a89 	.word	0x08003a89
 80039f8:	08003a89 	.word	0x08003a89
 80039fc:	08003a71 	.word	0x08003a71
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a00:	f7fe ff12 	bl	8002828 <HAL_RCC_GetPCLK1Freq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a1a:	e038      	b.n	8003a8e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a1c:	f7fe ff1a 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a36:	e02a      	b.n	8003a8e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003a42:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6852      	ldr	r2, [r2, #4]
 8003a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a52:	e01c      	b.n	8003a8e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a54:	f7fe fe52 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	441a      	add	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a6e:	e00e      	b.n	8003a8e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a86:	e002      	b.n	8003a8e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	74fb      	strb	r3, [r7, #19]
        break;
 8003a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d908      	bls.n	8003aa6 <UART_SetConfig+0x576>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9a:	d204      	bcs.n	8003aa6 <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e001      	b.n	8003aaa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003ab6:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003ac2:	bf00      	nop

08003ac4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01a      	beq.n	8003bda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d10a      	bne.n	8003bda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c16:	f7fd f9c5 	bl	8000fa4 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d10e      	bne.n	8003c48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f82a 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e020      	b.n	8003c8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d10e      	bne.n	8003c74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f814 	bl	8003c92 <UART_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e00a      	b.n	8003c8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca2:	e02a      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d026      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7fd f97a 	bl	8000fa4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11b      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0201 	bic.w	r2, r2, #1
 8003ce0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e00f      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0c5      	beq.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d38:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fbcb 	bl	800351c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff fb9e 	bl	80034f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd4:	2b22      	cmp	r3, #34	; 0x22
 8003dd6:	d13a      	bne.n	8003e4e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dde:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003de0:	89bb      	ldrh	r3, [r7, #12]
 8003de2:	b2d9      	uxtb	r1, r3
 8003de4:	89fb      	ldrh	r3, [r7, #14]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	400a      	ands	r2, r1
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d123      	bne.n	8003e62 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0201 	bic.w	r2, r2, #1
 8003e38:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fb5e 	bl	8003508 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e4c:	e009      	b.n	8003e62 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	8b1b      	ldrh	r3, [r3, #24]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0208 	orr.w	r2, r2, #8
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	831a      	strh	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e78:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e7e:	2b22      	cmp	r3, #34	; 0x22
 8003e80:	d13a      	bne.n	8003ef8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e88:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e90:	89ba      	ldrh	r2, [r7, #12]
 8003e92:	89fb      	ldrh	r3, [r7, #14]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d123      	bne.n	8003f0c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ed2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fb09 	bl	8003508 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ef6:	e009      	b.n	8003f0c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	8b1b      	ldrh	r3, [r3, #24]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0208 	orr.w	r2, r2, #8
 8003f08:	b292      	uxth	r2, r2
 8003f0a:	831a      	strh	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <LL_PWR_SetPowerMode+0x24>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 0207 	bic.w	r2, r3, #7
 8003f38:	4904      	ldr	r1, [pc, #16]	; (8003f4c <LL_PWR_SetPowerMode+0x24>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40007000 	.word	0x40007000

08003f50 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <LL_LPM_EnableSleep+0x1c>)
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <LL_LPM_EnableSleep+0x1c>)
 8003f5a:	f023 0304 	bic.w	r3, r3, #4
 8003f5e:	6113      	str	r3, [r2, #16]
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <LL_LPM_EnableDeepSleep+0x1c>)
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <LL_LPM_EnableDeepSleep+0x1c>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6113      	str	r3, [r2, #16]
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <LL_LPM_DisableSleepOnExit>:
  * @brief  Do not sleep when returning to Thread mode.
  * @rmtoll SCB_SCR      SLEEPONEXIT   LL_LPM_DisableSleepOnExit
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <LL_LPM_DisableSleepOnExit+0x1c>)
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <LL_LPM_DisableSleepOnExit+0x1c>)
 8003f9a:	f023 0302 	bic.w	r3, r3, #2
 8003f9e:	6113      	str	r3, [r2, #16]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <LL_LPM_EnableEventOnPend>:
  *         processor.
  * @rmtoll SCB_SCR      SEVEONPEND    LL_LPM_EnableEventOnPend
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableEventOnPend(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* Set SEVEONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <LL_LPM_EnableEventOnPend+0x1c>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <LL_LPM_EnableEventOnPend+0x1c>)
 8003fba:	f043 0310 	orr.w	r3, r3, #16
 8003fbe:	6113      	str	r3, [r2, #16]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <LL_RCC_SetClkAfterWakeFromStop+0x24>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	608b      	str	r3, [r1, #8]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <eventWait>:

// Forwards
void eventSleep(uint32_t wakeEvents);

// Wait for any of these events to happen, with a high-granularity timeout (granularity defined by LPTIM1)
bool eventWait(uint32_t events, uint32_t timeoutMs) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]

    if (timeoutMs != 0) {
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <eventWait+0x2c>
#ifdef EVENT_TIMER
        eventClear(EVENT_TIMER);
 8004008:	2001      	movs	r0, #1
 800400a:	f000 f85b 	bl	80040c4 <eventClear>
        events |= EVENT_TIMER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	607b      	str	r3, [r7, #4]
        eventTimerExpiresMs = MY_TimerMs() + timeoutMs;
 8004016:	f000 fb4f 	bl	80046b8 <MY_TimerMs>
 800401a:	4602      	mov	r2, r0
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	4413      	add	r3, r2
 8004020:	4a0c      	ldr	r2, [pc, #48]	; (8004054 <eventWait+0x5c>)
 8004022:	6013      	str	r3, [r2, #0]
        eventTimerExpiresMs = HAL_Ticks() + timeoutMs;
#endif
    }

    // Sleep until any of these events happens
    eventSleep(events);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f861 	bl	80040ec <eventSleep>

    // Mask off anything except non-timer events that we're looking for
    events &= eventOccurred();
 800402a:	f000 f83f 	bl	80040ac <eventOccurred>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4013      	ands	r3, r2
 8004034:	607b      	str	r3, [r7, #4]
#ifdef EVENT_TIMER
    events &= ~EVENT_TIMER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	607b      	str	r3, [r7, #4]
#endif

    // Return TRUE if an event other than timeout occurred
    return (events != 0);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf14      	ite	ne
 8004044:	2301      	movne	r3, #1
 8004046:	2300      	moveq	r3, #0
 8004048:	b2db      	uxtb	r3, r3

}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000258 	.word	0x20000258

08004058 <eventPollTimer>:

// Poll to see if any timer events transpired
#ifdef EVENT_TIMER
void eventPollTimer() {
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
    if (eventTimerExpiresMs != 0 && MY_TimerMs() >= eventTimerExpiresMs) {
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <eventPollTimer+0x2c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <eventPollTimer+0x26>
 8004064:	f000 fb28 	bl	80046b8 <MY_TimerMs>
 8004068:	4602      	mov	r2, r0
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <eventPollTimer+0x2c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d305      	bcc.n	800407e <eventPollTimer+0x26>
        eventTimerExpiresMs = 0;
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <eventPollTimer+0x2c>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
        event(EVENT_TIMER);
 8004078:	2001      	movs	r0, #1
 800407a:	f000 f805 	bl	8004088 <event>
    }
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000258 	.word	0x20000258

08004088 <event>:
#endif

// Mark that an event has transpired.  Note that this is safe to call from an ISR
void event(uint32_t event) {
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
    eventsThatHappened |= event;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <event+0x20>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4313      	orrs	r3, r2
 8004098:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <event+0x20>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000254 	.word	0x20000254

080040ac <eventOccurred>:

// Get the mask of events that have occurred
uint32_t eventOccurred() {
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
    return eventsThatHappened;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <eventOccurred+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000254 	.word	0x20000254

080040c4 <eventClear>:

// Mark that we're no longer interested in an event
void eventClear(uint32_t event) {
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    eventsThatHappened &= ~event;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <eventClear+0x24>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4013      	ands	r3, r2
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <eventClear+0x24>)
 80040d8:	6013      	str	r3, [r2, #0]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000254 	.word	0x20000254

080040ec <eventSleep>:

// Go into a sleep state if it's appropriate to do so, else simply return
void eventSleep(uint32_t wakeEvents) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

    // Exit immediately if the event already occurred
    if ((eventsThatHappened & wakeEvents) != 0)
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <eventSleep+0x94>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d13b      	bne.n	8004178 <eventSleep+0x8c>
    }

#else

    // If any of several conditions hold true, we will wait for events in a loop
    bool highPowerEventWait = false;
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]

    // If we're debugging, don't sleep
    if (MY_Debug())
 8004104:	f000 fbac 	bl	8004860 <MY_Debug>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02d      	beq.n	800416a <eventSleep+0x7e>
        highPowerEventWait = true;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]

    // Loop in here until an event happens
    while ((eventsThatHappened & wakeEvents) == 0) {
 8004112:	e02a      	b.n	800416a <eventSleep+0x7e>

        // If we're doing an event wait in a high-power manner, spin
        if (highPowerEventWait) {
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <eventSleep+0x36>

            HAL_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f7fc ff4e 	bl	8000fbc <HAL_Delay>
 8004120:	e023      	b.n	800416a <eventSleep+0x7e>

        } else {

            // Deinitialize all perpherals
            MY_Sleep_DeInit();
 8004122:	f000 fbaf 	bl	8004884 <MY_Sleep_DeInit>

            // Specify what clock we want after stop mode.
            LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8004126:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800412a:	f7ff ff51 	bl	8003fd0 <LL_RCC_SetClkAfterWakeFromStop>

            // Set Stop mode 2
            LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 800412e:	2002      	movs	r0, #2
 8004130:	f7ff fefa 	bl	8003f28 <LL_PWR_SetPowerMode>

            // Enabled events and all interrupts, including disabled interrupts,
            // can wake up the processor
            LL_LPM_EnableEventOnPend();
 8004134:	f7ff ff3c 	bl	8003fb0 <LL_LPM_EnableEventOnPend>

            // Make sure that we don't sleep on return from an interrupt
            LL_LPM_DisableSleepOnExit();
 8004138:	f7ff ff2a 	bl	8003f90 <LL_LPM_DisableSleepOnExit>

            // Enable content retention
            HAL_PWREx_EnableSRAM2ContentRetention();
 800413c:	f7fd fdfe 	bl	8001d3c <HAL_PWREx_EnableSRAM2ContentRetention>
#if defined(STM32L4R5xx) || defined(STM32L4S5xx)
            HAL_PWREx_EnableSRAM3ContentRetention();
#endif

            // Set SLEEPDEEP bit of Cortex System Control Register
            LL_LPM_EnableDeepSleep();
 8004140:	f7ff ff16 	bl	8003f70 <LL_LPM_EnableDeepSleep>

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_RESET);
 8004144:	2200      	movs	r2, #0
 8004146:	2108      	movs	r1, #8
 8004148:	480e      	ldr	r0, [pc, #56]	; (8004184 <eventSleep+0x98>)
 800414a:	f7fd fb0f 	bl	800176c <HAL_GPIO_WritePin>
  __ASM volatile ("dsb 0xF":::"memory");
 800414e:	f3bf 8f4f 	dsb	sy
#endif

            // Wait for interrupt
            __DSB();
            __WFI();
 8004152:	bf30      	wfi
  __ASM volatile ("isb 0xF":::"memory");
 8004154:	f3bf 8f6f 	isb	sy
            __ISB();

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8004158:	2201      	movs	r2, #1
 800415a:	2108      	movs	r1, #8
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <eventSleep+0x98>)
 800415e:	f7fd fb05 	bl	800176c <HAL_GPIO_WritePin>
#endif

            // Reset SLEEPDEEP bit of Cortex System Control Register
            // so that we only sleep, not deep sleep, on another wfi
            LL_LPM_EnableSleep();
 8004162:	f7ff fef5 	bl	8003f50 <LL_LPM_EnableSleep>

            // Reset clocks (BEFORE GetHCLKFreq() is called)
            SystemCoreClockUpdate();
 8004166:	f000 fdcb 	bl	8004d00 <SystemCoreClockUpdate>
    while ((eventsThatHappened & wakeEvents) == 0) {
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <eventSleep+0x94>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ce      	beq.n	8004114 <eventSleep+0x28>
 8004176:	e000      	b.n	800417a <eventSleep+0x8e>
        return;
 8004178:	bf00      	nop

#endif  // EVENT_TIMER

    }   // loop until an event happens

}
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000254 	.word	0x20000254
 8004184:	48000400 	.word	0x48000400

08004188 <setup>:
#else
#define EVENTS_TO_WAIT_FOR  0
#endif

// One-time initialization
void setup() {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("hub.set");
 800418e:	480a      	ldr	r0, [pc, #40]	; (80041b8 <setup+0x30>)
 8004190:	f003 fbde 	bl	8007950 <NoteNewRequest>
 8004194:	6078      	str	r0, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <setup+0x34>)
 8004198:	4909      	ldr	r1, [pc, #36]	; (80041c0 <setup+0x38>)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f002 ff6e 	bl	800707c <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 80041a0:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <setup+0x3c>)
 80041a2:	4909      	ldr	r1, [pc, #36]	; (80041c8 <setup+0x40>)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f002 ff69 	bl	800707c <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f003 fbe6 	bl	800797c <NoteRequest>

}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	08008780 	.word	0x08008780
 80041bc:	0800878c 	.word	0x0800878c
 80041c0:	080087b4 	.word	0x080087b4
 80041c4:	080087bc 	.word	0x080087bc
 80041c8:	080087c8 	.word	0x080087c8

080041cc <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 80041cc:	b590      	push	{r4, r7, lr}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <loop+0x118>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	4a42      	ldr	r2, [pc, #264]	; (80042e4 <loop+0x118>)
 80041da:	6013      	str	r3, [r2, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f04f 0400 	mov.w	r4, #0
 80041e4:	e9c7 3406 	strd	r3, r4, [r7, #24]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 80041e8:	483f      	ldr	r0, [pc, #252]	; (80042e8 <loop+0x11c>)
 80041ea:	f003 fbb1 	bl	8007950 <NoteNewRequest>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f003 fbeb 	bl	80079cc <NoteRequestResponse>
 80041f6:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d008      	beq.n	8004210 <loop+0x44>
        temperature = JGetNumber(rsp, "value");
 80041fe:	493b      	ldr	r1, [pc, #236]	; (80042ec <loop+0x120>)
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f003 f829 	bl	8007258 <JGetNumber>
 8004206:	ed87 0b06 	vstr	d0, [r7, #24]
        NoteDeleteResponse(rsp);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f001 f866 	bl	80052dc <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	e9c7 3404 	strd	r3, r4, [r7, #16]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 800421c:	4834      	ldr	r0, [pc, #208]	; (80042f0 <loop+0x124>)
 800421e:	f003 fb97 	bl	8007950 <NoteNewRequest>
 8004222:	4603      	mov	r3, r0
 8004224:	4618      	mov	r0, r3
 8004226:	f003 fbd1 	bl	80079cc <NoteRequestResponse>
 800422a:	60f8      	str	r0, [r7, #12]
    if (rsp != NULL) {
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <loop+0x78>
        voltage = JGetNumber(rsp, "value");
 8004232:	492e      	ldr	r1, [pc, #184]	; (80042ec <loop+0x120>)
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f003 f80f 	bl	8007258 <JGetNumber>
 800423a:	ed87 0b04 	vstr	d0, [r7, #16]
        NoteDeleteResponse(rsp);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f001 f84c 	bl	80052dc <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8004244:	482b      	ldr	r0, [pc, #172]	; (80042f4 <loop+0x128>)
 8004246:	f003 fb83 	bl	8007950 <NoteNewRequest>
 800424a:	60b8      	str	r0, [r7, #8]
	if (req != NULL) {
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03f      	beq.n	80042d2 <loop+0x106>
	    JAddStringToObject(req, "file", "sensors.qo");
 8004252:	4a29      	ldr	r2, [pc, #164]	; (80042f8 <loop+0x12c>)
 8004254:	4929      	ldr	r1, [pc, #164]	; (80042fc <loop+0x130>)
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	f002 ff10 	bl	800707c <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 800425c:	2201      	movs	r2, #1
 800425e:	4928      	ldr	r1, [pc, #160]	; (8004300 <loop+0x134>)
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f002 fec5 	bl	8006ff0 <JAddBoolToObject>
		J *body = JCreateObject();
 8004266:	f002 ffb5 	bl	80071d4 <JCreateObject>
 800426a:	6078      	str	r0, [r7, #4]
		if (body != NULL) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02c      	beq.n	80042cc <loop+0x100>
			JAddNumberToObject(body, "temp", temperature);
 8004272:	ed97 0b06 	vldr	d0, [r7, #24]
 8004276:	4923      	ldr	r1, [pc, #140]	; (8004304 <loop+0x138>)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 fedb 	bl	8007034 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 800427e:	ed97 0b04 	vldr	d0, [r7, #16]
 8004282:	4921      	ldr	r1, [pc, #132]	; (8004308 <loop+0x13c>)
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f002 fed5 	bl	8007034 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <loop+0x118>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7fc f948 	bl	8000524 <__aeabi_ui2d>
 8004294:	4603      	mov	r3, r0
 8004296:	460c      	mov	r4, r1
 8004298:	ec44 3b10 	vmov	d0, r3, r4
 800429c:	491b      	ldr	r1, [pc, #108]	; (800430c <loop+0x140>)
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f002 fec8 	bl	8007034 <JAddNumberToObject>
#ifdef EVENT_BUTTON
            if ((eventOccurred() & EVENT_BUTTON) != 0) {
 80042a4:	f7ff ff02 	bl	80040ac <eventOccurred>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <loop+0xf6>
                JAddBoolToObject(body, "button", true);
 80042b2:	2201      	movs	r2, #1
 80042b4:	4916      	ldr	r1, [pc, #88]	; (8004310 <loop+0x144>)
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f002 fe9a 	bl	8006ff0 <JAddBoolToObject>
                eventClear(EVENT_BUTTON);
 80042bc:	2002      	movs	r0, #2
 80042be:	f7ff ff01 	bl	80040c4 <eventClear>
            }
#endif
		    JAddItemToObject(req, "body", body);
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	4913      	ldr	r1, [pc, #76]	; (8004314 <loop+0x148>)
 80042c6:	68b8      	ldr	r0, [r7, #8]
 80042c8:	f002 fe7e 	bl	8006fc8 <JAddItemToObject>
		}
	    NoteRequest(req);
 80042cc:	68b8      	ldr	r0, [r7, #8]
 80042ce:	f003 fb55 	bl	800797c <NoteRequest>
	}

	// Delay between measurements
#if EVENTS
    eventWait(EVENTS_TO_WAIT_FOR, DELAY_PERIOD);
 80042d2:	f643 2198 	movw	r1, #15000	; 0x3a98
 80042d6:	2002      	movs	r0, #2
 80042d8:	f7ff fe8e 	bl	8003ff8 <eventWait>
#else
	delay(DELAY_PERIOD);
#endif

}
 80042dc:	bf00      	nop
 80042de:	3724      	adds	r7, #36	; 0x24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd90      	pop	{r4, r7, pc}
 80042e4:	2000025c 	.word	0x2000025c
 80042e8:	080087d0 	.word	0x080087d0
 80042ec:	080087dc 	.word	0x080087dc
 80042f0:	080087e4 	.word	0x080087e4
 80042f4:	080087f4 	.word	0x080087f4
 80042f8:	08008800 	.word	0x08008800
 80042fc:	0800880c 	.word	0x0800880c
 8004300:	08008814 	.word	0x08008814
 8004304:	0800881c 	.word	0x0800881c
 8004308:	08008824 	.word	0x08008824
 800430c:	0800882c 	.word	0x0800882c
 8004310:	08008834 	.word	0x08008834
 8004314:	0800883c 	.word	0x0800883c

08004318 <main>:
size_t noteDebugSerialOutput(const char *message);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0

    // Initialize peripherals
    HAL_Init();
 800431c:	f7fc fdde 	bl	8000edc <HAL_Init>
    SystemClock_Config();
 8004320:	f000 f826 	bl	8004370 <SystemClock_Config>
    MX_GPIO_Init();
 8004324:	f000 f9d4 	bl	80046d0 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
 8004328:	f000 f97c 	bl	8004624 <MX_LPTIM1_Init>
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <main+0x38>)
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <main+0x3c>)
 8004330:	4909      	ldr	r1, [pc, #36]	; (8004358 <main+0x40>)
 8004332:	480a      	ldr	r0, [pc, #40]	; (800435c <main+0x44>)
 8004334:	f003 f988 	bl	8007648 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <main+0x48>)
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <main+0x4c>)
 800433c:	490a      	ldr	r1, [pc, #40]	; (8004368 <main+0x50>)
 800433e:	480b      	ldr	r0, [pc, #44]	; (800436c <main+0x54>)
 8004340:	f003 f9a4 	bl	800768c <NoteSetFnSerial>
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8004344:	f7ff ff20 	bl	8004188 <setup>
    while (true)
        loop();
 8004348:	f7ff ff40 	bl	80041cc <loop>
 800434c:	e7fc      	b.n	8004348 <main+0x30>
 800434e:	bf00      	nop
 8004350:	08004853 	.word	0x08004853
 8004354:	0800483d 	.word	0x0800483d
 8004358:	08007e89 	.word	0x08007e89
 800435c:	08007e79 	.word	0x08007e79
 8004360:	080048fd 	.word	0x080048fd
 8004364:	080048d5 	.word	0x080048d5
 8004368:	080048a9 	.word	0x080048a9
 800436c:	08004899 	.word	0x08004899

08004370 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b0ac      	sub	sp, #176	; 0xb0
 8004374:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004376:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800437a:	2244      	movs	r2, #68	; 0x44
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fdc0 	bl	8007f04 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004384:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004394:	1d3b      	adds	r3, r7, #4
 8004396:	2254      	movs	r2, #84	; 0x54
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f003 fdb2 	bl	8007f04 <memset>

    // Configure LSE Drive Capability
    HAL_PWR_EnableBkUpAccess();
 80043a0:	f7fd fc58 	bl	8001c54 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80043a4:	4b38      	ldr	r3, [pc, #224]	; (8004488 <SystemClock_Config+0x118>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a37      	ldr	r2, [pc, #220]	; (8004488 <SystemClock_Config+0x118>)
 80043ac:	f023 0318 	bic.w	r3, r3, #24
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    // Initialize the CPU, AHB and APB buses' clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 80043b4:	231c      	movs	r3, #28
 80043b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043b8:	2301      	movs	r3, #1
 80043ba:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80043bc:	2301      	movs	r3, #1
 80043be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80043ce:	2360      	movs	r3, #96	; 0x60
 80043d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043d4:	2302      	movs	r3, #2
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80043da:	2301      	movs	r3, #1
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 16;
 80043e6:	2310      	movs	r3, #16
 80043e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80043ec:	2307      	movs	r3, #7
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd fcaa 	bl	8001d5c <HAL_RCC_OscConfig>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <SystemClock_Config+0xa2>
        Error_Handler();
 800440e:	f000 fa0e 	bl	800482e <Error_Handler>

    // Initialize the CPU, AHB and APB buses' clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004412:	230f      	movs	r3, #15
 8004414:	65bb      	str	r3, [r7, #88]	; 0x58
        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004416:	2303      	movs	r3, #3
 8004418:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441a:	2300      	movs	r3, #0
 800441c:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800441e:	2300      	movs	r3, #0
 8004420:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004422:	2300      	movs	r3, #0
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe f883 	bl	8002538 <HAL_RCC_ClockConfig>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SystemClock_Config+0xcc>
        Error_Handler();
 8004438:	f000 f9f9 	bl	800482e <Error_Handler>

    // Initialize peripheral clocks
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800443c:	2341      	movs	r3, #65	; 0x41
 800443e:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004444:	2300      	movs	r3, #0
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef EVENT_TIMER
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_LPTIM1;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444e:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8004450:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004454:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe fa71 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <SystemClock_Config+0xf8>
        Error_Handler();
 8004464:	f000 f9e3 	bl	800482e <Error_Handler>

    // Configure the main internal regulator output voltage
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004468:	f44f 7000 	mov.w	r0, #512	; 0x200
 800446c:	f7fd fc10 	bl	8001c90 <HAL_PWREx_ControlVoltageScaling>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <SystemClock_Config+0x10a>
        Error_Handler();
 8004476:	f000 f9da 	bl	800482e <Error_Handler>

    // Enable MSI Auto calibration
    HAL_RCCEx_EnableMSIPLLMode();
 800447a:	f7fe fc53 	bl	8002d24 <HAL_RCCEx_EnableMSIPLLMode>

}
 800447e:	bf00      	nop
 8004480:	37b0      	adds	r7, #176	; 0xb0
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000

0800448c <MX_I2C1_DeInit>:
        Error_Handler();

}

// I2C1 De-initialization
void MX_I2C1_DeInit(void) {
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!i2c1Initialized)
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <MX_I2C1_DeInit+0x30>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	f083 0301 	eor.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <MX_I2C1_DeInit+0x2a>
        return;
    i2c1Initialized = false;
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <MX_I2C1_DeInit+0x30>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
    
    // Deconfigure Analogue filter
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE);
 80044a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044a8:	4805      	ldr	r0, [pc, #20]	; (80044c0 <MX_I2C1_DeInit+0x34>)
 80044aa:	f7fd f9d8 	bl	800185e <HAL_I2CEx_ConfigAnalogFilter>

    // Deinitialize
    HAL_I2C_DeInit(&hi2c1);
 80044ae:	4804      	ldr	r0, [pc, #16]	; (80044c0 <MX_I2C1_DeInit+0x34>)
 80044b0:	f7fd f98c 	bl	80017cc <HAL_I2C_DeInit>
 80044b4:	e000      	b.n	80044b8 <MX_I2C1_DeInit+0x2c>
        return;
 80044b6:	bf00      	nop

}
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000260 	.word	0x20000260
 80044c0:	200004c8 	.word	0x200004c8

080044c4 <MX_USART1_UART_Init>:

// USART1 Initialization
void MX_USART1_UART_Init(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0

    // Exit if already done
    if (uart1Initialized)
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <MX_USART1_UART_Init+0x80>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d137      	bne.n	8004540 <MX_USART1_UART_Init+0x7c>
        return;
    uart1Initialized = true;
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <MX_USART1_UART_Init+0x80>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    huart1.Instance = USART1;
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044d8:	4a1c      	ldr	r2, [pc, #112]	; (800454c <MX_USART1_UART_Init+0x88>)
 80044da:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80044e2:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80044ea:	4b17      	ldr	r3, [pc, #92]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044f8:	220c      	movs	r2, #12
 80044fa:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <MX_USART1_UART_Init+0x84>)
 80044fe:	2200      	movs	r2, #0
 8004500:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <MX_USART1_UART_Init+0x84>)
 8004504:	2200      	movs	r2, #0
 8004506:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <MX_USART1_UART_Init+0x84>)
 800450a:	2200      	movs	r2, #0
 800450c:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <MX_USART1_UART_Init+0x84>)
 8004510:	2200      	movs	r2, #0
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8004514:	480c      	ldr	r0, [pc, #48]	; (8004548 <MX_USART1_UART_Init+0x84>)
 8004516:	f7fe fd05 	bl	8002f24 <HAL_UART_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <MX_USART1_UART_Init+0x60>
        Error_Handler();
 8004520:	f000 f985 	bl	800482e <Error_Handler>

    // Reset our buffer management
    serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <MX_USART1_UART_Init+0x8c>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	2300      	movs	r3, #0
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <MX_USART1_UART_Init+0x90>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	4a09      	ldr	r2, [pc, #36]	; (8004558 <MX_USART1_UART_Init+0x94>)
 8004532:	6013      	str	r3, [r2, #0]

    // Unused, but included for documentation
    ((void)(serialOverruns));

    // Start the inbound receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8004534:	2201      	movs	r2, #1
 8004536:	4909      	ldr	r1, [pc, #36]	; (800455c <MX_USART1_UART_Init+0x98>)
 8004538:	4803      	ldr	r0, [pc, #12]	; (8004548 <MX_USART1_UART_Init+0x84>)
 800453a:	f7fe fe09 	bl	8003150 <HAL_UART_Receive_IT>
 800453e:	e000      	b.n	8004542 <MX_USART1_UART_Init+0x7e>
        return;
 8004540:	bf00      	nop

}
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000261 	.word	0x20000261
 8004548:	20000514 	.word	0x20000514
 800454c:	40013800 	.word	0x40013800
 8004550:	20000274 	.word	0x20000274
 8004554:	20000270 	.word	0x20000270
 8004558:	2000026c 	.word	0x2000026c
 800455c:	20000268 	.word	0x20000268

08004560 <MY_UART_IRQHandler>:

// USART1 IRQ handler
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d12c      	bne.n	80045ce <MY_UART_IRQHandler+0x6e>
        if (serialFillIndex < sizeof(serialBuffer)) {
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <MY_UART_IRQHandler+0x80>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800457c:	d216      	bcs.n	80045ac <MY_UART_IRQHandler+0x4c>
            if (serialFillIndex+1 == serialDrainIndex)
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <MY_UART_IRQHandler+0x80>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <MY_UART_IRQHandler+0x84>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d105      	bne.n	8004598 <MY_UART_IRQHandler+0x38>
                serialOverruns++;
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <MY_UART_IRQHandler+0x88>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <MY_UART_IRQHandler+0x88>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01a      	b.n	80045ce <MY_UART_IRQHandler+0x6e>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <MY_UART_IRQHandler+0x80>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	4910      	ldr	r1, [pc, #64]	; (80045e0 <MY_UART_IRQHandler+0x80>)
 80045a0:	600a      	str	r2, [r1, #0]
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <MY_UART_IRQHandler+0x8c>)
 80045a4:	7811      	ldrb	r1, [r2, #0]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <MY_UART_IRQHandler+0x90>)
 80045a8:	54d1      	strb	r1, [r2, r3]
 80045aa:	e010      	b.n	80045ce <MY_UART_IRQHandler+0x6e>
        } else {
            if (serialDrainIndex == 1)
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <MY_UART_IRQHandler+0x84>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d105      	bne.n	80045c0 <MY_UART_IRQHandler+0x60>
                serialOverruns++;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <MY_UART_IRQHandler+0x88>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <MY_UART_IRQHandler+0x88>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e006      	b.n	80045ce <MY_UART_IRQHandler+0x6e>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <MY_UART_IRQHandler+0x8c>)
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <MY_UART_IRQHandler+0x90>)
 80045c6:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <MY_UART_IRQHandler+0x80>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 80045ce:	2201      	movs	r2, #1
 80045d0:	4906      	ldr	r1, [pc, #24]	; (80045ec <MY_UART_IRQHandler+0x8c>)
 80045d2:	4808      	ldr	r0, [pc, #32]	; (80045f4 <MY_UART_IRQHandler+0x94>)
 80045d4:	f7fe fdbc 	bl	8003150 <HAL_UART_Receive_IT>

}
 80045d8:	bf00      	nop
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	2000026c 	.word	0x2000026c
 80045e4:	20000270 	.word	0x20000270
 80045e8:	20000274 	.word	0x20000274
 80045ec:	20000268 	.word	0x20000268
 80045f0:	20000278 	.word	0x20000278
 80045f4:	20000514 	.word	0x20000514

080045f8 <MX_USART1_UART_DeInit>:

// USART1 De-initialization
void MX_USART1_UART_DeInit(void) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!uart1Initialized)
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <MX_USART1_UART_DeInit+0x24>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <MX_USART1_UART_DeInit+0x20>
        return;
    uart1Initialized = false;
 800460a:	4b04      	ldr	r3, [pc, #16]	; (800461c <MX_USART1_UART_DeInit+0x24>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_UART_DeInit(&huart1);
 8004610:	4803      	ldr	r0, [pc, #12]	; (8004620 <MX_USART1_UART_DeInit+0x28>)
 8004612:	f7fe fcd5 	bl	8002fc0 <HAL_UART_DeInit>
 8004616:	e000      	b.n	800461a <MX_USART1_UART_DeInit+0x22>
        return;
 8004618:	bf00      	nop

}
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000261 	.word	0x20000261
 8004620:	20000514 	.word	0x20000514

08004624 <MX_LPTIM1_Init>:

// LPTIM1 Initialization
#ifdef EVENT_TIMER
void MX_LPTIM1_Init(void) {
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0

    // Initialize clock
    hlptim1.Instance = LPTIM1;
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <MX_LPTIM1_Init+0x68>)
 800462a:	4a19      	ldr	r2, [pc, #100]	; (8004690 <MX_LPTIM1_Init+0x6c>)
 800462c:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800462e:	4b17      	ldr	r3, [pc, #92]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004630:	2200      	movs	r2, #0
 8004632:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <MX_LPTIM1_Init+0x68>)
 800463c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004640:	615a      	str	r2, [r3, #20]
    hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004644:	2200      	movs	r2, #0
 8004646:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <MX_LPTIM1_Init+0x68>)
 800464a:	2200      	movs	r2, #0
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800464e:	4b0f      	ldr	r3, [pc, #60]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	; 0x28
    hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8004654:	4b0d      	ldr	r3, [pc, #52]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004656:	2200      	movs	r2, #0
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
    hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <MX_LPTIM1_Init+0x68>)
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004660:	480a      	ldr	r0, [pc, #40]	; (800468c <MX_LPTIM1_Init+0x68>)
 8004662:	f7fd f947 	bl	80018f4 <HAL_LPTIM_Init>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <MX_LPTIM1_Init+0x4c>
        Error_Handler();
 800466c:	f000 f8df 	bl	800482e <Error_Handler>
    // Period is the maximum value of the auto-reload counter - can't go higher.
    // Timeout is the value to be placed into the compare register - this is max
#define Period      (uint32_t) 65535
#define Timeout     (uint32_t) 32767
#define LPTIM_MS    2000
    if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, Period, Timeout) != HAL_OK)
 8004670:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8004674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <MX_LPTIM1_Init+0x68>)
 800467a:	f7fd f9cd 	bl	8001a18 <HAL_LPTIM_TimeOut_Start_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_LPTIM1_Init+0x64>
        Error_Handler();
 8004684:	f000 f8d3 	bl	800482e <Error_Handler>

}
 8004688:	bf00      	nop
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000594 	.word	0x20000594
 8004690:	40007c00 	.word	0x40007c00

08004694 <HAL_LPTIM_CompareMatchCallback>:
#endif

// Compare match callback in non blocking mode
// NOTE: THIS IS CALLED ONCE PER TICK (EVERY 2 SECONDS AS LPTIM1 IS PROGRAMMED)
#ifdef EVENT_TIMER
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

    // Add to the total milliseconds since boot
    totalTimerMs += LPTIM_MS;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_LPTIM_CompareMatchCallback+0x20>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80046a4:	4a03      	ldr	r2, [pc, #12]	; (80046b4 <HAL_LPTIM_CompareMatchCallback+0x20>)
 80046a6:	6013      	str	r3, [r2, #0]

    // Poll the event poller to see if any events transpired
    eventPollTimer();
 80046a8:	f7ff fcd6 	bl	8004058 <eventPollTimer>

}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000264 	.word	0x20000264

080046b8 <MY_TimerMs>:
#endif

// This returns milliseconds since boot (which may wrap)
#ifdef EVENT_TIMER
uint32_t MY_TimerMs() {
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
    return totalTimerMs;
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <MY_TimerMs+0x14>)
 80046be:	681b      	ldr	r3, [r3, #0]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000264 	.word	0x20000264

080046d0 <MX_GPIO_Init>:
#endif

// GPIO initialization
void MX_GPIO_Init(void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d6:	f107 0314 	add.w	r3, r7, #20
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	611a      	str	r2, [r3, #16]

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046e6:	4b46      	ldr	r3, [pc, #280]	; (8004800 <MX_GPIO_Init+0x130>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	4a45      	ldr	r2, [pc, #276]	; (8004800 <MX_GPIO_Init+0x130>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046f2:	4b43      	ldr	r3, [pc, #268]	; (8004800 <MX_GPIO_Init+0x130>)
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	4b40      	ldr	r3, [pc, #256]	; (8004800 <MX_GPIO_Init+0x130>)
 8004700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004702:	4a3f      	ldr	r2, [pc, #252]	; (8004800 <MX_GPIO_Init+0x130>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <MX_GPIO_Init+0x130>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <MX_GPIO_Init+0x130>)
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	4a39      	ldr	r2, [pc, #228]	; (8004800 <MX_GPIO_Init+0x130>)
 800471c:	f043 0302 	orr.w	r3, r3, #2
 8004720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004722:	4b37      	ldr	r3, [pc, #220]	; (8004800 <MX_GPIO_Init+0x130>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	68bb      	ldr	r3, [r7, #8]

    // Configure GPIO pin : VCP_TX_Pin
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800472e:	2304      	movs	r3, #4
 8004730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004732:	2302      	movs	r3, #2
 8004734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473a:	2303      	movs	r3, #3
 800473c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800473e:	2307      	movs	r3, #7
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004742:	f107 0314 	add.w	r3, r7, #20
 8004746:	4619      	mov	r1, r3
 8004748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800474c:	f7fc fdda 	bl	8001304 <HAL_GPIO_Init>

    // Configure GPIO pin : VCP_RX_Pin
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004762:	2303      	movs	r3, #3
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004770:	f7fc fdc8 	bl	8001304 <HAL_GPIO_Init>

    // Configure LED GPIO pin : LD3_Pin
#if EVENT_SLEEP_LED
    GPIO_LED_ENABLE();
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <MX_GPIO_Init+0x130>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	4a21      	ldr	r2, [pc, #132]	; (8004800 <MX_GPIO_Init+0x130>)
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004780:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <MX_GPIO_Init+0x130>)
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pin = GPIO_LED_PIN;
 800478c:	2308      	movs	r3, #8
 800478e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004790:	2301      	movs	r3, #1
 8004792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	2300      	movs	r3, #0
 800479a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIO_LED_PORT, &GPIO_InitStruct);
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	4619      	mov	r1, r3
 80047a2:	4818      	ldr	r0, [pc, #96]	; (8004804 <MX_GPIO_Init+0x134>)
 80047a4:	f7fc fdae 	bl	8001304 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 80047a8:	2201      	movs	r2, #1
 80047aa:	2108      	movs	r1, #8
 80047ac:	4815      	ldr	r0, [pc, #84]	; (8004804 <MX_GPIO_Init+0x134>)
 80047ae:	f7fc ffdd 	bl	800176c <HAL_GPIO_WritePin>
#endif

    // Initialize the simulated button, if present
#ifdef EVENT_BUTTON
    GPIO_BUTTON_CLOCK_ENABLE();
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <MX_GPIO_Init+0x130>)
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <MX_GPIO_Init+0x130>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <MX_GPIO_Init+0x130>)
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_BUTTON_PIN;
 80047ce:	2310      	movs	r3, #16
 80047d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <MX_GPIO_Init+0x138>)
 80047d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIO_BUTTON_PORT, &GPIO_InitStruct);
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	4619      	mov	r1, r3
 80047e0:	4808      	ldr	r0, [pc, #32]	; (8004804 <MX_GPIO_Init+0x134>)
 80047e2:	f7fc fd8f 	bl	8001304 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(GPIO_BUTTON_IRQ, 0, 0);
 80047e6:	2200      	movs	r2, #0
 80047e8:	2100      	movs	r1, #0
 80047ea:	200a      	movs	r0, #10
 80047ec:	f7fc fd05 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPIO_BUTTON_IRQ);
 80047f0:	200a      	movs	r0, #10
 80047f2:	f7fc fd1e 	bl	8001232 <HAL_NVIC_EnableIRQ>
#endif
        
}
 80047f6:	bf00      	nop
 80047f8:	3728      	adds	r7, #40	; 0x28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	48000400 	.word	0x48000400
 8004808:	10110000 	.word	0x10110000

0800480c <HAL_GPIO_EXTI_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	80fb      	strh	r3, [r7, #6]

    // Handle the button
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_GPIO_EXTI_Callback+0x1a>
        event(EVENT_BUTTON);
 8004820:	2002      	movs	r0, #2
 8004822:	f7ff fc31 	bl	8004088 <event>
#endif

}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7fc fbb9 	bl	8000fbc <HAL_Delay>
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 8004852:	b580      	push	{r7, lr}
 8004854:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 8004856:	f7fc fba5 	bl	8000fa4 <HAL_GetTick>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}

08004860 <MY_Debug>:

// Determine whether or not a debugger is actively connected.  We use
// this to suppress STOP2 mode so that code can be maintained/debugged.
bool MY_Debug() {
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
	return (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) != 0;
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <MY_Debug+0x20>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000edf0 	.word	0xe000edf0

08004884 <MY_Sleep_DeInit>:

// Deinitialize everything that might block a sleep from happening
void MY_Sleep_DeInit() {
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0

    // Deinitialize the peripherals
    MX_I2C1_DeInit();
 8004888:	f7ff fe00 	bl	800448c <MX_I2C1_DeInit>
    MX_USART1_UART_DeInit();
 800488c:	f7ff feb4 	bl	80045f8 <MX_USART1_UART_DeInit>

    // Notify the Note subsystem that these will need to be reinitialized
    // on the next call to any of the Note I/O functions
    NoteResetRequired();
 8004890:	f003 f930 	bl	8007af4 <NoteResetRequired>

}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <noteSerialReset>:

// Serial port reset procedure, called before any I/O and called again upon I/O error
void noteSerialReset() {
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
    MX_USART1_UART_DeInit();
 800489c:	f7ff feac 	bl	80045f8 <MX_USART1_UART_DeInit>
    MX_USART1_UART_Init();
 80048a0:	f7ff fe10 	bl	80044c4 <MX_USART1_UART_Init>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <noteSerialTransmit>:

// Serial write data function
void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, text, len, 5000);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	4803      	ldr	r0, [pc, #12]	; (80048d0 <noteSerialTransmit+0x28>)
 80048c2:	f7fe fbb2 	bl	800302a <HAL_UART_Transmit>
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000514 	.word	0x20000514

080048d4 <noteSerialAvailable>:

// Serial "is anything available" function, which does a read-ahead for data into a serial buffer
bool noteSerialAvailable() {
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
    return (serialFillIndex != serialDrainIndex);
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <noteSerialAvailable+0x20>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <noteSerialAvailable+0x24>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	bf14      	ite	ne
 80048e4:	2301      	movne	r3, #1
 80048e6:	2300      	moveq	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	2000026c 	.word	0x2000026c
 80048f8:	20000270 	.word	0x20000270

080048fc <noteSerialReceive>:

// Blocking serial read a byte function (generally only called if known to be available)
char noteSerialReceive() {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
    char data;
    while (!noteSerialAvailable()) ;
 8004902:	bf00      	nop
 8004904:	f7ff ffe6 	bl	80048d4 <noteSerialAvailable>
 8004908:	4603      	mov	r3, r0
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f7      	bne.n	8004904 <noteSerialReceive+0x8>
    if (serialDrainIndex < sizeof(serialBuffer))
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <noteSerialReceive+0x4c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800491c:	d208      	bcs.n	8004930 <noteSerialReceive+0x34>
        data = serialBuffer[serialDrainIndex++];
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <noteSerialReceive+0x4c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	4908      	ldr	r1, [pc, #32]	; (8004948 <noteSerialReceive+0x4c>)
 8004926:	600a      	str	r2, [r1, #0]
 8004928:	4a08      	ldr	r2, [pc, #32]	; (800494c <noteSerialReceive+0x50>)
 800492a:	5cd3      	ldrb	r3, [r2, r3]
 800492c:	71fb      	strb	r3, [r7, #7]
 800492e:	e005      	b.n	800493c <noteSerialReceive+0x40>
    else {
        data = serialBuffer[0];
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <noteSerialReceive+0x50>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	71fb      	strb	r3, [r7, #7]
        serialDrainIndex = 1;
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <noteSerialReceive+0x4c>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
    }
    return data;
 800493c:	79fb      	ldrb	r3, [r7, #7]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000270 	.word	0x20000270
 800494c:	20000278 	.word	0x20000278

08004950 <HAL_MspInit>:

#include "main.h"
#include "event.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_MspInit+0x44>)
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_MspInit+0x44>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6613      	str	r3, [r2, #96]	; 0x60
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_MspInit+0x44>)
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	607b      	str	r3, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 800496e:	4b09      	ldr	r3, [pc, #36]	; (8004994 <HAL_MspInit+0x44>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <HAL_MspInit+0x44>)
 8004974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <HAL_MspInit+0x44>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <HAL_I2C_MspDeInit>:
    }

}

// Deinitialize all I2C ports
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

    // Handle I2C1
    if (hi2c->Instance==I2C1) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_I2C_MspDeInit+0x34>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10c      	bne.n	80049c4 <HAL_I2C_MspDeInit+0x2c>

        // Peripheral clock disable
        __HAL_RCC_I2C1_CLK_DISABLE();
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_I2C_MspDeInit+0x38>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <HAL_I2C_MspDeInit+0x38>)
 80049b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b4:	6593      	str	r3, [r2, #88]	; 0x58

        // I2C1 GPIO deconfigure
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80049b6:	21c0      	movs	r1, #192	; 0xc0
 80049b8:	4806      	ldr	r0, [pc, #24]	; (80049d4 <HAL_I2C_MspDeInit+0x3c>)
 80049ba:	f7fc fe0d 	bl	80015d8 <HAL_GPIO_DeInit>

        // I2C1 interrupt DeInit
        HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80049be:	201f      	movs	r0, #31
 80049c0:	f7fc fc45 	bl	800124e <HAL_NVIC_DisableIRQ>

    }

}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40005400 	.word	0x40005400
 80049d0:	40021000 	.word	0x40021000
 80049d4:	48000400 	.word	0x48000400

080049d8 <HAL_UART_MspInit>:

// Initialize all UART ports
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_UART_MspInit+0x90>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d139      	bne.n	8004a5e <HAL_UART_MspInit+0x86>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	611a      	str	r2, [r3, #16]

        // Peripheral clock
        __HAL_RCC_USART1_CLK_ENABLE();
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_UART_MspInit+0x94>)
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_UART_MspInit+0x94>)
 8004a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a04:	6613      	str	r3, [r2, #96]	; 0x60
 8004a06:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_UART_MspInit+0x94>)
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	613b      	str	r3, [r7, #16]
 8004a10:	693b      	ldr	r3, [r7, #16]

        // USART1 GPIO Configuration
        // PA9     ------> USART1_TX
        // PA10     ------> USART1_RX
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <HAL_UART_MspInit+0x94>)
 8004a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a16:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <HAL_UART_MspInit+0x94>)
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <HAL_UART_MspInit+0x94>)
 8004a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a2e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a3c:	2307      	movs	r3, #7
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a4a:	f7fc fc5b 	bl	8001304 <HAL_GPIO_Init>

        // USART1 interrupt Init
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2100      	movs	r1, #0
 8004a52:	2025      	movs	r0, #37	; 0x25
 8004a54:	f7fc fbd1 	bl	80011fa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a58:	2025      	movs	r0, #37	; 0x25
 8004a5a:	f7fc fbea 	bl	8001232 <HAL_NVIC_EnableIRQ>

    }

}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40021000 	.word	0x40021000

08004a70 <HAL_UART_MspDeInit>:

// Deinitialize all UARTs
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_UART_MspDeInit+0x38>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10e      	bne.n	8004aa0 <HAL_UART_MspDeInit+0x30>

        // Peripheral clock disable
        __HAL_RCC_USART1_CLK_DISABLE();
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <HAL_UART_MspDeInit+0x3c>)
 8004a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <HAL_UART_MspDeInit+0x3c>)
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	6613      	str	r3, [r2, #96]	; 0x60

        // GPIO deconfigure
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004a8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a96:	f7fc fd9f 	bl	80015d8 <HAL_GPIO_DeInit>

        // Interrupt DeInit
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004a9a:	2025      	movs	r0, #37	; 0x25
 8004a9c:	f7fc fbd7 	bl	800124e <HAL_NVIC_DisableIRQ>

    }

}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40013800 	.word	0x40013800
 8004aac:	40021000 	.word	0x40021000

08004ab0 <HAL_LPTIM_MspInit>:

// Initialize all low power timers
#ifdef EVENT_TIMER
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

    // Handle LPTIM1
    if (hlptim->Instance==LPTIM1) {
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <HAL_LPTIM_MspInit+0x44>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d113      	bne.n	8004aea <HAL_LPTIM_MspInit+0x3a>

        // Clock
        __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <HAL_LPTIM_MspInit+0x48>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <HAL_LPTIM_MspInit+0x48>)
 8004ac8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004acc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <HAL_LPTIM_MspInit+0x48>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]

        // LPTIM1 interrupt Init
        HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2041      	movs	r0, #65	; 0x41
 8004ae0:	f7fc fb8b 	bl	80011fa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004ae4:	2041      	movs	r0, #65	; 0x41
 8004ae6:	f7fc fba4 	bl	8001232 <HAL_NVIC_EnableIRQ>

    }

}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40007c00 	.word	0x40007c00
 8004af8:	40021000 	.word	0x40021000

08004afc <NMI_Handler>:
#ifdef EVENT_TIMER
extern LPTIM_HandleTypeDef hlptim1;
#endif

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
    while (1) ;
 8004b0e:	e7fe      	b.n	8004b0e <HardFault_Handler+0x4>

08004b10 <MemManage_Handler>:
}

// Memory management fault
void MemManage_Handler(void) {
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
    while (1) ;
 8004b14:	e7fe      	b.n	8004b14 <MemManage_Handler+0x4>

08004b16 <BusFault_Handler>:
}

// Prefetch or memory access fault
void BusFault_Handler(void) {
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
    while (1) ;
 8004b1a:	e7fe      	b.n	8004b1a <BusFault_Handler+0x4>

08004b1c <UsageFault_Handler>:
}

// Undefined instruction or illegal state
void UsageFault_Handler(void) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
    while (1) ;
 8004b20:	e7fe      	b.n	8004b20 <UsageFault_Handler+0x4>

08004b22 <SVC_Handler>:
}

// System service call via SWI instruction
void SVC_Handler(void) {
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
}
 8004b26:	bf00      	nop
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <DebugMon_Handler>:

// Debug monitor
void DebugMon_Handler(void) {
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <PendSV_Handler>:

// Pendable request for system service.
void PendSV_Handler(void) {
 8004b3e:	b480      	push	{r7}
 8004b40:	af00      	add	r7, sp, #0
}
 8004b42:	bf00      	nop
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8004b50:	f7fc fa16 	bl	8000f80 <HAL_IncTick>
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C1_EV_IRQHandler>:

// I2C1 event interrupt
void I2C1_EV_IRQHandler(void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004b5c:	4802      	ldr	r0, [pc, #8]	; (8004b68 <I2C1_EV_IRQHandler+0x10>)
 8004b5e:	f7fc fe64 	bl	800182a <HAL_I2C_EV_IRQHandler>
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200004c8 	.word	0x200004c8

08004b6c <USART1_IRQHandler>:

// USART1 global interrupt
void USART1_IRQHandler(void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8004b70:	4803      	ldr	r0, [pc, #12]	; (8004b80 <USART1_IRQHandler+0x14>)
 8004b72:	f7fe fb8f 	bl	8003294 <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8004b76:	4802      	ldr	r0, [pc, #8]	; (8004b80 <USART1_IRQHandler+0x14>)
 8004b78:	f7ff fcf2 	bl	8004560 <MY_UART_IRQHandler>
}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000514 	.word	0x20000514

08004b84 <EXTI0_IRQHandler>:

// GPIO interrupts
void EXTI0_IRQHandler( void ) {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fc fe07 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler( void ) {
 8004b92:	b580      	push	{r7, lr}
 8004b94:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004b96:	2002      	movs	r0, #2
 8004b98:	f7fc fe00 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler( void ) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ba4:	2004      	movs	r0, #4
 8004ba6:	f7fc fdf9 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}

08004bae <EXTI3_IRQHandler>:
void EXTI3_IRQHandler( void ) {
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004bb2:	2008      	movs	r0, #8
 8004bb4:	f7fc fdf2 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler( void ) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004bc0:	2010      	movs	r0, #16
 8004bc2:	f7fc fdeb 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <MY_GPIO_EXTI_IRQHandler>:
// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	80fb      	strh	r3, [r7, #6]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <MY_GPIO_EXTI_IRQHandler+0x30>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->PR1;
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	4013      	ands	r3, r2
 8004bec:	81fb      	strh	r3, [r7, #14]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <MY_GPIO_EXTI_IRQHandler+0x38>)
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	6153      	str	r3, [r2, #20]
        HAL_GPIO_EXTI_Callback(GPIO_Line);
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fe08 	bl	800480c <HAL_GPIO_EXTI_Callback>
    }
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40010400 	.word	0x40010400

08004c08 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler( void ) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5);
 8004c0c:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8004c10:	f7ff ffdc 	bl	8004bcc <MY_GPIO_EXTI_IRQHandler>
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler( void ) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10);
 8004c1c:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 8004c20:	f7ff ffd4 	bl	8004bcc <MY_GPIO_EXTI_IRQHandler>
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LPTIM1_IRQHandler>:

// LPTIM1 global interrupt
#ifdef EVENT_TIMER
void LPTIM1_IRQHandler(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
    HAL_LPTIM_IRQHandler(&hlptim1);
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <LPTIM1_IRQHandler+0x10>)
 8004c2e:	f7fc ff39 	bl	8001aa4 <HAL_LPTIM_IRQHandler>
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	20000594 	.word	0x20000594

08004c3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <_sbrk+0x50>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <_sbrk+0x16>
		heap_end = &end;
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <_sbrk+0x50>)
 8004c4e:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <_sbrk+0x54>)
 8004c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <_sbrk+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c58:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <_sbrk+0x50>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	466a      	mov	r2, sp
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d907      	bls.n	8004c76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c66:	f003 f8cf 	bl	8007e08 <__errno>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	230c      	movs	r3, #12
 8004c6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e006      	b.n	8004c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <_sbrk+0x50>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	4a03      	ldr	r2, [pc, #12]	; (8004c8c <_sbrk+0x50>)
 8004c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c82:	68fb      	ldr	r3, [r7, #12]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20000478 	.word	0x20000478
 8004c90:	200005d0 	.word	0x200005d0

08004c94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <SystemInit+0x64>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	4a16      	ldr	r2, [pc, #88]	; (8004cf8 <SystemInit+0x64>)
 8004ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004ca8:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <SystemInit+0x68>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <SystemInit+0x68>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <SystemInit+0x68>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <SystemInit+0x68>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0f      	ldr	r2, [pc, #60]	; (8004cfc <SystemInit+0x68>)
 8004cc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004cc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <SystemInit+0x68>)
 8004ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <SystemInit+0x68>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <SystemInit+0x68>)
 8004cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <SystemInit+0x68>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <SystemInit+0x64>)
 8004ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cea:	609a      	str	r2, [r3, #8]
#endif
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000ed00 	.word	0xe000ed00
 8004cfc:	40021000 	.word	0x40021000

08004d00 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	2302      	movs	r3, #2
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	2300      	movs	r3, #0
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8004d2a:	4b4c      	ldr	r3, [pc, #304]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e005      	b.n	8004d46 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8004d3a:	4b48      	ldr	r3, [pc, #288]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8004d46:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <SystemCoreClockUpdate+0x160>)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d50:	4b42      	ldr	r3, [pc, #264]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 030c 	and.w	r3, r3, #12
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d865      	bhi.n	8004e28 <SystemCoreClockUpdate+0x128>
 8004d5c:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <SystemCoreClockUpdate+0x64>)
 8004d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d62:	bf00      	nop
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004e29 	.word	0x08004e29
 8004d6c:	08004e29 	.word	0x08004e29
 8004d70:	08004e29 	.word	0x08004e29
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004e29 	.word	0x08004e29
 8004d7c:	08004e29 	.word	0x08004e29
 8004d80:	08004e29 	.word	0x08004e29
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004e29 	.word	0x08004e29
 8004d8c:	08004e29 	.word	0x08004e29
 8004d90:	08004e29 	.word	0x08004e29
 8004d94:	08004db1 	.word	0x08004db1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6013      	str	r3, [r2, #0]
      break;
 8004d9e:	e047      	b.n	8004e30 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004da2:	4a31      	ldr	r2, [pc, #196]	; (8004e68 <SystemCoreClockUpdate+0x168>)
 8004da4:	601a      	str	r2, [r3, #0]
      break;
 8004da6:	e043      	b.n	8004e30 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004da8:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004daa:	4a30      	ldr	r2, [pc, #192]	; (8004e6c <SystemCoreClockUpdate+0x16c>)
 8004dac:	601a      	str	r2, [r3, #0]
      break;
 8004dae:	e03f      	b.n	8004e30 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004db0:	4b2a      	ldr	r3, [pc, #168]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8004dba:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d002      	beq.n	8004dd4 <SystemCoreClockUpdate+0xd4>
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d006      	beq.n	8004de0 <SystemCoreClockUpdate+0xe0>
 8004dd2:	e00b      	b.n	8004dec <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8004dd4:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <SystemCoreClockUpdate+0x168>)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	613b      	str	r3, [r7, #16]
          break;
 8004dde:	e00b      	b.n	8004df8 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <SystemCoreClockUpdate+0x16c>)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	613b      	str	r3, [r7, #16]
          break;
 8004dea:	e005      	b.n	8004df8 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	613b      	str	r3, [r7, #16]
          break;
 8004df6:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	0e5b      	lsrs	r3, r3, #25
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	3301      	adds	r3, #1
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004e24:	6013      	str	r3, [r2, #0]
      break;
 8004e26:	e003      	b.n	8004e30 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8004e28:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6013      	str	r3, [r2, #0]
      break;
 8004e2e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <SystemCoreClockUpdate+0x15c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <SystemCoreClockUpdate+0x170>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004e40:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4a:	4a06      	ldr	r2, [pc, #24]	; (8004e64 <SystemCoreClockUpdate+0x164>)
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	08008aec 	.word	0x08008aec
 8004e64:	20000008 	.word	0x20000008
 8004e68:	00f42400 	.word	0x00f42400
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	08008ad4 	.word	0x08008ad4

08004e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004eac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e7a:	e003      	b.n	8004e84 <LoopCopyDataInit>

08004e7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e82:	3104      	adds	r1, #4

08004e84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e84:	480b      	ldr	r0, [pc, #44]	; (8004eb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004e88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004e8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004e8c:	d3f6      	bcc.n	8004e7c <CopyDataInit>
	ldr	r2, =_sbss
 8004e8e:	4a0b      	ldr	r2, [pc, #44]	; (8004ebc <LoopForever+0x12>)
	b	LoopFillZerobss
 8004e90:	e002      	b.n	8004e98 <LoopFillZerobss>

08004e92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004e92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004e94:	f842 3b04 	str.w	r3, [r2], #4

08004e98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <LoopForever+0x16>)
	cmp	r2, r3
 8004e9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004e9c:	d3f9      	bcc.n	8004e92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e9e:	f7ff fef9 	bl	8004c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ea2:	f002 ffb7 	bl	8007e14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ea6:	f7ff fa37 	bl	8004318 <main>

08004eaa <LoopForever>:

LoopForever:
    b LoopForever
 8004eaa:	e7fe      	b.n	8004eaa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004eac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004eb0:	08008cc8 	.word	0x08008cc8
	ldr	r0, =_sdata
 8004eb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004eb8:	20000238 	.word	0x20000238
	ldr	r2, =_sbss
 8004ebc:	20000238 	.word	0x20000238
	ldr	r3, = _ebss
 8004ec0:	200005d0 	.word	0x200005d0

08004ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ec4:	e7fe      	b.n	8004ec4 <ADC1_IRQHandler>
	...

08004ec8 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8004ec8:	b5b0      	push	{r4, r5, r7, lr}
 8004eca:	b092      	sub	sp, #72	; 0x48
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	643b      	str	r3, [r7, #64]	; 0x40
    double fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 8004ede:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 8004ee0:	e000      	b.n	8004ee4 <JAtoN+0x1c>
        p += 1;
 8004ee2:	3401      	adds	r4, #1
    while (*p == ' ') {
 8004ee4:	7823      	ldrb	r3, [r4, #0]
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d0fb      	beq.n	8004ee2 <JAtoN+0x1a>
    }
    if (*p == '-') {
 8004eea:	7823      	ldrb	r3, [r4, #0]
 8004eec:	2b2d      	cmp	r3, #45	; 0x2d
 8004eee:	d103      	bne.n	8004ef8 <JAtoN+0x30>
        sign = TRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 8004ef4:	3401      	adds	r4, #1
 8004ef6:	e005      	b.n	8004f04 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 8004ef8:	7823      	ldrb	r3, [r4, #0]
 8004efa:	2b2b      	cmp	r3, #43	; 0x2b
 8004efc:	d100      	bne.n	8004f00 <JAtoN+0x38>
            p += 1;
 8004efe:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 8004f0e:	7823      	ldrb	r3, [r4, #0]
 8004f10:	461d      	mov	r5, r3
        if (c < '0' || c > '9') {
 8004f12:	2d2f      	cmp	r5, #47	; 0x2f
 8004f14:	dd01      	ble.n	8004f1a <JAtoN+0x52>
 8004f16:	2d39      	cmp	r5, #57	; 0x39
 8004f18:	dd06      	ble.n	8004f28 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 8004f1a:	2d2e      	cmp	r5, #46	; 0x2e
 8004f1c:	d109      	bne.n	8004f32 <JAtoN+0x6a>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da06      	bge.n	8004f32 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 8004f28:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	623b      	str	r3, [r7, #32]
        c = *p;
 8004f30:	e7ed      	b.n	8004f0e <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 8004f32:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	425b      	negs	r3, r3
 8004f38:	441c      	add	r4, r3
    if (decPt < 0) {
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da02      	bge.n	8004f46 <JAtoN+0x7e>
        decPt = mantSize;
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	e002      	b.n	8004f4c <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	dd05      	ble.n	8004f5e <JAtoN+0x96>
        fracExp = decPt - 18;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3b12      	subs	r3, #18
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 8004f58:	2312      	movs	r3, #18
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	e003      	b.n	8004f66 <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <JAtoN+0xb4>
        fraction = 0.0;
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
        p = string;
 8004f78:	68fc      	ldr	r4, [r7, #12]
        goto done;
 8004f7a:	e0cd      	b.n	8005118 <JAtoN+0x250>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8004f80:	e014      	b.n	8004fac <JAtoN+0xe4>
        {
            c = *p;
 8004f82:	7823      	ldrb	r3, [r4, #0]
 8004f84:	461d      	mov	r5, r3
            p += 1;
 8004f86:	3401      	adds	r4, #1
            if (c == '.') {
 8004f88:	2d2e      	cmp	r5, #46	; 0x2e
 8004f8a:	d102      	bne.n	8004f92 <JAtoN+0xca>
                c = *p;
 8004f8c:	7823      	ldrb	r3, [r4, #0]
 8004f8e:	461d      	mov	r5, r3
                p += 1;
 8004f90:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004fa2:	4413      	add	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	2b09      	cmp	r3, #9
 8004fb0:	dce7      	bgt.n	8004f82 <JAtoN+0xba>
        }
        frac2 = 0L;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8004fb6:	e014      	b.n	8004fe2 <JAtoN+0x11a>
        {
            c = *p;
 8004fb8:	7823      	ldrb	r3, [r4, #0]
 8004fba:	461d      	mov	r5, r3
            p += 1;
 8004fbc:	3401      	adds	r4, #1
            if (c == '.') {
 8004fbe:	2d2e      	cmp	r5, #46	; 0x2e
 8004fc0:	d102      	bne.n	8004fc8 <JAtoN+0x100>
                c = *p;
 8004fc2:	7823      	ldrb	r3, [r4, #0]
 8004fc4:	461d      	mov	r5, r3
                p += 1;
 8004fc6:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	623b      	str	r3, [r7, #32]
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dce7      	bgt.n	8004fb8 <JAtoN+0xf0>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8004fe8:	69b8      	ldr	r0, [r7, #24]
 8004fea:	f7fb faab 	bl	8000544 <__aeabi_i2d>
 8004fee:	a35b      	add	r3, pc, #364	; (adr r3, 800515c <JAtoN+0x294>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fb10 	bl	8000618 <__aeabi_dmul>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	4625      	mov	r5, r4
 8004ffe:	461c      	mov	r4, r3
 8005000:	6978      	ldr	r0, [r7, #20]
 8005002:	f7fb fa9f 	bl	8000544 <__aeabi_i2d>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4620      	mov	r0, r4
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb f94d 	bl	80002ac <__adddf3>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

    /*
     * Skim off the exponent.
     */

    p = pExp;
 800501a:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 800501c:	7823      	ldrb	r3, [r4, #0]
 800501e:	2b45      	cmp	r3, #69	; 0x45
 8005020:	d002      	beq.n	8005028 <JAtoN+0x160>
 8005022:	7823      	ldrb	r3, [r4, #0]
 8005024:	2b65      	cmp	r3, #101	; 0x65
 8005026:	d11f      	bne.n	8005068 <JAtoN+0x1a0>
        p += 1;
 8005028:	3401      	adds	r4, #1
        if (*p == '-') {
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2d      	cmp	r3, #45	; 0x2d
 800502e:	d103      	bne.n	8005038 <JAtoN+0x170>
            expSign = TRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 8005034:	3401      	adds	r4, #1
 8005036:	e011      	b.n	800505c <JAtoN+0x194>
        } else {
            if (*p == '+') {
 8005038:	7823      	ldrb	r3, [r4, #0]
 800503a:	2b2b      	cmp	r3, #43	; 0x2b
 800503c:	d100      	bne.n	8005040 <JAtoN+0x178>
                p += 1;
 800503e:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 8005040:	2300      	movs	r3, #0
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 8005044:	e00a      	b.n	800505c <JAtoN+0x194>
            exp = exp * 10 + (*p - '0');
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	461a      	mov	r2, r3
 8005052:	7823      	ldrb	r3, [r4, #0]
 8005054:	3b30      	subs	r3, #48	; 0x30
 8005056:	4413      	add	r3, r2
 8005058:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 800505a:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 800505c:	7823      	ldrb	r3, [r4, #0]
 800505e:	2b2f      	cmp	r3, #47	; 0x2f
 8005060:	d902      	bls.n	8005068 <JAtoN+0x1a0>
 8005062:	7823      	ldrb	r3, [r4, #0]
 8005064:	2b39      	cmp	r3, #57	; 0x39
 8005066:	d9ee      	bls.n	8005046 <JAtoN+0x17e>
        }
    }
    if (expSign) {
 8005068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <JAtoN+0x1b0>
        exp = fracExp - exp;
 800506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 8005076:	e003      	b.n	8005080 <JAtoN+0x1b8>
    } else {
        exp = fracExp + exp;
 8005078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	4413      	add	r3, r2
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	2b00      	cmp	r3, #0
 8005084:	da05      	bge.n	8005092 <JAtoN+0x1ca>
        expSign = TRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	425b      	negs	r3, r3
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	e001      	b.n	8005096 <JAtoN+0x1ce>
    } else {
        expSign = FALSE;
 8005092:	2300      	movs	r3, #0
 8005094:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 8005096:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <JAtoN+0x288>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509c:	429a      	cmp	r2, r3
 800509e:	dd02      	ble.n	80050a6 <JAtoN+0x1de>
        exp = maxExponent;
 80050a0:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <JAtoN+0x288>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <JAtoN+0x28c>)
 80050ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 80050b0:	4b29      	ldr	r3, [pc, #164]	; (8005158 <JAtoN+0x290>)
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b4:	e015      	b.n	80050e2 <JAtoN+0x21a>
        if (exp & 01) {
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <JAtoN+0x20e>
            dblExp *= *d;
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80050ca:	f7fb faa5 	bl	8000618 <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	105b      	asrs	r3, r3, #1
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	3308      	adds	r3, #8
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e6      	bne.n	80050b6 <JAtoN+0x1ee>
        }
    }
    if (expSign) {
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <JAtoN+0x23c>
        fraction /= dblExp;
 80050ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80050f6:	f7fb fbb9 	bl	800086c <__aeabi_ddiv>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8005102:	e009      	b.n	8005118 <JAtoN+0x250>
    } else {
        fraction *= dblExp;
 8005104:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005108:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800510c:	f7fb fa84 	bl	8000618 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

done:
    if (endPtr != NULL) {
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <JAtoN+0x25a>
        *endPtr = (char *) p;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8005122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <JAtoN+0x26e>
        return -fraction;
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800512e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e003      	b.n	800513e <JAtoN+0x276>
    }
    return fraction;
 8005136:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800513a:	ed87 7b00 	vstr	d7, [r7]
 800513e:	ed97 7b00 	vldr	d7, [r7]
}
 8005142:	eeb0 0a47 	vmov.f32	s0, s14
 8005146:	eef0 0a67 	vmov.f32	s1, s15
 800514a:	3748      	adds	r7, #72	; 0x48
 800514c:	46bd      	mov	sp, r7
 800514e:	bdb0      	pop	{r4, r5, r7, pc}
 8005150:	2000000c 	.word	0x2000000c
 8005154:	3ff00000 	.word	0x3ff00000
 8005158:	20000010 	.word	0x20000010
 800515c:	00000000 	.word	0x00000000
 8005160:	41cdcd65 	.word	0x41cdcd65

08005164 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <case_insensitive_strcmp+0x16>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800517a:	2301      	movs	r3, #1
 800517c:	e05e      	b.n	800523c <case_insensitive_strcmp+0xd8>
    }

    if (string1 == string2)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d10d      	bne.n	80051a2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8005186:	2300      	movs	r3, #0
 8005188:	e058      	b.n	800523c <case_insensitive_strcmp+0xd8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8005192:	2300      	movs	r3, #0
 8005194:	e052      	b.n	800523c <case_insensitive_strcmp+0xd8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3301      	adds	r3, #1
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	603b      	str	r3, [r7, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	73fb      	strb	r3, [r7, #15]
 80051a8:	f002 fe58 	bl	8007e5c <__locale_ctype_ptr>
 80051ac:	4602      	mov	r2, r0
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	3301      	adds	r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d103      	bne.n	80051c6 <case_insensitive_strcmp+0x62>
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	f103 0420 	add.w	r4, r3, #32
 80051c4:	e000      	b.n	80051c8 <case_insensitive_strcmp+0x64>
 80051c6:	7bfc      	ldrb	r4, [r7, #15]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	73bb      	strb	r3, [r7, #14]
 80051ce:	f002 fe45 	bl	8007e5c <__locale_ctype_ptr>
 80051d2:	4602      	mov	r2, r0
 80051d4:	7bbb      	ldrb	r3, [r7, #14]
 80051d6:	3301      	adds	r3, #1
 80051d8:	4413      	add	r3, r2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <case_insensitive_strcmp+0x86>
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	3320      	adds	r3, #32
 80051e8:	e000      	b.n	80051ec <case_insensitive_strcmp+0x88>
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d0cc      	beq.n	800518a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	737b      	strb	r3, [r7, #13]
 80051f6:	f002 fe31 	bl	8007e5c <__locale_ctype_ptr>
 80051fa:	4602      	mov	r2, r0
 80051fc:	7b7b      	ldrb	r3, [r7, #13]
 80051fe:	3301      	adds	r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b01      	cmp	r3, #1
 800520a:	d103      	bne.n	8005214 <case_insensitive_strcmp+0xb0>
 800520c:	7b7b      	ldrb	r3, [r7, #13]
 800520e:	f103 0420 	add.w	r4, r3, #32
 8005212:	e000      	b.n	8005216 <case_insensitive_strcmp+0xb2>
 8005214:	7b7c      	ldrb	r4, [r7, #13]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	733b      	strb	r3, [r7, #12]
 800521c:	f002 fe1e 	bl	8007e5c <__locale_ctype_ptr>
 8005220:	4602      	mov	r2, r0
 8005222:	7b3b      	ldrb	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b01      	cmp	r3, #1
 8005230:	d102      	bne.n	8005238 <case_insensitive_strcmp+0xd4>
 8005232:	7b3b      	ldrb	r3, [r7, #12]
 8005234:	3320      	adds	r3, #32
 8005236:	e000      	b.n	800523a <case_insensitive_strcmp+0xd6>
 8005238:	7b3b      	ldrb	r3, [r7, #12]
 800523a:	1ae3      	subs	r3, r4, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bd90      	pop	{r4, r7, pc}

08005244 <Jstrdup>:

static internal_hooks default_hooks = { internal_malloc, internal_free, internal_realloc };
static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* Jstrdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <Jstrdup+0x1c>
    {
        return NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	e015      	b.n	800528c <Jstrdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fa ffbf 	bl	80001e4 <strlen>
 8005266:	4603      	mov	r3, r0
 8005268:	3301      	adds	r3, #1
 800526a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	4798      	blx	r3
 8005274:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <Jstrdup+0x3c>
    {
        return NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	e005      	b.n	800528c <Jstrdup+0x48>
    }
    memcpy(copy, string, length);
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	68b8      	ldr	r0, [r7, #8]
 8005286:	f002 fe19 	bl	8007ebc <memcpy>

    return copy;
 800528a:	68bb      	ldr	r3, [r7, #8]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <JFree>:
}

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return global_hooks.allocate(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(p);
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <JFree+0x18>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	4798      	blx	r3
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000058 	.word	0x20000058

080052b0 <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item(const internal_hooks * const hooks)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    J* node = (J*)hooks->allocate(sizeof(J));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2028      	movs	r0, #40	; 0x28
 80052be:	4798      	blx	r3
 80052c0:	60f8      	str	r0, [r7, #12]
    if (node)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <JNew_Item+0x22>
    {
        memset(node, '\0', sizeof(J));
 80052c8:	2228      	movs	r2, #40	; 0x28
 80052ca:	2100      	movs	r1, #0
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f002 fe19 	bl	8007f04 <memset>
    }

    return node;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80052e8:	e037      	b.n	800535a <JDelete+0x7e>
    {
        next = item->next;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <JDelete+0x32>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <JDelete+0x32>
        {
            JDelete(item->child);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ffe7 	bl	80052dc <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d109      	bne.n	800532e <JDelete+0x52>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <JDelete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <JDelete+0x8c>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6912      	ldr	r2, [r2, #16]
 800532a:	4610      	mov	r0, r2
 800532c:	4798      	blx	r3
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <JDelete+0x72>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <JDelete+0x72>
        {
            global_hooks.deallocate(item->string);
 8005342:	4b09      	ldr	r3, [pc, #36]	; (8005368 <JDelete+0x8c>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6a12      	ldr	r2, [r2, #32]
 800534a:	4610      	mov	r0, r2
 800534c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <JDelete+0x8c>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
        item = next;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1c4      	bne.n	80052ea <JDelete+0xe>
    }
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20000058 	.word	0x20000058

0800536c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8005370:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8005372:	4618      	mov	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	0000      	movs	r0, r0
	...

08005380 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b099      	sub	sp, #100	; 0x64
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
    double number = 0;
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	f04f 0400 	mov.w	r4, #0
 8005392:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800539a:	f7ff ffe7 	bl	800536c <get_decimal_point>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <parse_number+0x36>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <parse_number+0x3a>
    {
        return false;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e104      	b.n	80055c4 <parse_number+0x244>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053be:	e09f      	b.n	8005500 <parse_number+0x180>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6899      	ldr	r1, [r3, #8]
 80053c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ca:	440b      	add	r3, r1
 80053cc:	4413      	add	r3, r2
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	3b2b      	subs	r3, #43	; 0x2b
 80053d2:	2b3a      	cmp	r3, #58	; 0x3a
 80053d4:	f200 80a4 	bhi.w	8005520 <parse_number+0x1a0>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <parse_number+0x60>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080054cd 	.word	0x080054cd
 80053e4:	08005521 	.word	0x08005521
 80053e8:	080054cd 	.word	0x080054cd
 80053ec:	080054eb 	.word	0x080054eb
 80053f0:	08005521 	.word	0x08005521
 80053f4:	080054cd 	.word	0x080054cd
 80053f8:	080054cd 	.word	0x080054cd
 80053fc:	080054cd 	.word	0x080054cd
 8005400:	080054cd 	.word	0x080054cd
 8005404:	080054cd 	.word	0x080054cd
 8005408:	080054cd 	.word	0x080054cd
 800540c:	080054cd 	.word	0x080054cd
 8005410:	080054cd 	.word	0x080054cd
 8005414:	080054cd 	.word	0x080054cd
 8005418:	080054cd 	.word	0x080054cd
 800541c:	08005521 	.word	0x08005521
 8005420:	08005521 	.word	0x08005521
 8005424:	08005521 	.word	0x08005521
 8005428:	08005521 	.word	0x08005521
 800542c:	08005521 	.word	0x08005521
 8005430:	08005521 	.word	0x08005521
 8005434:	08005521 	.word	0x08005521
 8005438:	08005521 	.word	0x08005521
 800543c:	08005521 	.word	0x08005521
 8005440:	08005521 	.word	0x08005521
 8005444:	08005521 	.word	0x08005521
 8005448:	080054cd 	.word	0x080054cd
 800544c:	08005521 	.word	0x08005521
 8005450:	08005521 	.word	0x08005521
 8005454:	08005521 	.word	0x08005521
 8005458:	08005521 	.word	0x08005521
 800545c:	08005521 	.word	0x08005521
 8005460:	08005521 	.word	0x08005521
 8005464:	08005521 	.word	0x08005521
 8005468:	08005521 	.word	0x08005521
 800546c:	08005521 	.word	0x08005521
 8005470:	08005521 	.word	0x08005521
 8005474:	08005521 	.word	0x08005521
 8005478:	08005521 	.word	0x08005521
 800547c:	08005521 	.word	0x08005521
 8005480:	08005521 	.word	0x08005521
 8005484:	08005521 	.word	0x08005521
 8005488:	08005521 	.word	0x08005521
 800548c:	08005521 	.word	0x08005521
 8005490:	08005521 	.word	0x08005521
 8005494:	08005521 	.word	0x08005521
 8005498:	08005521 	.word	0x08005521
 800549c:	08005521 	.word	0x08005521
 80054a0:	08005521 	.word	0x08005521
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005521 	.word	0x08005521
 80054ac:	08005521 	.word	0x08005521
 80054b0:	08005521 	.word	0x08005521
 80054b4:	08005521 	.word	0x08005521
 80054b8:	08005521 	.word	0x08005521
 80054bc:	08005521 	.word	0x08005521
 80054c0:	08005521 	.word	0x08005521
 80054c4:	08005521 	.word	0x08005521
 80054c8:	080054cd 	.word	0x080054cd
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6899      	ldr	r1, [r3, #8]
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d6:	440b      	add	r3, r1
 80054d8:	4413      	add	r3, r2
 80054da:	7819      	ldrb	r1, [r3, #0]
 80054dc:	f107 0208 	add.w	r2, r7, #8
 80054e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e2:	4413      	add	r3, r2
 80054e4:	460a      	mov	r2, r1
 80054e6:	701a      	strb	r2, [r3, #0]
                break;
 80054e8:	e007      	b.n	80054fa <parse_number+0x17a>

            case '.':
                number_c_string[i] = decimal_point;
 80054ea:	f107 0208 	add.w	r2, r7, #8
 80054ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f0:	4413      	add	r3, r2
 80054f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054f6:	701a      	strb	r2, [r3, #0]
                break;
 80054f8:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80054fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fc:	3301      	adds	r3, #1
 80054fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005502:	2b3e      	cmp	r3, #62	; 0x3e
 8005504:	d80e      	bhi.n	8005524 <parse_number+0x1a4>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <parse_number+0x1a4>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005512:	441a      	add	r2, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	f4ff af51 	bcc.w	80053c0 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800551e:	e001      	b.n	8005524 <parse_number+0x1a4>
                goto loop_end;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <parse_number+0x1a6>
loop_end:
 8005524:	bf00      	nop
    number_c_string[i] = '\0';
 8005526:	f107 0208 	add.w	r2, r7, #8
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	4413      	add	r3, r2
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8005532:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fcc3 	bl	8004ec8 <JAtoN>
 8005542:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 8005546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005548:	f107 0308 	add.w	r3, r7, #8
 800554c:	429a      	cmp	r2, r3
 800554e:	d101      	bne.n	8005554 <parse_number+0x1d4>
    {
        return false; /* parse_error */
 8005550:	2300      	movs	r3, #0
 8005552:	e037      	b.n	80055c4 <parse_number+0x244>
    }

    item->valuedouble = number;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800555a:	e9c2 3406 	strd	r3, r4, [r2, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800555e:	a31d      	add	r3, pc, #116	; (adr r3, 80055d4 <parse_number+0x254>)
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005568:	f7fb fadc 	bl	8000b24 <__aeabi_dcmpge>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <parse_number+0x1fc>
    {
        item->valueint = INT_MAX;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	e015      	b.n	80055a8 <parse_number+0x228>
    }
    else if (number <= INT_MIN)
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <parse_number+0x250>)
 8005582:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005586:	f7fb fac3 	bl	8000b10 <__aeabi_dcmple>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <parse_number+0x21a>
    {
        item->valueint = INT_MIN;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	e006      	b.n	80055a8 <parse_number+0x228>
    }
    else
    {
        item->valueint = (int)number;
 800559a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800559e:	f7fb fad5 	bl	8000b4c <__aeabi_d2iz>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2208      	movs	r2, #8
 80055ac:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b4:	4611      	mov	r1, r2
 80055b6:	f107 0208 	add.w	r2, r7, #8
 80055ba:	1a8a      	subs	r2, r1, r2
 80055bc:	441a      	add	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	609a      	str	r2, [r3, #8]
    return true;
 80055c2:	2301      	movs	r3, #1
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3764      	adds	r7, #100	; 0x64
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	f3af 8000 	nop.w
 80055d0:	c1e00000 	.word	0xc1e00000
 80055d4:	ffc00000 	.word	0xffc00000
 80055d8:	41dfffff 	.word	0x41dfffff

080055dc <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <ensure+0x20>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <ensure+0x24>
    {
        return NULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e086      	b.n	800570e <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <ensure+0x3c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d301      	bcc.n	8005618 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	e07a      	b.n	800570e <ensure+0x132>
    }

    if (needed > INT_MAX)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	da01      	bge.n	8005622 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	e075      	b.n	800570e <ensure+0x132>
    }

    needed += p->offset + 1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	4413      	add	r3, r2
 800562a:	3301      	adds	r3, #1
 800562c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	429a      	cmp	r2, r3
 8005636:	d805      	bhi.n	8005644 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4413      	add	r3, r2
 8005642:	e064      	b.n	800570e <ensure+0x132>
    }

    if (p->noalloc) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <ensure+0x74>
        return NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	e05e      	b.n	800570e <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d308      	bcc.n	800566a <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	db03      	blt.n	8005666 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800565e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	e004      	b.n	8005670 <ensure+0x94>
        }
        else
        {
            return NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	e051      	b.n	800570e <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d018      	beq.n	80056aa <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4610      	mov	r0, r2
 8005684:	4798      	blx	r3
 8005686:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d135      	bne.n	80056fa <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	4610      	mov	r0, r2
 8005698:	4798      	blx	r3
            p->length = 0;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

            return NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e031      	b.n	800570e <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	68b8      	ldr	r0, [r7, #8]
 80056b0:	4798      	blx	r3
 80056b2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	4610      	mov	r0, r2
 80056c4:	4798      	blx	r3
            p->length = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

            return NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e01b      	b.n	800570e <ensure+0x132>
        }
        if (newbuffer)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <ensure+0x112>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	3301      	adds	r3, #1
 80056e6:	461a      	mov	r2, r3
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f002 fbe7 	bl	8007ebc <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	4610      	mov	r0, r2
 80056f8:	4798      	blx	r3
    }
    p->length = newsize;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4413      	add	r3, r2
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8005716:	b590      	push	{r4, r7, lr}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d013      	beq.n	8005750 <update_offset+0x3a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00f      	beq.n	8005750 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	4413      	add	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689c      	ldr	r4, [r3, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7fa fd4f 	bl	80001e4 <strlen>
 8005746:	4603      	mov	r3, r0
 8005748:	18e2      	adds	r2, r4, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	609a      	str	r2, [r3, #8]
 800574e:	e000      	b.n	8005752 <update_offset+0x3c>
        return;
 8005750:	bf00      	nop
}
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}

08005758 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8005758:	b590      	push	{r4, r7, lr}
 800575a:	b093      	sub	sp, #76	; 0x4c
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800576c:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    int length = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8005778:	f7ff fdf8 	bl	800536c <get_decimal_point>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (output_buffer == NULL)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <print_number+0x34>
    {
        return false;
 8005788:	2300      	movs	r3, #0
 800578a:	e074      	b.n	8005876 <print_number+0x11e>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005798:	f7fa ff3e 	bl	8000618 <__aeabi_dmul>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	4618      	mov	r0, r3
 80057a2:	4621      	mov	r1, r4
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	f7fb f99c 	bl	8000ae8 <__aeabi_dcmpeq>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10e      	bne.n	80057d4 <print_number+0x7c>
    {
        char *nbuf = (char *) number_buffer;
 80057b6:	f107 0308 	add.w	r3, r7, #8
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	4a30      	ldr	r2, [pc, #192]	; (8005880 <print_number+0x128>)
 80057c0:	6810      	ldr	r0, [r2, #0]
 80057c2:	6018      	str	r0, [r3, #0]
 80057c4:	7912      	ldrb	r2, [r2, #4]
 80057c6:	711a      	strb	r2, [r3, #4]
        length = strlen(nbuf);
 80057c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ca:	f7fa fd0b 	bl	80001e4 <strlen>
 80057ce:	4603      	mov	r3, r0
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
 80057d2:	e00e      	b.n	80057f2 <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 80057d4:	f107 0308 	add.w	r3, r7, #8
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 80057da:	f04f 31ff 	mov.w	r1, #4294967295
 80057de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e0:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80057e4:	f001 fd98 	bl	8007318 <JNtoA>
        length = strlen(nbuf);
 80057e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ea:	f7fa fcfb 	bl	80001e4 <strlen>
 80057ee:	4603      	mov	r3, r0
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80057f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db02      	blt.n	80057fe <print_number+0xa6>
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	2b19      	cmp	r3, #25
 80057fc:	dd01      	ble.n	8005802 <print_number+0xaa>
    {
        return false;
 80057fe:	2300      	movs	r3, #0
 8005800:	e039      	b.n	8005876 <print_number+0x11e>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8005802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005804:	3301      	adds	r3, #1
 8005806:	4619      	mov	r1, r3
 8005808:	6838      	ldr	r0, [r7, #0]
 800580a:	f7ff fee7 	bl	80055dc <ensure>
 800580e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <print_number+0xc2>
    {
        return false;
 8005816:	2300      	movs	r3, #0
 8005818:	e02d      	b.n	8005876 <print_number+0x11e>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800581a:	2300      	movs	r3, #0
 800581c:	643b      	str	r3, [r7, #64]	; 0x40
 800581e:	e01a      	b.n	8005856 <print_number+0xfe>
    {
        if (number_buffer[i] == decimal_point)
 8005820:	f107 0208 	add.w	r2, r7, #8
 8005824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005826:	4413      	add	r3, r2
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800582e:	429a      	cmp	r2, r3
 8005830:	d105      	bne.n	800583e <print_number+0xe6>
        {
            output_pointer[i] = '.';
 8005832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	4413      	add	r3, r2
 8005838:	222e      	movs	r2, #46	; 0x2e
 800583a:	701a      	strb	r2, [r3, #0]
            continue;
 800583c:	e008      	b.n	8005850 <print_number+0xf8>
        }

        output_pointer[i] = number_buffer[i];
 800583e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	4413      	add	r3, r2
 8005844:	f107 0108 	add.w	r1, r7, #8
 8005848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800584a:	440a      	add	r2, r1
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	3301      	adds	r3, #1
 8005854:	643b      	str	r3, [r7, #64]	; 0x40
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	429a      	cmp	r2, r3
 800585c:	d3e0      	bcc.n	8005820 <print_number+0xc8>
    }
    output_pointer[i] = '\0';
 800585e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	4413      	add	r3, r2
 8005864:	2200      	movs	r2, #0
 8005866:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586e:	441a      	add	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	609a      	str	r2, [r3, #8]

    return true;
 8005874:	2301      	movs	r3, #1
}
 8005876:	4618      	mov	r0, r3
 8005878:	374c      	adds	r7, #76	; 0x4c
 800587a:	46bd      	mov	sp, r7
 800587c:	bd90      	pop	{r4, r7, pc}
 800587e:	bf00      	nop
 8005880:	0800884c 	.word	0x0800884c

08005884 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	e04c      	b.n	8005934 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b2f      	cmp	r3, #47	; 0x2f
 80058a4:	d90f      	bls.n	80058c6 <parse_hex4+0x42>
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4413      	add	r3, r2
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b39      	cmp	r3, #57	; 0x39
 80058b0:	d809      	bhi.n	80058c6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4413      	add	r3, r2
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	3b30      	subs	r3, #48	; 0x30
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e02d      	b.n	8005922 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4413      	add	r3, r2
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d90f      	bls.n	80058f2 <parse_hex4+0x6e>
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4413      	add	r3, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b46      	cmp	r3, #70	; 0x46
 80058dc:	d809      	bhi.n	80058f2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4413      	add	r3, r2
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	3b37      	subs	r3, #55	; 0x37
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e017      	b.n	8005922 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4413      	add	r3, r2
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b60      	cmp	r3, #96	; 0x60
 80058fc:	d90f      	bls.n	800591e <parse_hex4+0x9a>
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b66      	cmp	r3, #102	; 0x66
 8005908:	d809      	bhi.n	800591e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	3b57      	subs	r3, #87	; 0x57
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e001      	b.n	8005922 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800591e:	2300      	movs	r3, #0
 8005920:	e00c      	b.n	800593c <parse_hex4+0xb8>
        }

        if (i < 3)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d802      	bhi.n	800592e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	3301      	adds	r3, #1
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d9af      	bls.n	800589a <parse_hex4+0x16>
        }
    }

    return h;
 800593a:	68fb      	ldr	r3, [r7, #12]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b08a      	sub	sp, #40	; 0x28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b05      	cmp	r3, #5
 8005980:	f340 80b7 	ble.w	8005af2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	3302      	adds	r3, #2
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ff7b 	bl	8005884 <parse_hex4>
 800598e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8005996:	d304      	bcc.n	80059a2 <utf16_literal_to_utf8+0x5a>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800599e:	f0c0 80aa 	bcc.w	8005af6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80059a8:	d337      	bcc.n	8005a1a <utf16_literal_to_utf8+0xd2>
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80059b0:	d233      	bcs.n	8005a1a <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	3306      	adds	r3, #6
 80059b6:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80059bc:	230c      	movs	r3, #12
 80059be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	f340 8096 	ble.w	8005afa <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b5c      	cmp	r3, #92	; 0x5c
 80059d4:	f040 8093 	bne.w	8005afe <utf16_literal_to_utf8+0x1b6>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b75      	cmp	r3, #117	; 0x75
 80059e0:	f040 808d 	bne.w	8005afe <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	3302      	adds	r3, #2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff ff4b 	bl	8005884 <parse_hex4>
 80059ee:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80059f6:	f0c0 8082 	bcc.w	8005afe <utf16_literal_to_utf8+0x1b6>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8005a00:	d27d      	bcs.n	8005afe <utf16_literal_to_utf8+0x1b6>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	029a      	lsls	r2, r3, #10
 8005a06:	4b42      	ldr	r3, [pc, #264]	; (8005b10 <utf16_literal_to_utf8+0x1c8>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8005a18:	e004      	b.n	8005a24 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8005a1a:	2306      	movs	r3, #6
 8005a1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	2b7f      	cmp	r3, #127	; 0x7f
 8005a28:	d803      	bhi.n	8005a32 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a30:	e01f      	b.n	8005a72 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a38:	d206      	bcs.n	8005a48 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8005a40:	23c0      	movs	r3, #192	; 0xc0
 8005a42:	f887 3020 	strb.w	r3, [r7, #32]
 8005a46:	e014      	b.n	8005a72 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d206      	bcs.n	8005a5e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8005a50:	2303      	movs	r3, #3
 8005a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8005a56:	23e0      	movs	r3, #224	; 0xe0
 8005a58:	f887 3020 	strb.w	r3, [r7, #32]
 8005a5c:	e009      	b.n	8005a72 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005a64:	d24d      	bcs.n	8005b02 <utf16_literal_to_utf8+0x1ba>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8005a66:	2304      	movs	r3, #4
 8005a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8005a6c:	23f0      	movs	r3, #240	; 0xf0
 8005a6e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a76:	3b01      	subs	r3, #1
 8005a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a7c:	e015      	b.n	8005aaa <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6819      	ldr	r1, [r3, #0]
 8005a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a90:	440b      	add	r3, r1
 8005a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005aa0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005aaa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e5      	bne.n	8005a7e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8005ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d909      	bls.n	8005ace <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	b2d9      	uxtb	r1, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	e007      	b.n	8005ade <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ae6:	441a      	add	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8005aec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005af0:	e009      	b.n	8005b06 <utf16_literal_to_utf8+0x1be>
        goto fail;
 8005af2:	bf00      	nop
 8005af4:	e006      	b.n	8005b04 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <utf16_literal_to_utf8+0x1bc>
            goto fail;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <utf16_literal_to_utf8+0x1bc>

fail:
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <utf16_literal_to_utf8+0x1bc>
        goto fail;
 8005b02:	bf00      	nop
    return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3728      	adds	r7, #40	; 0x28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	000ffc00 	.word	0x000ffc00

08005b14 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	3301      	adds	r3, #1
 8005b28:	4413      	add	r3, r2
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4413      	add	r3, r2
 8005b38:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b22      	cmp	r3, #34	; 0x22
 8005b50:	f040 816c 	bne.w	8005e2c <parse_string+0x318>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8005b5c:	e018      	b.n	8005b90 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b5c      	cmp	r3, #92	; 0x5c
 8005b64:	d111      	bne.n	8005b8a <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	f080 8159 	bcs.w	8005e30 <parse_string+0x31c>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3301      	adds	r3, #1
 8005b82:	61bb      	str	r3, [r7, #24]
                input_end++;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	3301      	adds	r3, #1
 8005b88:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d203      	bcs.n	8005baa <parse_string+0x96>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b22      	cmp	r3, #34	; 0x22
 8005ba8:	d1d9      	bne.n	8005b5e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	f080 813b 	bcs.w	8005e34 <parse_string+0x320>
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b22      	cmp	r3, #34	; 0x22
 8005bc4:	f040 8136 	bne.w	8005e34 <parse_string+0x320>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	3201      	adds	r2, #1
 8005be6:	4610      	mov	r0, r2
 8005be8:	4798      	blx	r3
 8005bea:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8122 	beq.w	8005e38 <parse_string+0x324>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8005bf8:	e0fc      	b.n	8005df4 <parse_string+0x2e0>
    {
        if (*input_pointer != '\\')
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b5c      	cmp	r3, #92	; 0x5c
 8005c00:	d008      	beq.n	8005c14 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	1c53      	adds	r3, r2, #1
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1c59      	adds	r1, r3, #1
 8005c0c:	60f9      	str	r1, [r7, #12]
 8005c0e:	7812      	ldrb	r2, [r2, #0]
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e0ef      	b.n	8005df4 <parse_string+0x2e0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8005c14:	2302      	movs	r3, #2
 8005c16:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f340 810c 	ble.w	8005e3c <parse_string+0x328>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	3301      	adds	r3, #1
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	3b22      	subs	r3, #34	; 0x22
 8005c2c:	2b53      	cmp	r3, #83	; 0x53
 8005c2e:	f200 8107 	bhi.w	8005e40 <parse_string+0x32c>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <parse_string+0x124>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005dc5 	.word	0x08005dc5
 8005c3c:	08005e41 	.word	0x08005e41
 8005c40:	08005e41 	.word	0x08005e41
 8005c44:	08005e41 	.word	0x08005e41
 8005c48:	08005e41 	.word	0x08005e41
 8005c4c:	08005e41 	.word	0x08005e41
 8005c50:	08005e41 	.word	0x08005e41
 8005c54:	08005e41 	.word	0x08005e41
 8005c58:	08005e41 	.word	0x08005e41
 8005c5c:	08005e41 	.word	0x08005e41
 8005c60:	08005e41 	.word	0x08005e41
 8005c64:	08005e41 	.word	0x08005e41
 8005c68:	08005e41 	.word	0x08005e41
 8005c6c:	08005dc5 	.word	0x08005dc5
 8005c70:	08005e41 	.word	0x08005e41
 8005c74:	08005e41 	.word	0x08005e41
 8005c78:	08005e41 	.word	0x08005e41
 8005c7c:	08005e41 	.word	0x08005e41
 8005c80:	08005e41 	.word	0x08005e41
 8005c84:	08005e41 	.word	0x08005e41
 8005c88:	08005e41 	.word	0x08005e41
 8005c8c:	08005e41 	.word	0x08005e41
 8005c90:	08005e41 	.word	0x08005e41
 8005c94:	08005e41 	.word	0x08005e41
 8005c98:	08005e41 	.word	0x08005e41
 8005c9c:	08005e41 	.word	0x08005e41
 8005ca0:	08005e41 	.word	0x08005e41
 8005ca4:	08005e41 	.word	0x08005e41
 8005ca8:	08005e41 	.word	0x08005e41
 8005cac:	08005e41 	.word	0x08005e41
 8005cb0:	08005e41 	.word	0x08005e41
 8005cb4:	08005e41 	.word	0x08005e41
 8005cb8:	08005e41 	.word	0x08005e41
 8005cbc:	08005e41 	.word	0x08005e41
 8005cc0:	08005e41 	.word	0x08005e41
 8005cc4:	08005e41 	.word	0x08005e41
 8005cc8:	08005e41 	.word	0x08005e41
 8005ccc:	08005e41 	.word	0x08005e41
 8005cd0:	08005e41 	.word	0x08005e41
 8005cd4:	08005e41 	.word	0x08005e41
 8005cd8:	08005e41 	.word	0x08005e41
 8005cdc:	08005e41 	.word	0x08005e41
 8005ce0:	08005e41 	.word	0x08005e41
 8005ce4:	08005e41 	.word	0x08005e41
 8005ce8:	08005e41 	.word	0x08005e41
 8005cec:	08005e41 	.word	0x08005e41
 8005cf0:	08005e41 	.word	0x08005e41
 8005cf4:	08005e41 	.word	0x08005e41
 8005cf8:	08005e41 	.word	0x08005e41
 8005cfc:	08005e41 	.word	0x08005e41
 8005d00:	08005e41 	.word	0x08005e41
 8005d04:	08005e41 	.word	0x08005e41
 8005d08:	08005e41 	.word	0x08005e41
 8005d0c:	08005e41 	.word	0x08005e41
 8005d10:	08005e41 	.word	0x08005e41
 8005d14:	08005e41 	.word	0x08005e41
 8005d18:	08005e41 	.word	0x08005e41
 8005d1c:	08005e41 	.word	0x08005e41
 8005d20:	08005dc5 	.word	0x08005dc5
 8005d24:	08005e41 	.word	0x08005e41
 8005d28:	08005e41 	.word	0x08005e41
 8005d2c:	08005e41 	.word	0x08005e41
 8005d30:	08005e41 	.word	0x08005e41
 8005d34:	08005e41 	.word	0x08005e41
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005e41 	.word	0x08005e41
 8005d40:	08005e41 	.word	0x08005e41
 8005d44:	08005e41 	.word	0x08005e41
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005e41 	.word	0x08005e41
 8005d50:	08005e41 	.word	0x08005e41
 8005d54:	08005e41 	.word	0x08005e41
 8005d58:	08005e41 	.word	0x08005e41
 8005d5c:	08005e41 	.word	0x08005e41
 8005d60:	08005e41 	.word	0x08005e41
 8005d64:	08005e41 	.word	0x08005e41
 8005d68:	08005da1 	.word	0x08005da1
 8005d6c:	08005e41 	.word	0x08005e41
 8005d70:	08005e41 	.word	0x08005e41
 8005d74:	08005e41 	.word	0x08005e41
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005e41 	.word	0x08005e41
 8005d80:	08005db9 	.word	0x08005db9
 8005d84:	08005dd3 	.word	0x08005dd3
            {
                case 'b':
                    *output_pointer++ = '\b';
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	60fa      	str	r2, [r7, #12]
 8005d8e:	2208      	movs	r2, #8
 8005d90:	701a      	strb	r2, [r3, #0]
                    break;
 8005d92:	e02b      	b.n	8005dec <parse_string+0x2d8>
                case 'f':
                    *output_pointer++ = '\f';
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	60fa      	str	r2, [r7, #12]
 8005d9a:	220c      	movs	r2, #12
 8005d9c:	701a      	strb	r2, [r3, #0]
                    break;
 8005d9e:	e025      	b.n	8005dec <parse_string+0x2d8>
                case 'n':
                    *output_pointer++ = '\n';
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	60fa      	str	r2, [r7, #12]
 8005da6:	220a      	movs	r2, #10
 8005da8:	701a      	strb	r2, [r3, #0]
                    break;
 8005daa:	e01f      	b.n	8005dec <parse_string+0x2d8>
                case 'r':
                    *output_pointer++ = '\r';
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	60fa      	str	r2, [r7, #12]
 8005db2:	220d      	movs	r2, #13
 8005db4:	701a      	strb	r2, [r3, #0]
                    break;
 8005db6:	e019      	b.n	8005dec <parse_string+0x2d8>
                case 't':
                    *output_pointer++ = '\t';
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	60fa      	str	r2, [r7, #12]
 8005dbe:	2209      	movs	r2, #9
 8005dc0:	701a      	strb	r2, [r3, #0]
                    break;
 8005dc2:	e013      	b.n	8005dec <parse_string+0x2d8>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	60fa      	str	r2, [r7, #12]
 8005dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dcc:	7852      	ldrb	r2, [r2, #1]
 8005dce:	701a      	strb	r2, [r3, #0]
                    break;
 8005dd0:	e00c      	b.n	8005dec <parse_string+0x2d8>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6a39      	ldr	r1, [r7, #32]
 8005dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ddc:	f7ff fdb4 	bl	8005948 <utf16_literal_to_utf8>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02c      	beq.n	8005e44 <parse_string+0x330>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 8005dea:	bf00      	nop

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	4413      	add	r3, r2
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	f4ff aefe 	bcc.w	8005bfa <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2210      	movs	r2, #16
 8005e08:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	609a      	str	r2, [r3, #8]

    return true;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e01e      	b.n	8005e6a <parse_string+0x356>
        goto fail;
 8005e2c:	bf00      	nop
 8005e2e:	e00a      	b.n	8005e46 <parse_string+0x332>
                    goto fail;
 8005e30:	bf00      	nop
 8005e32:	e008      	b.n	8005e46 <parse_string+0x332>

fail:
 8005e34:	bf00      	nop
 8005e36:	e006      	b.n	8005e46 <parse_string+0x332>
            goto fail; /* allocation failure */
 8005e38:	bf00      	nop
 8005e3a:	e004      	b.n	8005e46 <parse_string+0x332>
                goto fail;
 8005e3c:	bf00      	nop
 8005e3e:	e002      	b.n	8005e46 <parse_string+0x332>
                    goto fail;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <parse_string+0x332>
                        goto fail;
 8005e44:	bf00      	nop
    if (output != NULL)
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <parse_string+0x340>
    {
        input_buffer->hooks.deallocate(output);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	69f8      	ldr	r0, [r7, #28]
 8005e52:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <parse_string+0x354>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	461a      	mov	r2, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	609a      	str	r2, [r3, #8]
    }

    return false;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	80fb      	strh	r3, [r7, #6]
    int i;
    for (i=0; i<4; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e01c      	b.n	8005ec0 <htoa16+0x4c>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	0b1b      	lsrs	r3, r3, #12
 8005e8a:	817b      	strh	r3, [r7, #10]
        n = n << 4;
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	80fb      	strh	r3, [r7, #6]
        if (nibble >= 10)
 8005e92:	897b      	ldrh	r3, [r7, #10]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d908      	bls.n	8005eaa <htoa16+0x36>
            *p++ = 'A' + (nibble-10);
 8005e98:	897b      	ldrh	r3, [r7, #10]
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	3237      	adds	r2, #55	; 0x37
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e007      	b.n	8005eba <htoa16+0x46>
        else
            *p++ = '0' + nibble;
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	1c59      	adds	r1, r3, #1
 8005eb2:	6039      	str	r1, [r7, #0]
 8005eb4:	3230      	adds	r2, #48	; 0x30
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	dddf      	ble.n	8005e86 <htoa16+0x12>
    }
    *p = '\0';
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <print_string_ptr+0x28>
    {
        return false;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e0dc      	b.n	80060ba <print_string_ptr+0x1e2>
    }

    /* empty string */
    if (input == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d111      	bne.n	8005f2a <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8005f06:	2103      	movs	r1, #3
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f7ff fb67 	bl	80055dc <ensure>
 8005f0e:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <print_string_ptr+0x42>
        {
            return false;
 8005f16:	2300      	movs	r3, #0
 8005f18:	e0cf      	b.n	80060ba <print_string_ptr+0x1e2>
        }
        strcpy((char*)output, "\"\"");
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4a69      	ldr	r2, [pc, #420]	; (80060c4 <print_string_ptr+0x1ec>)
 8005f1e:	8811      	ldrh	r1, [r2, #0]
 8005f20:	7892      	ldrb	r2, [r2, #2]
 8005f22:	8019      	strh	r1, [r3, #0]
 8005f24:	709a      	strb	r2, [r3, #2]

        return true;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e0c7      	b.n	80060ba <print_string_ptr+0x1e2>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e01c      	b.n	8005f6a <print_string_ptr+0x92>
    {
        switch (*input_pointer)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b0d      	cmp	r3, #13
 8005f36:	dc05      	bgt.n	8005f44 <print_string_ptr+0x6c>
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	da07      	bge.n	8005f4c <print_string_ptr+0x74>
 8005f3c:	3b08      	subs	r3, #8
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d808      	bhi.n	8005f54 <print_string_ptr+0x7c>
 8005f42:	e003      	b.n	8005f4c <print_string_ptr+0x74>
 8005f44:	2b22      	cmp	r3, #34	; 0x22
 8005f46:	d001      	beq.n	8005f4c <print_string_ptr+0x74>
 8005f48:	2b5c      	cmp	r3, #92	; 0x5c
 8005f4a:	d103      	bne.n	8005f54 <print_string_ptr+0x7c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
                break;
 8005f52:	e007      	b.n	8005f64 <print_string_ptr+0x8c>
            default:
                if (*input_pointer < 32)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b1f      	cmp	r3, #31
 8005f5a:	d802      	bhi.n	8005f62 <print_string_ptr+0x8a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3305      	adds	r3, #5
 8005f60:	617b      	str	r3, [r7, #20]
                }
                break;
 8005f62:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	3301      	adds	r3, #1
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1de      	bne.n	8005f30 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	461a      	mov	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3303      	adds	r3, #3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6838      	ldr	r0, [r7, #0]
 8005f88:	f7ff fb28 	bl	80055dc <ensure>
 8005f8c:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <print_string_ptr+0xc0>
    {
        return false;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e090      	b.n	80060ba <print_string_ptr+0x1e2>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d117      	bne.n	8005fce <print_string_ptr+0xf6>
    {
        output[0] = '\"';
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2222      	movs	r2, #34	; 0x22
 8005fa2:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 ff85 	bl	8007ebc <memcpy>
        output[output_length + 1] = '\"';
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4413      	add	r3, r2
 8005fba:	2222      	movs	r2, #34	; 0x22
 8005fbc:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]

        return true;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e075      	b.n	80060ba <print_string_ptr+0x1e2>
    }

    output[0] = '\"';
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2222      	movs	r2, #34	; 0x22
 8005fd2:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	e05b      	b.n	8006098 <print_string_ptr+0x1c0>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b1f      	cmp	r3, #31
 8005fe6:	d90c      	bls.n	8006002 <print_string_ptr+0x12a>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b22      	cmp	r3, #34	; 0x22
 8005fee:	d008      	beq.n	8006002 <print_string_ptr+0x12a>
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ff6:	d004      	beq.n	8006002 <print_string_ptr+0x12a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e044      	b.n	800608c <print_string_ptr+0x1b4>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	61ba      	str	r2, [r7, #24]
 8006008:	225c      	movs	r2, #92	; 0x5c
 800600a:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d01b      	beq.n	800604c <print_string_ptr+0x174>
 8006014:	2b0c      	cmp	r3, #12
 8006016:	dc06      	bgt.n	8006026 <print_string_ptr+0x14e>
 8006018:	2b09      	cmp	r3, #9
 800601a:	d023      	beq.n	8006064 <print_string_ptr+0x18c>
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d019      	beq.n	8006054 <print_string_ptr+0x17c>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d00f      	beq.n	8006044 <print_string_ptr+0x16c>
 8006024:	e022      	b.n	800606c <print_string_ptr+0x194>
 8006026:	2b22      	cmp	r3, #34	; 0x22
 8006028:	d008      	beq.n	800603c <print_string_ptr+0x164>
 800602a:	2b5c      	cmp	r3, #92	; 0x5c
 800602c:	d002      	beq.n	8006034 <print_string_ptr+0x15c>
 800602e:	2b0d      	cmp	r3, #13
 8006030:	d014      	beq.n	800605c <print_string_ptr+0x184>
 8006032:	e01b      	b.n	800606c <print_string_ptr+0x194>
            {
                case '\\':
                    *output_pointer = '\\';
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	225c      	movs	r2, #92	; 0x5c
 8006038:	701a      	strb	r2, [r3, #0]
                    break;
 800603a:	e027      	b.n	800608c <print_string_ptr+0x1b4>
                case '\"':
                    *output_pointer = '\"';
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2222      	movs	r2, #34	; 0x22
 8006040:	701a      	strb	r2, [r3, #0]
                    break;
 8006042:	e023      	b.n	800608c <print_string_ptr+0x1b4>
                case '\b':
                    *output_pointer = 'b';
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2262      	movs	r2, #98	; 0x62
 8006048:	701a      	strb	r2, [r3, #0]
                    break;
 800604a:	e01f      	b.n	800608c <print_string_ptr+0x1b4>
                case '\f':
                    *output_pointer = 'f';
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2266      	movs	r2, #102	; 0x66
 8006050:	701a      	strb	r2, [r3, #0]
                    break;
 8006052:	e01b      	b.n	800608c <print_string_ptr+0x1b4>
                case '\n':
                    *output_pointer = 'n';
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	226e      	movs	r2, #110	; 0x6e
 8006058:	701a      	strb	r2, [r3, #0]
                    break;
 800605a:	e017      	b.n	800608c <print_string_ptr+0x1b4>
                case '\r':
                    *output_pointer = 'r';
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2272      	movs	r2, #114	; 0x72
 8006060:	701a      	strb	r2, [r3, #0]
                    break;
 8006062:	e013      	b.n	800608c <print_string_ptr+0x1b4>
                case '\t':
                    *output_pointer = 't';
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2274      	movs	r2, #116	; 0x74
 8006068:	701a      	strb	r2, [r3, #0]
                    break;
 800606a:	e00f      	b.n	800608c <print_string_ptr+0x1b4>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	61ba      	str	r2, [r7, #24]
 8006072:	2275      	movs	r2, #117	; 0x75
 8006074:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fef8 	bl	8005e74 <htoa16>
                    output_pointer += 4;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	3304      	adds	r3, #4
 8006088:	61bb      	str	r3, [r7, #24]
                    break;
 800608a:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	3301      	adds	r3, #1
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d19f      	bne.n	8005fe0 <print_string_ptr+0x108>
            }
        }
    }
    output[output_length + 1] = '\"';
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	2222      	movs	r2, #34	; 0x22
 80060aa:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3302      	adds	r3, #2
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]

    return true;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	08008854 	.word	0x08008854

080060c8 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fefd 	bl	8005ed8 <print_string_ptr>
 80060de:	4603      	mov	r3, r0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <buffer_skip_whitespace+0x16>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <buffer_skip_whitespace+0x24>
    {
        return NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	e021      	b.n	8006146 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <buffer_skip_whitespace+0x46>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d207      	bcs.n	800612e <buffer_skip_whitespace+0x46>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	4413      	add	r3, r2
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b20      	cmp	r3, #32
 800612c:	d9e9      	bls.n	8006102 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d104      	bne.n	8006144 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	1e5a      	subs	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8006144:	687b      	ldr	r3, [r7, #4]
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <skip_utf8_bom+0x1e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <skip_utf8_bom+0x1e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <skip_utf8_bom+0x22>
    {
        return NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	e01c      	b.n	80061b0 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d018      	beq.n	80061ae <skip_utf8_bom+0x5a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d211      	bcs.n	80061ae <skip_utf8_bom+0x5a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	4413      	add	r3, r2
 8006194:	2203      	movs	r2, #3
 8006196:	4908      	ldr	r1, [pc, #32]	; (80061b8 <skip_utf8_bom+0x64>)
 8006198:	4618      	mov	r0, r3
 800619a:	f001 ff80 	bl	800809e <strncmp>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	1cda      	adds	r2, r3, #3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80061ae:	687b      	ldr	r3, [r7, #4]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	08008858 	.word	0x08008858

080061bc <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08e      	sub	sp, #56	; 0x38
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80061c8:	f107 0318 	add.w	r3, r7, #24
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
 80061d8:	615a      	str	r2, [r3, #20]
 80061da:	619a      	str	r2, [r3, #24]
    J *item = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <JParseWithOpts+0x12c>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80061e6:	4b40      	ldr	r3, [pc, #256]	; (80062e8 <JParseWithOpts+0x12c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d043      	beq.n	800627a <JParseWithOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
    buffer.length = strlen((const char*)value) + sizeof("");
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7f9 fff4 	bl	80001e4 <strlen>
 80061fc:	4603      	mov	r3, r0
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8006206:	4a39      	ldr	r2, [pc, #228]	; (80062ec <JParseWithOpts+0x130>)
 8006208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800620c:	ca07      	ldmia	r2, {r0, r1, r2}
 800620e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = JNew_Item(&global_hooks);
 8006212:	4836      	ldr	r0, [pc, #216]	; (80062ec <JParseWithOpts+0x130>)
 8006214:	f7ff f84c 	bl	80052b0 <JNew_Item>
 8006218:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800621a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621c:	2b00      	cmp	r3, #0
 800621e:	d02e      	beq.n	800627e <JParseWithOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8006220:	f107 0318 	add.w	r3, r7, #24
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff ff95 	bl	8006154 <skip_utf8_bom>
 800622a:	4603      	mov	r3, r0
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff5b 	bl	80060e8 <buffer_skip_whitespace>
 8006232:	4603      	mov	r3, r0
 8006234:	4619      	mov	r1, r3
 8006236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006238:	f000 f8fc 	bl	8006434 <parse_value>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01f      	beq.n	8006282 <JParseWithOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <JParseWithOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8006248:	f107 0318 	add.w	r3, r7, #24
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff4b 	bl	80060e8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	429a      	cmp	r2, r3
 8006258:	d215      	bcs.n	8006286 <JParseWithOpts+0xca>
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <JParseWithOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <JParseWithOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	441a      	add	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	601a      	str	r2, [r3, #0]
    }

    return item;
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	e031      	b.n	80062de <JParseWithOpts+0x122>
        goto fail;
 800627a:	bf00      	nop
 800627c:	e004      	b.n	8006288 <JParseWithOpts+0xcc>
        goto fail;
 800627e:	bf00      	nop
 8006280:	e002      	b.n	8006288 <JParseWithOpts+0xcc>
        goto fail;
 8006282:	bf00      	nop
 8006284:	e000      	b.n	8006288 <JParseWithOpts+0xcc>

fail:
 8006286:	bf00      	nop
    if (item != NULL)
 8006288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <JParseWithOpts+0xd8>
    {
        JDelete(item);
 800628e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006290:	f7ff f824 	bl	80052dc <JDelete>
    }

    if (value != NULL)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d020      	beq.n	80062dc <JParseWithOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80062a2:	6a3a      	ldr	r2, [r7, #32]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d202      	bcs.n	80062b0 <JParseWithOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e005      	b.n	80062bc <JParseWithOpts+0x100>
        }
        else if (buffer.length > 0)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <JParseWithOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <JParseWithOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	441a      	add	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <JParseWithOpts+0x12c>)
 80062ce:	461a      	mov	r2, r3
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062d8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3738      	adds	r7, #56	; 0x38
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	2000047c 	.word	0x2000047c
 80062ec:	20000058 	.word	0x20000058

080062f0 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2100      	movs	r1, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ff5d 	bl	80061bc <JParseWithOpts>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format, const internal_hooks * const hooks)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800631c:	f107 0310 	add.w	r3, r7, #16
 8006320:	2224      	movs	r2, #36	; 0x24
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fded 	bl	8007f04 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a38      	ldr	r2, [pc, #224]	; (8006410 <print+0x104>)
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	4610      	mov	r0, r2
 8006334:	4798      	blx	r3
 8006336:	4603      	mov	r3, r0
 8006338:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800633a:	4b35      	ldr	r3, [pc, #212]	; (8006410 <print+0x104>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800634a:	ca07      	ldmia	r2, {r0, r1, r2}
 800634c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d040      	beq.n	80063d8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8006356:	f107 0310 	add.w	r3, r7, #16
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f955 	bl	800660c <print_value>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d039      	beq.n	80063dc <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8006368:	f107 0310 	add.w	r3, r7, #16
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f9d2 	bl	8005716 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00d      	beq.n	8006396 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	6938      	ldr	r0, [r7, #16]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	3201      	adds	r2, #1
 8006384:	4611      	mov	r1, r2
 8006386:	4798      	blx	r3
 8006388:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	2b00      	cmp	r3, #0
 800638e:	d027      	beq.n	80063e0 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e01e      	b.n	80063d4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	3201      	adds	r2, #1
 800639e:	4610      	mov	r0, r2
 80063a0:	4798      	blx	r3
 80063a2:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80063a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01c      	beq.n	80063e4 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80063aa:	6939      	ldr	r1, [r7, #16]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4293      	cmp	r3, r2
 80063b4:	bf28      	it	cs
 80063b6:	4613      	movcs	r3, r2
 80063b8:	461a      	mov	r2, r3
 80063ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80063bc:	f001 fd7e 	bl	8007ebc <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c4:	4413      	add	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
    }

    return printed;
 80063d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d6:	e016      	b.n	8006406 <print+0xfa>
        goto fail;
 80063d8:	bf00      	nop
 80063da:	e004      	b.n	80063e6 <print+0xda>
        goto fail;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <print+0xda>
            goto fail;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <print+0xda>
            goto fail;
 80063e4:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4610      	mov	r0, r2
 80063f4:	4798      	blx	r3
    }

    if (printed != NULL)
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <print+0xf8>
    {
        hooks->deallocate(printed);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006402:	4798      	blx	r3
    }

    return NULL;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3738      	adds	r7, #56	; 0x38
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	08008b1c 	.word	0x08008b1c

08006414 <JPrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 800641c:	4a04      	ldr	r2, [pc, #16]	; (8006430 <JPrintUnformatted+0x1c>)
 800641e:	2100      	movs	r1, #0
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff ff73 	bl	800630c <print>
 8006426:	4603      	mov	r3, r0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20000058 	.word	0x20000058

08006434 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <parse_value+0x18>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <parse_value+0x1c>
    {
        return false; /* no input */
 800644c:	2300      	movs	r3, #0
 800644e:	e0d2      	b.n	80065f6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01d      	beq.n	8006492 <parse_value+0x5e>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	1d1a      	adds	r2, r3, #4
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d816      	bhi.n	8006492 <parse_value+0x5e>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4413      	add	r3, r2
 800646e:	2204      	movs	r2, #4
 8006470:	4963      	ldr	r1, [pc, #396]	; (8006600 <parse_value+0x1cc>)
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fe13 	bl	800809e <strncmp>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <parse_value+0x5e>
    {
        item->type = JNULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	1d1a      	adds	r2, r3, #4
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	609a      	str	r2, [r3, #8]
        return true;
 800648e:	2301      	movs	r3, #1
 8006490:	e0b1      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01d      	beq.n	80064d4 <parse_value+0xa0>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	1d5a      	adds	r2, r3, #5
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d816      	bhi.n	80064d4 <parse_value+0xa0>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4413      	add	r3, r2
 80064b0:	2205      	movs	r2, #5
 80064b2:	4954      	ldr	r1, [pc, #336]	; (8006604 <parse_value+0x1d0>)
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fdf2 	bl	800809e <strncmp>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <parse_value+0xa0>
    {
        item->type = JFalse;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	1d5a      	adds	r2, r3, #5
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	609a      	str	r2, [r3, #8]
        return true;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e090      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d020      	beq.n	800651c <parse_value+0xe8>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d819      	bhi.n	800651c <parse_value+0xe8>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4413      	add	r3, r2
 80064f2:	2204      	movs	r2, #4
 80064f4:	4944      	ldr	r1, [pc, #272]	; (8006608 <parse_value+0x1d4>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fdd1 	bl	800809e <strncmp>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10c      	bne.n	800651c <parse_value+0xe8>
    {
        item->type = JTrue;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	1d1a      	adds	r2, r3, #4
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	609a      	str	r2, [r3, #8]
        return true;
 8006518:	2301      	movs	r3, #1
 800651a:	e06c      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <parse_value+0x116>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	429a      	cmp	r2, r3
 800652c:	d20d      	bcs.n	800654a <parse_value+0x116>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b22      	cmp	r3, #34	; 0x22
 800653c:	d105      	bne.n	800654a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fae7 	bl	8005b14 <parse_string>
 8006546:	4603      	mov	r3, r0
 8006548:	e055      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d023      	beq.n	8006598 <parse_value+0x164>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d21d      	bcs.n	8006598 <parse_value+0x164>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4413      	add	r3, r2
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b2d      	cmp	r3, #45	; 0x2d
 800656a:	d00f      	beq.n	800658c <parse_value+0x158>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4413      	add	r3, r2
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b2f      	cmp	r3, #47	; 0x2f
 800657a:	d90d      	bls.n	8006598 <parse_value+0x164>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4413      	add	r3, r2
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b39      	cmp	r3, #57	; 0x39
 800658a:	d805      	bhi.n	8006598 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fe fef6 	bl	8005380 <parse_number>
 8006594:	4603      	mov	r3, r0
 8006596:	e02e      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d013      	beq.n	80065c6 <parse_value+0x192>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d20d      	bcs.n	80065c6 <parse_value+0x192>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	4413      	add	r3, r2
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b5b      	cmp	r3, #91	; 0x5b
 80065b8:	d105      	bne.n	80065c6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f8cb 	bl	8006758 <parse_array>
 80065c2:	4603      	mov	r3, r0
 80065c4:	e017      	b.n	80065f6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d013      	beq.n	80065f4 <parse_value+0x1c0>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d20d      	bcs.n	80065f4 <parse_value+0x1c0>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4413      	add	r3, r2
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b7b      	cmp	r3, #123	; 0x7b
 80065e6:	d105      	bne.n	80065f4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9f8 	bl	80069e0 <parse_object>
 80065f0:	4603      	mov	r3, r0
 80065f2:	e000      	b.n	80065f6 <parse_value+0x1c2>
    }

    return false;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	0800884c 	.word	0x0800884c
 8006604:	0800885c 	.word	0x0800885c
 8006608:	08008864 	.word	0x08008864

0800660c <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <print_value+0x1a>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <print_value+0x1e>
    {
        return false;
 8006626:	2300      	movs	r3, #0
 8006628:	e08b      	b.n	8006742 <print_value+0x136>
    }

    switch ((item->type) & 0xFF)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b08      	cmp	r3, #8
 8006632:	d04a      	beq.n	80066ca <print_value+0xbe>
 8006634:	2b08      	cmp	r3, #8
 8006636:	dc06      	bgt.n	8006646 <print_value+0x3a>
 8006638:	2b02      	cmp	r3, #2
 800663a:	d034      	beq.n	80066a6 <print_value+0x9a>
 800663c:	2b04      	cmp	r3, #4
 800663e:	d00e      	beq.n	800665e <print_value+0x52>
 8006640:	2b01      	cmp	r3, #1
 8006642:	d01e      	beq.n	8006682 <print_value+0x76>
 8006644:	e07c      	b.n	8006740 <print_value+0x134>
 8006646:	2b20      	cmp	r3, #32
 8006648:	d06e      	beq.n	8006728 <print_value+0x11c>
 800664a:	2b20      	cmp	r3, #32
 800664c:	dc02      	bgt.n	8006654 <print_value+0x48>
 800664e:	2b10      	cmp	r3, #16
 8006650:	d064      	beq.n	800671c <print_value+0x110>
 8006652:	e075      	b.n	8006740 <print_value+0x134>
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d06d      	beq.n	8006734 <print_value+0x128>
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d03c      	beq.n	80066d6 <print_value+0xca>
 800665c:	e070      	b.n	8006740 <print_value+0x134>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 800665e:	2105      	movs	r1, #5
 8006660:	6838      	ldr	r0, [r7, #0]
 8006662:	f7fe ffbb 	bl	80055dc <ensure>
 8006666:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <print_value+0x66>
            {
                return false;
 800666e:	2300      	movs	r3, #0
 8006670:	e067      	b.n	8006742 <print_value+0x136>
            }
            strcpy((char*)output, "null");
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a35      	ldr	r2, [pc, #212]	; (800674c <print_value+0x140>)
 8006676:	6810      	ldr	r0, [r2, #0]
 8006678:	6018      	str	r0, [r3, #0]
 800667a:	7912      	ldrb	r2, [r2, #4]
 800667c:	711a      	strb	r2, [r3, #4]
            return true;
 800667e:	2301      	movs	r3, #1
 8006680:	e05f      	b.n	8006742 <print_value+0x136>

        case JFalse:
            output = ensure(output_buffer, 6);
 8006682:	2106      	movs	r1, #6
 8006684:	6838      	ldr	r0, [r7, #0]
 8006686:	f7fe ffa9 	bl	80055dc <ensure>
 800668a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <print_value+0x8a>
            {
                return false;
 8006692:	2300      	movs	r3, #0
 8006694:	e055      	b.n	8006742 <print_value+0x136>
            }
            strcpy((char*)output, "false");
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <print_value+0x144>)
 800669a:	6810      	ldr	r0, [r2, #0]
 800669c:	6018      	str	r0, [r3, #0]
 800669e:	8892      	ldrh	r2, [r2, #4]
 80066a0:	809a      	strh	r2, [r3, #4]
            return true;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e04d      	b.n	8006742 <print_value+0x136>

        case JTrue:
            output = ensure(output_buffer, 5);
 80066a6:	2105      	movs	r1, #5
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7fe ff97 	bl	80055dc <ensure>
 80066ae:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <print_value+0xae>
            {
                return false;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e043      	b.n	8006742 <print_value+0x136>
            }
            strcpy((char*)output, "true");
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a25      	ldr	r2, [pc, #148]	; (8006754 <print_value+0x148>)
 80066be:	6810      	ldr	r0, [r2, #0]
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	7912      	ldrb	r2, [r2, #4]
 80066c4:	711a      	strb	r2, [r3, #4]
            return true;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e03b      	b.n	8006742 <print_value+0x136>

        case JNumber:
            return print_number(item, output_buffer);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff f843 	bl	8005758 <print_number>
 80066d2:	4603      	mov	r3, r0
 80066d4:	e035      	b.n	8006742 <print_value+0x136>

        case JRaw:
        {
            size_t raw_length = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <print_value+0xda>
            {
                return false;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e02d      	b.n	8006742 <print_value+0x136>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7f9 fd7a 	bl	80001e4 <strlen>
 80066f0:	4603      	mov	r3, r0
 80066f2:	3301      	adds	r3, #1
 80066f4:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	f7fe ff6f 	bl	80055dc <ensure>
 80066fe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <print_value+0xfe>
            {
                return false;
 8006706:	2300      	movs	r3, #0
 8006708:	e01b      	b.n	8006742 <print_value+0x136>
            }
            memcpy(output, item->valuestring, raw_length);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	4619      	mov	r1, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f001 fbd2 	bl	8007ebc <memcpy>
            return true;
 8006718:	2301      	movs	r3, #1
 800671a:	e012      	b.n	8006742 <print_value+0x136>
        }

        case JString:
            return print_string(item, output_buffer);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff fcd2 	bl	80060c8 <print_string>
 8006724:	4603      	mov	r3, r0
 8006726:	e00c      	b.n	8006742 <print_value+0x136>

        case JArray:
            return print_array(item, output_buffer);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f8d2 	bl	80068d4 <print_array>
 8006730:	4603      	mov	r3, r0
 8006732:	e006      	b.n	8006742 <print_value+0x136>

        case JObject:
            return print_object(item, output_buffer);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa47 	bl	8006bca <print_object>
 800673c:	4603      	mov	r3, r0
 800673e:	e000      	b.n	8006742 <print_value+0x136>

        default:
            return false;
 8006740:	2300      	movs	r3, #0
    }
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	0800884c 	.word	0x0800884c
 8006750:	0800885c 	.word	0x0800885c
 8006754:	08008864 	.word	0x08008864

08006758 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006772:	d301      	bcc.n	8006778 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8006774:	2300      	movs	r3, #0
 8006776:	e0a9      	b.n	80068cc <parse_array+0x174>
    }
    input_buffer->depth++;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b5b      	cmp	r3, #91	; 0x5b
 8006790:	f040 808e 	bne.w	80068b0 <parse_array+0x158>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	f7ff fca2 	bl	80060e8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <parse_array+0x6e>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d207      	bcs.n	80067c6 <parse_array+0x6e>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b5d      	cmp	r3, #93	; 0x5d
 80067c4:	d061      	beq.n	800688a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <parse_array+0x80>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d305      	bcc.n	80067e4 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	1e5a      	subs	r2, r3, #1
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	609a      	str	r2, [r3, #8]
        goto fail;
 80067e2:	e06c      	b.n	80068be <parse_array+0x166>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	3310      	adds	r3, #16
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fd5c 	bl	80052b0 <JNew_Item>
 80067f8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d059      	beq.n	80068b4 <parse_array+0x15c>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e007      	b.n	8006820 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800682a:	6838      	ldr	r0, [r7, #0]
 800682c:	f7ff fc5c 	bl	80060e8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6938      	ldr	r0, [r7, #16]
 8006834:	f7ff fdfe 	bl	8006434 <parse_value>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d03c      	beq.n	80068b8 <parse_array+0x160>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800683e:	6838      	ldr	r0, [r7, #0]
 8006840:	f7ff fc52 	bl	80060e8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <parse_array+0x10e>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d207      	bcs.n	8006866 <parse_array+0x10e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	4413      	add	r3, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b2c      	cmp	r3, #44	; 0x2c
 8006864:	d0c3      	beq.n	80067ee <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d027      	beq.n	80068bc <parse_array+0x164>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d221      	bcs.n	80068bc <parse_array+0x164>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4413      	add	r3, r2
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b5d      	cmp	r3, #93	; 0x5d
 8006886:	d119      	bne.n	80068bc <parse_array+0x164>
    {
        goto fail; /* expected end of array */
    }

success:
 8006888:	e000      	b.n	800688c <parse_array+0x134>
        goto success;
 800688a:	bf00      	nop
    input_buffer->depth--;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	1e5a      	subs	r2, r3, #1
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	60da      	str	r2, [r3, #12]
    item->child = head;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	609a      	str	r2, [r3, #8]

    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e00d      	b.n	80068cc <parse_array+0x174>
        goto fail;
 80068b0:	bf00      	nop
 80068b2:	e004      	b.n	80068be <parse_array+0x166>
            goto fail; /* allocation failure */
 80068b4:	bf00      	nop
 80068b6:	e002      	b.n	80068be <parse_array+0x166>
            goto fail; /* failed to parse value */
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <parse_array+0x166>

fail:
 80068bc:	bf00      	nop
    if (head != NULL)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <parse_array+0x172>
    {
        JDelete(head);
 80068c4:	6978      	ldr	r0, [r7, #20]
 80068c6:	f7fe fd09 	bl	80052dc <JDelete>
    }

    return false;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <print_array+0x22>
    {
        return false;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e070      	b.n	80069d8 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80068f6:	2101      	movs	r1, #1
 80068f8:	6838      	ldr	r0, [r7, #0]
 80068fa:	f7fe fe6f 	bl	80055dc <ensure>
 80068fe:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <print_array+0x36>
    {
        return false;
 8006906:	2300      	movs	r3, #0
 8006908:	e066      	b.n	80069d8 <print_array+0x104>
    }

    *output_pointer = '[';
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	225b      	movs	r2, #91	; 0x5b
 800690e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8006924:	e03d      	b.n	80069a2 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f7ff fe6f 	bl	800660c <print_value>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <print_array+0x64>
        {
            return false;
 8006934:	2300      	movs	r3, #0
 8006936:	e04f      	b.n	80069d8 <print_array+0x104>
        }
        update_offset(output_buffer);
 8006938:	6838      	ldr	r0, [r7, #0]
 800693a:	f7fe feec 	bl	8005716 <update_offset>
        if (current_element->next)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d02a      	beq.n	800699c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <print_array+0x7e>
 800694e:	2302      	movs	r3, #2
 8006950:	e000      	b.n	8006954 <print_array+0x80>
 8006952:	2301      	movs	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3301      	adds	r3, #1
 800695a:	4619      	mov	r1, r3
 800695c:	6838      	ldr	r0, [r7, #0]
 800695e:	f7fe fe3d 	bl	80055dc <ensure>
 8006962:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <print_array+0x9a>
            {
                return false;
 800696a:	2300      	movs	r3, #0
 800696c:	e034      	b.n	80069d8 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	617a      	str	r2, [r7, #20]
 8006974:	222c      	movs	r2, #44	; 0x2c
 8006976:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	617a      	str	r2, [r7, #20]
 8006986:	2220      	movs	r2, #32
 8006988:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2200      	movs	r2, #0
 800698e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	441a      	add	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1be      	bne.n	8006926 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80069a8:	2102      	movs	r1, #2
 80069aa:	6838      	ldr	r0, [r7, #0]
 80069ac:	f7fe fe16 	bl	80055dc <ensure>
 80069b0:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <print_array+0xe8>
    {
        return false;
 80069b8:	2300      	movs	r3, #0
 80069ba:	e00d      	b.n	80069d8 <print_array+0x104>
    }
    *output_pointer++ = ']';
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	617a      	str	r2, [r7, #20]
 80069c2:	225d      	movs	r2, #93	; 0x5d
 80069c4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	60da      	str	r2, [r3, #12]

    return true;
 80069d6:	2301      	movs	r3, #1
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069fa:	d301      	bcc.n	8006a00 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 80069fc:	2300      	movs	r3, #0
 80069fe:	e0e0      	b.n	8006bc2 <parse_object+0x1e2>
    }
    input_buffer->depth++;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80ca 	beq.w	8006ba6 <parse_object+0x1c6>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	f080 80c3 	bcs.w	8006ba6 <parse_object+0x1c6>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b7b      	cmp	r3, #123	; 0x7b
 8006a2e:	f040 80ba 	bne.w	8006ba6 <parse_object+0x1c6>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8006a3c:	6838      	ldr	r0, [r7, #0]
 8006a3e:	f7ff fb53 	bl	80060e8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <parse_object+0x86>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d208      	bcs.n	8006a66 <parse_object+0x86>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b7d      	cmp	r3, #125	; 0x7d
 8006a62:	f000 808d 	beq.w	8006b80 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <parse_object+0x98>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d305      	bcc.n	8006a84 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	609a      	str	r2, [r3, #8]
        goto fail;
 8006a82:	e097      	b.n	8006bb4 <parse_object+0x1d4>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	1e5a      	subs	r2, r3, #1
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3310      	adds	r3, #16
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe fc0c 	bl	80052b0 <JNew_Item>
 8006a98:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8084 	beq.w	8006baa <parse_object+0x1ca>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	e007      	b.n	8006ac2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006acc:	6838      	ldr	r0, [r7, #0]
 8006ace:	f7ff fb0b 	bl	80060e8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6938      	ldr	r0, [r7, #16]
 8006ad6:	f7ff f81d 	bl	8005b14 <parse_string>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d066      	beq.n	8006bae <parse_object+0x1ce>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8006ae0:	6838      	ldr	r0, [r7, #0]
 8006ae2:	f7ff fb01 	bl	80060e8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	2200      	movs	r2, #0
 8006af2:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d055      	beq.n	8006ba6 <parse_object+0x1c6>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d24f      	bcs.n	8006ba6 <parse_object+0x1c6>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b3a      	cmp	r3, #58	; 0x3a
 8006b14:	d147      	bne.n	8006ba6 <parse_object+0x1c6>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006b20:	6838      	ldr	r0, [r7, #0]
 8006b22:	f7ff fae1 	bl	80060e8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6938      	ldr	r0, [r7, #16]
 8006b2a:	f7ff fc83 	bl	8006434 <parse_value>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03e      	beq.n	8006bb2 <parse_object+0x1d2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8006b34:	6838      	ldr	r0, [r7, #0]
 8006b36:	f7ff fad7 	bl	80060e8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <parse_object+0x17c>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d207      	bcs.n	8006b5c <parse_object+0x17c>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b2c      	cmp	r3, #44	; 0x2c
 8006b5a:	d098      	beq.n	8006a8e <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d021      	beq.n	8006ba6 <parse_object+0x1c6>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d21b      	bcs.n	8006ba6 <parse_object+0x1c6>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	4413      	add	r3, r2
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b7d      	cmp	r3, #125	; 0x7d
 8006b7c:	d113      	bne.n	8006ba6 <parse_object+0x1c6>
    {
        goto fail; /* expected end of object */
    }

success:
 8006b7e:	e000      	b.n	8006b82 <parse_object+0x1a2>
        goto success; /* empty object */
 8006b80:	bf00      	nop
    input_buffer->depth--;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	1e5a      	subs	r2, r3, #1
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2240      	movs	r2, #64	; 0x40
 8006b90:	60da      	str	r2, [r3, #12]
    item->child = head;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	609a      	str	r2, [r3, #8]
    return true;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e00d      	b.n	8006bc2 <parse_object+0x1e2>

fail:
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <parse_object+0x1d4>
            goto fail; /* allocation failure */
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <parse_object+0x1d4>
            goto fail; /* faile to parse name */
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <parse_object+0x1d4>
            goto fail; /* failed to parse value */
 8006bb2:	bf00      	nop
    if (head != NULL)
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <parse_object+0x1e0>
    {
        JDelete(head);
 8006bba:	6978      	ldr	r0, [r7, #20]
 8006bbc:	f7fe fb8e 	bl	80052dc <JDelete>
    }

    return false;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b088      	sub	sp, #32
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <print_object+0x22>
    {
        return false;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e109      	b.n	8006e00 <print_object+0x236>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <print_object+0x2e>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e000      	b.n	8006bfa <print_object+0x30>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	4619      	mov	r1, r3
 8006c02:	6838      	ldr	r0, [r7, #0]
 8006c04:	f7fe fcea 	bl	80055dc <ensure>
 8006c08:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <print_object+0x4a>
    {
        return false;
 8006c10:	2300      	movs	r3, #0
 8006c12:	e0f5      	b.n	8006e00 <print_object+0x236>
    }

    *output_pointer++ = '{';
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	61fa      	str	r2, [r7, #28]
 8006c1a:	227b      	movs	r2, #123	; 0x7b
 8006c1c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d004      	beq.n	8006c3a <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	61fa      	str	r2, [r7, #28]
 8006c36:	220a      	movs	r2, #10
 8006c38:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	441a      	add	r2, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	609a      	str	r2, [r3, #8]

    while (current_item)
 8006c46:	e0a1      	b.n	8006d8c <print_object+0x1c2>
    {
        if (output_buffer->format)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	4619      	mov	r1, r3
 8006c56:	6838      	ldr	r0, [r7, #0]
 8006c58:	f7fe fcc0 	bl	80055dc <ensure>
 8006c5c:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <print_object+0x9e>
            {
                return false;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e0cb      	b.n	8006e00 <print_object+0x236>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e007      	b.n	8006c7e <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	61fa      	str	r2, [r7, #28]
 8006c74:	2209      	movs	r2, #9
 8006c76:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d3f2      	bcc.n	8006c6e <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	441a      	add	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff f91b 	bl	8005ed8 <print_string_ptr>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <print_object+0xe2>
        {
            return false;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e0a9      	b.n	8006e00 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7fe fd32 	bl	8005716 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <print_object+0xf4>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e000      	b.n	8006cc0 <print_object+0xf6>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8006cc2:	68f9      	ldr	r1, [r7, #12]
 8006cc4:	6838      	ldr	r0, [r7, #0]
 8006cc6:	f7fe fc89 	bl	80055dc <ensure>
 8006cca:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <print_object+0x10c>
        {
            return false;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e094      	b.n	8006e00 <print_object+0x236>
        }
        *output_pointer++ = ':';
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	61fa      	str	r2, [r7, #28]
 8006cdc:	223a      	movs	r2, #58	; 0x3a
 8006cde:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	61fa      	str	r2, [r7, #28]
 8006cee:	2209      	movs	r2, #9
 8006cf0:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	69b8      	ldr	r0, [r7, #24]
 8006d02:	f7ff fc83 	bl	800660c <print_value>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <print_object+0x146>
        {
            return false;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e077      	b.n	8006e00 <print_object+0x236>
        }
        update_offset(output_buffer);
 8006d10:	6838      	ldr	r0, [r7, #0]
 8006d12:	f7fe fd00 	bl	8005716 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bf14      	ite	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	2300      	moveq	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6838      	ldr	r0, [r7, #0]
 8006d40:	f7fe fc4c 	bl	80055dc <ensure>
 8006d44:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <print_object+0x186>
        {
            return false;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e057      	b.n	8006e00 <print_object+0x236>
        }
        if (current_item->next)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <print_object+0x198>
        {
            *output_pointer++ = ',';
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	61fa      	str	r2, [r7, #28]
 8006d5e:	222c      	movs	r2, #44	; 0x2c
 8006d60:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <print_object+0x1aa>
        {
            *output_pointer++ = '\n';
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	61fa      	str	r2, [r7, #28]
 8006d70:	220a      	movs	r2, #10
 8006d72:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2200      	movs	r2, #0
 8006d78:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	441a      	add	r2, r3
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f47f af5a 	bne.w	8006c48 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <print_object+0x1da>
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	e000      	b.n	8006da6 <print_object+0x1dc>
 8006da4:	2302      	movs	r3, #2
 8006da6:	4619      	mov	r1, r3
 8006da8:	6838      	ldr	r0, [r7, #0]
 8006daa:	f7fe fc17 	bl	80055dc <ensure>
 8006dae:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <print_object+0x1f0>
    {
        return false;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e022      	b.n	8006e00 <print_object+0x236>
    }
    if (output_buffer->format)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d010      	beq.n	8006de4 <print_object+0x21a>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	e007      	b.n	8006dd8 <print_object+0x20e>
        {
            *output_pointer++ = '\t';
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	61fa      	str	r2, [r7, #28]
 8006dce:	2209      	movs	r2, #9
 8006dd0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3f1      	bcc.n	8006dc8 <print_object+0x1fe>
        }
    }
    *output_pointer++ = '}';
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	61fa      	str	r2, [r7, #28]
 8006dea:	227d      	movs	r2, #125	; 0x7d
 8006dec:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	60da      	str	r2, [r3, #12]

    return true;
 8006dfe:	2301      	movs	r3, #1
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <get_object_item+0x1c>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <get_object_item+0x20>
    {
        return NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	e026      	b.n	8006e76 <get_object_item+0x6e>
    }

    current_element = object->child;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d013      	beq.n	8006e5c <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8006e34:	e002      	b.n	8006e3c <get_object_item+0x34>
        {
            current_element = current_element->next;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <get_object_item+0x6c>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	4619      	mov	r1, r3
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	f7f9 f9c1 	bl	80001d0 <strcmp>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f0      	bne.n	8006e36 <get_object_item+0x2e>
 8006e54:	e00e      	b.n	8006e74 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <get_object_item+0x6c>
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4619      	mov	r1, r3
 8006e68:	68b8      	ldr	r0, [r7, #8]
 8006e6a:	f7fe f97b 	bl	8005164 <case_insensitive_strcmp>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <get_object_item+0x4e>
        }
    }

    return current_element;
 8006e74:	697b      	ldr	r3, [r7, #20]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ffbb 	bl	8006e08 <get_object_item>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	605a      	str	r2, [r3, #4]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <add_item_to_array+0x1a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <add_item_to_array+0x1e>
    {
        return false;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e015      	b.n	8006f08 <add_item_to_array+0x4a>
    }

    child = array->child;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	609a      	str	r2, [r3, #8]
 8006eee:	e00a      	b.n	8006f06 <add_item_to_array+0x48>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]
        while (child->next)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f8      	bne.n	8006ef0 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ffcb 	bl	8006e9c <suffix_object>
    }

    return true;
 8006f06:	2301      	movs	r3, #1
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8006f18:	687b      	ldr	r3, [r7, #4]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const internal_hooks * const hooks, const Jbool constant_key)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	607a      	str	r2, [r7, #4]
 8006f32:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d005      	beq.n	8006f4e <add_item_to_object+0x28>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <add_item_to_object+0x28>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <add_item_to_object+0x2c>
    {
        return false;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e036      	b.n	8006fc0 <add_item_to_object+0x9a>
    }

    if (constant_key)
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <add_item_to_object+0x46>
    {
        new_key = (char*)cast_away_const(string);
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f7ff ffd9 	bl	8006f10 <cast_away_const>
 8006f5e:	6178      	str	r0, [r7, #20]
        new_type = item->type | JStringIsConst;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e00e      	b.n	8006f8a <add_item_to_object+0x64>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string, hooks);
 8006f6c:	6839      	ldr	r1, [r7, #0]
 8006f6e:	68b8      	ldr	r0, [r7, #8]
 8006f70:	f7fe f968 	bl	8005244 <Jstrdup>
 8006f74:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <add_item_to_object+0x5a>
        {
            return false;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e01f      	b.n	8006fc0 <add_item_to_object+0x9a>
        }

        new_type = item->type & ~JStringIsConst;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f88:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <add_item_to_object+0x84>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <add_item_to_object+0x84>
    {
        hooks->deallocate(item->string);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6a12      	ldr	r2, [r2, #32]
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4798      	blx	r3
    }

    item->string = new_key;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff ff80 	bl	8006ebe <add_item_to_array>
 8006fbe:	4603      	mov	r3, r0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <JAddItemToObject+0x24>)
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f7ff ffa1 	bl	8006f26 <add_item_to_object>
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000058 	.word	0x20000058

08006ff0 <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f85f 	bl	80070c0 <JCreateBool>
 8007002:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <JAddBoolToObject+0x40>)
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff ff89 	bl	8006f26 <add_item_to_object>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <JAddBoolToObject+0x2e>
    {
        return bool_item;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	e003      	b.n	8007026 <JAddBoolToObject+0x36>
    }

    JDelete(bool_item);
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	f7fe f95c 	bl	80052dc <JDelete>
    return NULL;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000058 	.word	0x20000058

08007034 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const double number)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	ed87 0b00 	vstr	d0, [r7]
    J *number_item = JCreateNumber(number);
 8007042:	ed97 0b00 	vldr	d0, [r7]
 8007046:	f000 f857 	bl	80070f8 <JCreateNumber>
 800704a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800704c:	2300      	movs	r3, #0
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4b09      	ldr	r3, [pc, #36]	; (8007078 <JAddNumberToObject+0x44>)
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff ff65 	bl	8006f26 <add_item_to_object>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <JAddNumberToObject+0x32>
    {
        return number_item;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	e003      	b.n	800706e <JAddNumberToObject+0x3a>
    }

    JDelete(number_item);
 8007066:	6978      	ldr	r0, [r7, #20]
 8007068:	f7fe f938 	bl	80052dc <JDelete>
    return NULL;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000058 	.word	0x20000058

0800707c <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f87d 	bl	8007188 <JCreateString>
 800708e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8007090:	2300      	movs	r3, #0
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4b09      	ldr	r3, [pc, #36]	; (80070bc <JAddStringToObject+0x40>)
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff43 	bl	8006f26 <add_item_to_object>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <JAddStringToObject+0x2e>
    {
        return string_item;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	e003      	b.n	80070b2 <JAddStringToObject+0x36>
    }

    JDelete(string_item);
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f7fe f916 	bl	80052dc <JDelete>
    return NULL;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000058 	.word	0x20000058

080070c0 <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 80070c8:	4809      	ldr	r0, [pc, #36]	; (80070f0 <JCreateBool+0x30>)
 80070ca:	f7fe f8f1 	bl	80052b0 <JNew_Item>
 80070ce:	60f8      	str	r0, [r7, #12]
    if(item)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <JCreateBool+0x26>
    {
        item->type = b ? JTrue : JFalse;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <JCreateBool+0x20>
 80070dc:	2202      	movs	r2, #2
 80070de:	e000      	b.n	80070e2 <JCreateBool+0x22>
 80070e0:	2201      	movs	r2, #1
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	60da      	str	r2, [r3, #12]
    }

    return item;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000058 	.word	0x20000058
 80070f4:	00000000 	.word	0x00000000

080070f8 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(double num)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	ed87 0b00 	vstr	d0, [r7]
    J *item = JNew_Item(&global_hooks);
 8007102:	481f      	ldr	r0, [pc, #124]	; (8007180 <JCreateNumber+0x88>)
 8007104:	f7fe f8d4 	bl	80052b0 <JNew_Item>
 8007108:	60f8      	str	r0, [r7, #12]
    if(item)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d02c      	beq.n	800716a <JCreateNumber+0x72>
    {
        item->type = JNumber;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2208      	movs	r2, #8
 8007114:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	e9d7 3400 	ldrd	r3, r4, [r7]
 800711c:	e9c2 3406 	strd	r3, r4, [r2, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8007120:	a315      	add	r3, pc, #84	; (adr r3, 8007178 <JCreateNumber+0x80>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800712a:	f7f9 fcfb 	bl	8000b24 <__aeabi_dcmpge>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <JCreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800713a:	615a      	str	r2, [r3, #20]
 800713c:	e015      	b.n	800716a <JCreateNumber+0x72>
        }
        else if (num <= INT_MIN)
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	4b10      	ldr	r3, [pc, #64]	; (8007184 <JCreateNumber+0x8c>)
 8007144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007148:	f7f9 fce2 	bl	8000b10 <__aeabi_dcmple>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <JCreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007158:	615a      	str	r2, [r3, #20]
 800715a:	e006      	b.n	800716a <JCreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800715c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007160:	f7f9 fcf4 	bl	8000b4c <__aeabi_d2iz>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800716a:	68fb      	ldr	r3, [r7, #12]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}
 8007174:	f3af 8000 	nop.w
 8007178:	ffc00000 	.word	0xffc00000
 800717c:	41dfffff 	.word	0x41dfffff
 8007180:	20000058 	.word	0x20000058
 8007184:	c1e00000 	.word	0xc1e00000

08007188 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8007190:	480f      	ldr	r0, [pc, #60]	; (80071d0 <JCreateString+0x48>)
 8007192:	f7fe f88d 	bl	80052b0 <JNew_Item>
 8007196:	60f8      	str	r0, [r7, #12]
    if(item)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d012      	beq.n	80071c4 <JCreateString+0x3c>
    {
        item->type = JString;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2210      	movs	r2, #16
 80071a2:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string, &global_hooks);
 80071a4:	490a      	ldr	r1, [pc, #40]	; (80071d0 <JCreateString+0x48>)
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe f84c 	bl	8005244 <Jstrdup>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d104      	bne.n	80071c4 <JCreateString+0x3c>
        {
            JDelete(item);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7fe f88e 	bl	80052dc <JDelete>
            return NULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <JCreateString+0x3e>
        }
    }

    return item;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000058 	.word	0x20000058

080071d4 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
    J *item = JNew_Item(&global_hooks);
 80071da:	4807      	ldr	r0, [pc, #28]	; (80071f8 <JCreateObject+0x24>)
 80071dc:	f7fe f868 	bl	80052b0 <JNew_Item>
 80071e0:	6078      	str	r0, [r7, #4]
    if (item)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <JCreateObject+0x1a>
    {
        item->type = JObject;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	60da      	str	r2, [r3, #12]
    }

    return item;
 80071ee:	687b      	ldr	r3, [r7, #4]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000058 	.word	0x20000058

080071fc <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <JIsNumber+0x12>
    {
        return false;
 800720a:	2300      	movs	r3, #0
 800720c:	e007      	b.n	800721e <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b08      	cmp	r3, #8
 8007216:	bf0c      	ite	eq
 8007218:	2301      	moveq	r3, #1
 800721a:	2300      	movne	r3, #0
 800721c:	b2db      	uxtb	r3, r3
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <JIsString+0x12>
    {
        return false;
 8007238:	2300      	movs	r3, #0
 800723a:	e007      	b.n	800724c <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b10      	cmp	r3, #16
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
double JGetNumber(J *rsp, const char *field) {
 8007258:	b590      	push	{r4, r7, lr}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <JGetNumber+0x1a>
        return 0.0;
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	f04f 0400 	mov.w	r4, #0
 8007270:	e01a      	b.n	80072a8 <JGetNumber+0x50>
    J *item = JGetObjectItem(rsp, field);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fe02 	bl	8006e7e <JGetObjectItem>
 800727a:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d104      	bne.n	800728c <JGetNumber+0x34>
        return 0.0;
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	f04f 0400 	mov.w	r4, #0
 800728a:	e00d      	b.n	80072a8 <JGetNumber+0x50>
    if (!JIsNumber(item))
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff ffb5 	bl	80071fc <JIsNumber>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <JGetNumber+0x4a>
        return 0.0;
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	f04f 0400 	mov.w	r4, #0
 80072a0:	e002      	b.n	80072a8 <JGetNumber+0x50>
    return item->valuedouble;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80072a8:	ec44 3b17 	vmov	d7, r3, r4
}
 80072ac:	eeb0 0a47 	vmov.f32	s0, s14
 80072b0:	eef0 0a67 	vmov.f32	s1, s15
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd90      	pop	{r4, r7, pc}

080072ba <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <JIsNullString+0x14>
        return false;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e01f      	b.n	800730e <JIsNullString+0x54>
    J *item = JGetObjectItem(rsp, field);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fdd4 	bl	8006e7e <JGetObjectItem>
 80072d6:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <JIsNullString+0x28>
        return true;
 80072de:	2301      	movs	r3, #1
 80072e0:	e015      	b.n	800730e <JIsNullString+0x54>
    if (!JIsString(item))
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff ffa1 	bl	800722a <JIsString>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <JIsNullString+0x38>
        return false;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e00d      	b.n	800730e <JIsNullString+0x54>
    if (item->valuestring == NULL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <JIsNullString+0x44>
        return true;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e007      	b.n	800730e <JIsNullString+0x54>
    if (item->valuestring[0] == '\0')
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <JIsNullString+0x52>
        return true;
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <JIsNullString+0x54>
    return false;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <JNtoA>:
    0.0000000005,       // 9
    0.00000000005       // 10
};

char * JNtoA(double f, char * buf, int original_precision)
{
 8007318:	b5b0      	push	{r4, r5, r7, lr}
 800731a:	b08e      	sub	sp, #56	; 0x38
 800731c:	af00      	add	r7, sp, #0
 800731e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
    char * ptr = buf;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
    char * p = ptr;
 800732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732c:	633b      	str	r3, [r7, #48]	; 0x30
    char c;
    long intPart;

    // Check specifically for uncommon but bad floating point numbers that can't be converted
    uint8_t fbytes[8];
    memcpy(&fbytes, &f, sizeof(fbytes));
 800732e:	f107 0310 	add.w	r3, r7, #16
 8007332:	f107 0208 	add.w	r2, r7, #8
 8007336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800733a:	e883 0003 	stmia.w	r3, {r0, r1}
    bool wasFF = true;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int i;
    for (i=0; i<sizeof(fbytes); i++)
 8007344:	2300      	movs	r3, #0
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	e00c      	b.n	8007364 <JNtoA+0x4c>
        if (fbytes[i] != 0xff) wasFF = false;
 800734a:	f107 0210 	add.w	r2, r7, #16
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	4413      	add	r3, r2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2bff      	cmp	r3, #255	; 0xff
 8007356:	d002      	beq.n	800735e <JNtoA+0x46>
 8007358:	2300      	movs	r3, #0
 800735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (i=0; i<sizeof(fbytes); i++)
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	3301      	adds	r3, #1
 8007362:	623b      	str	r3, [r7, #32]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b07      	cmp	r3, #7
 8007368:	d9ef      	bls.n	800734a <JNtoA+0x32>
    if (wasFF)
 800736a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <JNtoA+0x66>
        f = 0.0;
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // check precision bounds
    int precision = original_precision;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	61fb      	str	r3, [r7, #28]
    if (precision < 0 || precision > JNTOA_PRECISION)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	db02      	blt.n	800738e <JNtoA+0x76>
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b0a      	cmp	r3, #10
 800738c:	dd01      	ble.n	8007392 <JNtoA+0x7a>
        precision = JNTOA_PRECISION;
 800738e:	230a      	movs	r3, #10
 8007390:	61fb      	str	r3, [r7, #28]

    // sign stuff
    if (f < 0)
 8007392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	f7f9 fbad 	bl	8000afc <__aeabi_dcmplt>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <JNtoA+0xa8>
    {
        f = -f;
 80073a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ac:	4614      	mov	r4, r2
 80073ae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80073b2:	e9c7 4502 	strd	r4, r5, [r7, #8]
        *ptr++ = '-';
 80073b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	637a      	str	r2, [r7, #52]	; 0x34
 80073bc:	222d      	movs	r2, #45	; 0x2d
 80073be:	701a      	strb	r2, [r3, #0]
    }

    if (original_precision < 0)  // negative precision == automatic precision guess
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da4f      	bge.n	8007466 <JNtoA+0x14e>
    {
        if (f < 1.0) precision = 6;
 80073c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	4b98      	ldr	r3, [pc, #608]	; (8007630 <JNtoA+0x318>)
 80073d0:	f7f9 fb94 	bl	8000afc <__aeabi_dcmplt>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <JNtoA+0xc8>
 80073da:	2306      	movs	r3, #6
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	e042      	b.n	8007466 <JNtoA+0x14e>
        else if (f < 10.0) precision = 5;
 80073e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	4b92      	ldr	r3, [pc, #584]	; (8007634 <JNtoA+0x31c>)
 80073ea:	f7f9 fb87 	bl	8000afc <__aeabi_dcmplt>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <JNtoA+0xe2>
 80073f4:	2305      	movs	r3, #5
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	e035      	b.n	8007466 <JNtoA+0x14e>
        else if (f < 100.0) precision = 4;
 80073fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	4b8d      	ldr	r3, [pc, #564]	; (8007638 <JNtoA+0x320>)
 8007404:	f7f9 fb7a 	bl	8000afc <__aeabi_dcmplt>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d002      	beq.n	8007414 <JNtoA+0xfc>
 800740e:	2304      	movs	r3, #4
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e028      	b.n	8007466 <JNtoA+0x14e>
        else if (f < 1000.0) precision = 3;
 8007414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	4b87      	ldr	r3, [pc, #540]	; (800763c <JNtoA+0x324>)
 800741e:	f7f9 fb6d 	bl	8000afc <__aeabi_dcmplt>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <JNtoA+0x116>
 8007428:	2303      	movs	r3, #3
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	e01b      	b.n	8007466 <JNtoA+0x14e>
        else if (f < 10000.0) precision = 2;
 800742e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007432:	a37b      	add	r3, pc, #492	; (adr r3, 8007620 <JNtoA+0x308>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 fb60 	bl	8000afc <__aeabi_dcmplt>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <JNtoA+0x130>
 8007442:	2302      	movs	r3, #2
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e00e      	b.n	8007466 <JNtoA+0x14e>
        else if (f < 100000.0) precision = 1;
 8007448:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800744c:	a376      	add	r3, pc, #472	; (adr r3, 8007628 <JNtoA+0x310>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f9 fb53 	bl	8000afc <__aeabi_dcmplt>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <JNtoA+0x14a>
 800745c:	2301      	movs	r3, #1
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	e001      	b.n	8007466 <JNtoA+0x14e>
        else precision = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
    }

    // round value according the precision
    if (precision)
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <JNtoA+0x174>
        f += rounders[precision];
 800746c:	4a74      	ldr	r2, [pc, #464]	; (8007640 <JNtoA+0x328>)
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	4413      	add	r3, r2
 8007474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007478:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800747c:	461a      	mov	r2, r3
 800747e:	4623      	mov	r3, r4
 8007480:	f7f8 ff14 	bl	80002ac <__adddf3>
 8007484:	4603      	mov	r3, r0
 8007486:	460c      	mov	r4, r1
 8007488:	e9c7 3402 	strd	r3, r4, [r7, #8]

    // integer part...
    intPart = f;
 800748c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	4621      	mov	r1, r4
 8007494:	f7f9 fb5a 	bl	8000b4c <__aeabi_d2iz>
 8007498:	4603      	mov	r3, r0
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
    f -= intPart;
 800749c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80074a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074a2:	f7f9 f84f 	bl	8000544 <__aeabi_i2d>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f8 fefb 	bl	80002a8 <__aeabi_dsub>
 80074b2:	4603      	mov	r3, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    if (!intPart)
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <JNtoA+0x1b4>
        *ptr++ = '0';
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	637a      	str	r2, [r7, #52]	; 0x34
 80074c6:	2230      	movs	r2, #48	; 0x30
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e03a      	b.n	8007542 <JNtoA+0x22a>
    else
    {
        // save start pointer
        p = ptr;
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	633b      	str	r3, [r7, #48]	; 0x30

        // convert (reverse order)
        while (intPart)
 80074d0:	e01a      	b.n	8007508 <JNtoA+0x1f0>
        {
            *p++ = '0' + intPart % 10;
 80074d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d4:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <JNtoA+0x32c>)
 80074d6:	fb83 1302 	smull	r1, r3, r3, r2
 80074da:	1099      	asrs	r1, r3, #2
 80074dc:	17d3      	asrs	r3, r2, #31
 80074de:	1ac9      	subs	r1, r1, r3
 80074e0:	460b      	mov	r3, r1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	1ad1      	subs	r1, r2, r3
 80074ea:	b2ca      	uxtb	r2, r1
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	1c59      	adds	r1, r3, #1
 80074f0:	6339      	str	r1, [r7, #48]	; 0x30
 80074f2:	3230      	adds	r2, #48	; 0x30
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	701a      	strb	r2, [r3, #0]
            intPart /= 10;
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	4a52      	ldr	r2, [pc, #328]	; (8007644 <JNtoA+0x32c>)
 80074fc:	fb82 1203 	smull	r1, r2, r2, r3
 8007500:	1092      	asrs	r2, r2, #2
 8007502:	17db      	asrs	r3, r3, #31
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
        while (intPart)
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e1      	bne.n	80074d2 <JNtoA+0x1ba>
        }

        // save end pos
        p1 = p;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	61bb      	str	r3, [r7, #24]

        // reverse result
        while (p > ptr)
 8007512:	e010      	b.n	8007536 <JNtoA+0x21e>
        {
            c = *--p;
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3b01      	subs	r3, #1
 8007518:	633b      	str	r3, [r7, #48]	; 0x30
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            *p = *ptr;
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	701a      	strb	r2, [r3, #0]
            *ptr++ = c;
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	637a      	str	r2, [r7, #52]	; 0x34
 8007530:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007534:	701a      	strb	r2, [r3, #0]
        while (p > ptr)
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	429a      	cmp	r2, r3
 800753c:	d8ea      	bhi.n	8007514 <JNtoA+0x1fc>
        }

        // restore end pos
        ptr = p1;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // decimal part
    if (precision)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d03e      	beq.n	80075c6 <JNtoA+0x2ae>
    {

        // place decimal point
        *ptr++ = '.';
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	637a      	str	r2, [r7, #52]	; 0x34
 800754e:	222e      	movs	r2, #46	; 0x2e
 8007550:	701a      	strb	r2, [r3, #0]

        // convert
        while (precision--)
 8007552:	e033      	b.n	80075bc <JNtoA+0x2a4>
        {
            f *= 10.0;
 8007554:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	4b35      	ldr	r3, [pc, #212]	; (8007634 <JNtoA+0x31c>)
 800755e:	f7f9 f85b 	bl	8000618 <__aeabi_dmul>
 8007562:	4603      	mov	r3, r0
 8007564:	460c      	mov	r4, r1
 8007566:	e9c7 3402 	strd	r3, r4, [r7, #8]
            c = f;
 800756a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800756e:	4618      	mov	r0, r3
 8007570:	4621      	mov	r1, r4
 8007572:	f7f9 fb13 	bl	8000b9c <__aeabi_d2uiz>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            // Invalid floating point numbers (specifically 0xffffff) end up at this point
            // with a c == 255 after the coercion
            if (c > 9) c = 0;
 800757c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007580:	2b09      	cmp	r3, #9
 8007582:	d902      	bls.n	800758a <JNtoA+0x272>
 8007584:	2300      	movs	r3, #0
 8007586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            *ptr++ = '0' + c;
 800758a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758c:	1c5a      	adds	r2, r3, #1
 800758e:	637a      	str	r2, [r7, #52]	; 0x34
 8007590:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007594:	3230      	adds	r2, #48	; 0x30
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
            f -= c;
 800759a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800759e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7f8 ffce 	bl	8000544 <__aeabi_i2d>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fe7a 	bl	80002a8 <__aeabi_dsub>
 80075b4:	4603      	mov	r3, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
        while (precision--)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	1e5a      	subs	r2, r3, #1
 80075c0:	61fa      	str	r2, [r7, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1c6      	bne.n	8007554 <JNtoA+0x23c>
        }
    }

    // terminating zero
    *ptr = 0;
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]

    // Remove trailing zero's if automatic precision
    if (NULL != strchr(buf, '.')) {
 80075cc:	212e      	movs	r1, #46	; 0x2e
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fd58 	bl	8008084 <strchr>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01b      	beq.n	8007612 <JNtoA+0x2fa>
        if (original_precision < 0) {
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da18      	bge.n	8007612 <JNtoA+0x2fa>
            --ptr;
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	3b01      	subs	r3, #1
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
            while (ptr > (buf+1) && *ptr == '0')
 80075e6:	e004      	b.n	80075f2 <JNtoA+0x2da>
                *ptr-- = 0;
 80075e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	637a      	str	r2, [r7, #52]	; 0x34
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
            while (ptr > (buf+1) && *ptr == '0')
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3301      	adds	r3, #1
 80075f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d903      	bls.n	8007604 <JNtoA+0x2ec>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b30      	cmp	r3, #48	; 0x30
 8007602:	d0f1      	beq.n	80075e8 <JNtoA+0x2d0>
            if (*ptr == '.')
 8007604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b2e      	cmp	r3, #46	; 0x2e
 800760a:	d102      	bne.n	8007612 <JNtoA+0x2fa>
                *ptr = 0;
 800760c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
        }
    }

    return buf;
 8007612:	687b      	ldr	r3, [r7, #4]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3738      	adds	r7, #56	; 0x38
 8007618:	46bd      	mov	sp, r7
 800761a:	bdb0      	pop	{r4, r5, r7, pc}
 800761c:	f3af 8000 	nop.w
 8007620:	00000000 	.word	0x00000000
 8007624:	40c38800 	.word	0x40c38800
 8007628:	00000000 	.word	0x00000000
 800762c:	40f86a00 	.word	0x40f86a00
 8007630:	3ff00000 	.word	0x3ff00000
 8007634:	40240000 	.word	0x40240000
 8007638:	40590000 	.word	0x40590000
 800763c:	408f4000 	.word	0x408f4000
 8007640:	08008b20 	.word	0x08008b20
 8007644:	66666667 	.word	0x66666667

08007648 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <NoteSetFn+0x34>)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6013      	str	r3, [r2, #0]
    hookFree = freefn;
 800765c:	4a08      	ldr	r2, [pc, #32]	; (8007680 <NoteSetFn+0x38>)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6013      	str	r3, [r2, #0]
    hookDelayMs = delayfn;
 8007662:	4a08      	ldr	r2, [pc, #32]	; (8007684 <NoteSetFn+0x3c>)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6013      	str	r3, [r2, #0]
    hookGetMs = millisfn;
 8007668:	4a07      	ldr	r2, [pc, #28]	; (8007688 <NoteSetFn+0x40>)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	6013      	str	r3, [r2, #0]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000490 	.word	0x20000490
 8007680:	20000494 	.word	0x20000494
 8007684:	20000498 	.word	0x20000498
 8007688:	2000049c 	.word	0x2000049c

0800768c <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <NoteSetFnSerial+0x44>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 80076a0:	4a0c      	ldr	r2, [pc, #48]	; (80076d4 <NoteSetFnSerial+0x48>)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6013      	str	r3, [r2, #0]
    hookSerialTransmit = transmitfn;
 80076a6:	4a0c      	ldr	r2, [pc, #48]	; (80076d8 <NoteSetFnSerial+0x4c>)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6013      	str	r3, [r2, #0]
    hookSerialAvailable = availfn;
 80076ac:	4a0b      	ldr	r2, [pc, #44]	; (80076dc <NoteSetFnSerial+0x50>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6013      	str	r3, [r2, #0]
    hookSerialReceive = receivefn;
 80076b2:	4a0b      	ldr	r2, [pc, #44]	; (80076e0 <NoteSetFnSerial+0x54>)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	6013      	str	r3, [r2, #0]

    notecardReset = serialNoteReset;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <NoteSetFnSerial+0x58>)
 80076ba:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <NoteSetFnSerial+0x5c>)
 80076bc:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 80076be:	4b0b      	ldr	r3, [pc, #44]	; (80076ec <NoteSetFnSerial+0x60>)
 80076c0:	4a0b      	ldr	r2, [pc, #44]	; (80076f0 <NoteSetFnSerial+0x64>)
 80076c2:	601a      	str	r2, [r3, #0]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	200004a0 	.word	0x200004a0
 80076d4:	200004a4 	.word	0x200004a4
 80076d8:	200004a8 	.word	0x200004a8
 80076dc:	200004ac 	.word	0x200004ac
 80076e0:	200004b0 	.word	0x200004b0
 80076e4:	200004b4 	.word	0x200004b4
 80076e8:	08007d3d 	.word	0x08007d3d
 80076ec:	200004b8 	.word	0x200004b8
 80076f0:	08007b39 	.word	0x08007b39

080076f4 <NoteFnDebug>:
    notecardTransaction = i2cNoteTransaction;
}


// Runtime hook wrappers
void NoteFnDebug(const char *format, ...) {
 80076f4:	b40f      	push	{r0, r1, r2, r3}
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b0c2      	sub	sp, #264	; 0x108
 80076fa:	af00      	add	r7, sp, #0
    if (hookDebugOutput != NULL) {
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <NoteFnDebug+0x44>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <NoteFnDebug+0x34>
        char line[256];
        va_list args;
        va_start(args, format);
 8007704:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8007708:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        vsnprintf(line, sizeof(line), format, args);
 800770c:	1d38      	adds	r0, r7, #4
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007712:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800771a:	f000 fcff 	bl	800811c <vsniprintf>
        va_end(args);
        hookDebugOutput(line);
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <NoteFnDebug+0x44>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1d3a      	adds	r2, r7, #4
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
    }
}
 8007728:	bf00      	nop
 800772a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800772e:	46bd      	mov	sp, r7
 8007730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007734:	b004      	add	sp, #16
 8007736:	4770      	bx	lr
 8007738:	20000484 	.word	0x20000484

0800773c <NoteFnGetMs>:
long unsigned int NoteFnGetMs() {
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <NoteFnGetMs+0x1c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <NoteFnGetMs+0x10>
        return 0;
 8007748:	2300      	movs	r3, #0
 800774a:	e003      	b.n	8007754 <NoteFnGetMs+0x18>
    return hookGetMs();
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <NoteFnGetMs+0x1c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
}
 8007754:	4618      	mov	r0, r3
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2000049c 	.word	0x2000049c

0800775c <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <NoteFnDelayMs+0x20>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <NoteFnDelayMs+0x18>
        hookDelayMs(ms);
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <NoteFnDelayMs+0x20>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000498 	.word	0x20000498

08007780 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <NoteFnMalloc+0x28>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <NoteFnMalloc+0x14>
        return NULL;
 8007790:	2300      	movs	r3, #0
 8007792:	e004      	b.n	800779e <NoteFnMalloc+0x1e>
    return hookMalloc(size);
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <NoteFnMalloc+0x28>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
 800779c:	4603      	mov	r3, r0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000490 	.word	0x20000490

080077ac <NoteFnFree>:
void NoteFnFree(void *p) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 80077b4:	4b05      	ldr	r3, [pc, #20]	; (80077cc <NoteFnFree+0x20>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <NoteFnFree+0x18>
        hookFree(p);
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <NoteFnFree+0x20>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000494 	.word	0x20000494

080077d0 <NoteFnLockNote>:
}
void NoteFnUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteFnLockNote() {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <NoteFnLockNote+0x18>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <NoteFnLockNote+0x12>
        hookLockNote();
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <NoteFnLockNote+0x18>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4798      	blx	r3
}
 80077e2:	bf00      	nop
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000488 	.word	0x20000488

080077ec <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <NoteFnUnlockNote+0x18>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <NoteFnUnlockNote+0x18>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4798      	blx	r3
}
 80077fe:	bf00      	nop
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	2000048c 	.word	0x2000048c

08007808 <NoteFnSerialReset>:
void NoteFnSerialReset() {
 8007808:	b580      	push	{r7, lr}
 800780a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <NoteFnSerialReset+0x20>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d106      	bne.n	8007822 <NoteFnSerialReset+0x1a>
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <NoteFnSerialReset+0x24>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <NoteFnSerialReset+0x1a>
        hookSerialReset();
 800781c:	4b03      	ldr	r3, [pc, #12]	; (800782c <NoteFnSerialReset+0x24>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4798      	blx	r3
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	200004a0 	.word	0x200004a0
 800782c:	200004a4 	.word	0x200004a4

08007830 <NoteFnSerialTransmit>:
void NoteFnSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <NoteFnSerialTransmit+0x34>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d109      	bne.n	800785a <NoteFnSerialTransmit+0x2a>
 8007846:	4b08      	ldr	r3, [pc, #32]	; (8007868 <NoteFnSerialTransmit+0x38>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <NoteFnSerialTransmit+0x2a>
        hookSerialTransmit(text, len, flush);
 800784e:	4b06      	ldr	r3, [pc, #24]	; (8007868 <NoteFnSerialTransmit+0x38>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	79fa      	ldrb	r2, [r7, #7]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	4798      	blx	r3
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200004a0 	.word	0x200004a0
 8007868:	200004a8 	.word	0x200004a8

0800786c <NoteFnSerialAvailable>:
bool NoteFnSerialAvailable() {
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 8007870:	4b07      	ldr	r3, [pc, #28]	; (8007890 <NoteFnSerialAvailable+0x24>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d108      	bne.n	800788a <NoteFnSerialAvailable+0x1e>
 8007878:	4b06      	ldr	r3, [pc, #24]	; (8007894 <NoteFnSerialAvailable+0x28>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d004      	beq.n	800788a <NoteFnSerialAvailable+0x1e>
        return hookSerialAvailable();
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <NoteFnSerialAvailable+0x28>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4798      	blx	r3
 8007886:	4603      	mov	r3, r0
 8007888:	e000      	b.n	800788c <NoteFnSerialAvailable+0x20>
    return false;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200004a0 	.word	0x200004a0
 8007894:	200004ac 	.word	0x200004ac

08007898 <NoteFnSerialReceive>:
char NoteFnSerialReceive() {
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <NoteFnSerialReceive+0x24>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d108      	bne.n	80078b6 <NoteFnSerialReceive+0x1e>
 80078a4:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <NoteFnSerialReceive+0x28>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <NoteFnSerialReceive+0x1e>
        return hookSerialReceive();
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <NoteFnSerialReceive+0x28>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4798      	blx	r3
 80078b2:	4603      	mov	r3, r0
 80078b4:	e000      	b.n	80078b8 <NoteFnSerialReceive+0x20>
    return 0;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200004a0 	.word	0x200004a0
 80078c0:	200004b0 	.word	0x200004b0

080078c4 <NoteFnNoteReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteFnNoteReset() {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 80078c8:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <NoteFnNoteReset+0x1c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 80078d0:	2301      	movs	r3, #1
 80078d2:	e003      	b.n	80078dc <NoteFnNoteReset+0x18>
    return notecardReset();
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <NoteFnNoteReset+0x1c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	200004b4 	.word	0x200004b4

080078e4 <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 80078ee:	4b08      	ldr	r3, [pc, #32]	; (8007910 <NoteFnTransaction+0x2c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <NoteFnTransaction+0x16>
        return "notecard not initialized";
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <NoteFnTransaction+0x30>)
 80078f8:	e005      	b.n	8007906 <NoteFnTransaction+0x22>
    return notecardTransaction(json, jsonResponse);
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <NoteFnTransaction+0x2c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	4603      	mov	r3, r0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200004b8 	.word	0x200004b8
 8007914:	0800887c 	.word	0x0800887c

08007918 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 8007920:	f7ff fc58 	bl	80071d4 <JCreateObject>
 8007924:	60f8      	str	r0, [r7, #12]
    if (rspdoc != NULL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <errDoc+0x1e>
        JAddStringToObject(rspdoc, "err", errmsg);
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4906      	ldr	r1, [pc, #24]	; (8007948 <errDoc+0x30>)
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fba3 	bl	800707c <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"%s\"}\n", errmsg);
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	4804      	ldr	r0, [pc, #16]	; (800794c <errDoc+0x34>)
 800793a:	f7ff fedb 	bl	80076f4 <NoteFnDebug>
#endif
    return rspdoc;
 800793e:	68fb      	ldr	r3, [r7, #12]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	08008898 	.word	0x08008898
 800794c:	0800889c 	.word	0x0800889c

08007950 <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 8007958:	f7ff fc3c 	bl	80071d4 <JCreateObject>
 800795c:	60f8      	str	r0, [r7, #12]
    if (reqdoc != NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <NoteNewRequest+0x1e>
        JAddStringToObject(reqdoc, "req", request);
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4904      	ldr	r1, [pc, #16]	; (8007978 <NoteNewRequest+0x28>)
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff fb87 	bl	800707c <JAddStringToObject>
    return reqdoc;
 800796e:	68fb      	ldr	r3, [r7, #12]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	080088ac 	.word	0x080088ac

0800797c <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <NoteRequest+0x12>
        return false;
 800798a:	2300      	movs	r3, #0
 800798c:	e018      	b.n	80079c0 <NoteRequest+0x44>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f83a 	bl	8007a08 <NoteTransaction>
 8007994:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <NoteRequest+0x2a>
        JDelete(req);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fd fc9d 	bl	80052dc <JDelete>
        return false;
 80079a2:	2300      	movs	r3, #0
 80079a4:	e00c      	b.n	80079c0 <NoteRequest+0x44>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 80079a6:	4908      	ldr	r1, [pc, #32]	; (80079c8 <NoteRequest+0x4c>)
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7ff fc86 	bl	80072ba <JIsNullString>
 80079ae:	4603      	mov	r3, r0
 80079b0:	72fb      	strb	r3, [r7, #11]
    JDelete(req);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fd fc92 	bl	80052dc <JDelete>
    JDelete(rsp);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7fd fc8f 	bl	80052dc <JDelete>
    return success;
 80079be:	7afb      	ldrb	r3, [r7, #11]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	08008898 	.word	0x08008898

080079cc <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <NoteRequestResponse+0x12>
        return NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	e00f      	b.n	80079fe <NoteRequestResponse+0x32>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f812 	bl	8007a08 <NoteTransaction>
 80079e4:	60f8      	str	r0, [r7, #12]
    if (rsp == NULL) {
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d104      	bne.n	80079f6 <NoteRequestResponse+0x2a>
        JDelete(req);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fd fc75 	bl	80052dc <JDelete>
        return NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e003      	b.n	80079fe <NoteRequestResponse+0x32>
    }
    // Free the request and exit
    JDelete(req);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7fd fc70 	bl	80052dc <JDelete>
    return rsp;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8007a10:	4b33      	ldr	r3, [pc, #204]	; (8007ae0 <NoteTransaction+0xd8>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <NoteTransaction+0x24>
        if (!NoteReset())
 8007a18:	f000 f878 	bl	8007b0c <NoteReset>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f083 0301 	eor.w	r3, r3, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <NoteTransaction+0x24>
            return NULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e055      	b.n	8007ad8 <NoteTransaction+0xd0>
    }

    // Lock
    _LockNote();
 8007a2c:	f7ff fed0 	bl	80077d0 <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fe fcef 	bl	8006414 <JPrintUnformatted>
 8007a36:	6278      	str	r0, [r7, #36]	; 0x24
    if (json == NULL) {
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d107      	bne.n	8007a4e <NoteTransaction+0x46>
        J *rsp = errDoc("can't convert to JSON");
 8007a3e:	4829      	ldr	r0, [pc, #164]	; (8007ae4 <NoteTransaction+0xdc>)
 8007a40:	f7ff ff6a 	bl	8007918 <errDoc>
 8007a44:	6138      	str	r0, [r7, #16]
        _UnlockNote();
 8007a46:	f7ff fed1 	bl	80077ec <NoteFnUnlockNote>
        return rsp;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	e044      	b.n	8007ad8 <NoteTransaction+0xd0>
    }
    
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", json);
 8007a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a50:	4825      	ldr	r0, [pc, #148]	; (8007ae8 <NoteTransaction+0xe0>)
 8007a52:	f7ff fe4f 	bl	80076f4 <NoteFnDebug>
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 8007a56:	f107 030c 	add.w	r3, r7, #12
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a5e:	f7ff ff41 	bl	80078e4 <NoteFnTransaction>
 8007a62:	6238      	str	r0, [r7, #32]

    // Free the json
    JFree(json);
 8007a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a66:	f7fd fc15 	bl	8005294 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <NoteTransaction+0x7c>
		NoteResetRequired();
 8007a70:	f000 f840 	bl	8007af4 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 8007a74:	6a38      	ldr	r0, [r7, #32]
 8007a76:	f7ff ff4f 	bl	8007918 <errDoc>
 8007a7a:	6178      	str	r0, [r7, #20]
        _UnlockNote();
 8007a7c:	f7ff feb6 	bl	80077ec <NoteFnUnlockNote>
        return rsp;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	e029      	b.n	8007ad8 <NoteTransaction+0xd0>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fc32 	bl	80062f0 <JParse>
 8007a8c:	61f8      	str	r0, [r7, #28]
    if (rspdoc == NULL) {
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d115      	bne.n	8007ac0 <NoteTransaction+0xb8>
        _Free(responseJSON);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff fe88 	bl	80077ac <NoteFnFree>
        _Debug("unable to parse %d-byte response JSON: \"%s\"\n", strlen(responseJSON), responseJSON);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7f8 fba0 	bl	80001e4 <strlen>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4810      	ldr	r0, [pc, #64]	; (8007aec <NoteTransaction+0xe4>)
 8007aac:	f7ff fe22 	bl	80076f4 <NoteFnDebug>
        J *rsp = errDoc("unrecognized response from card");
 8007ab0:	480f      	ldr	r0, [pc, #60]	; (8007af0 <NoteTransaction+0xe8>)
 8007ab2:	f7ff ff31 	bl	8007918 <errDoc>
 8007ab6:	61b8      	str	r0, [r7, #24]
        _UnlockNote();
 8007ab8:	f7ff fe98 	bl	80077ec <NoteFnUnlockNote>
        return rsp;
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	e00b      	b.n	8007ad8 <NoteTransaction+0xd0>
    }

    // Debug
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", responseJSON);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4808      	ldr	r0, [pc, #32]	; (8007ae8 <NoteTransaction+0xe0>)
 8007ac6:	f7ff fe15 	bl	80076f4 <NoteFnDebug>
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff fe6d 	bl	80077ac <NoteFnFree>

    // Unlock
    _UnlockNote();
 8007ad2:	f7ff fe8b 	bl	80077ec <NoteFnUnlockNote>

    // Done
    return rspdoc;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
    
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3728      	adds	r7, #40	; 0x28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000064 	.word	0x20000064
 8007ae4:	080088b0 	.word	0x080088b0
 8007ae8:	080088c8 	.word	0x080088c8
 8007aec:	080088cc 	.word	0x080088cc
 8007af0:	080088fc 	.word	0x080088fc

08007af4 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
    resetRequired = true;
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <NoteResetRequired+0x14>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	20000064 	.word	0x20000064

08007b0c <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
    _LockNote();
 8007b12:	f7ff fe5d 	bl	80077d0 <NoteFnLockNote>
    resetRequired = false;
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <NoteReset+0x28>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
    bool success = _NoteReset();
 8007b1c:	f7ff fed2 	bl	80078c4 <NoteFnNoteReset>
 8007b20:	4603      	mov	r3, r0
 8007b22:	71fb      	strb	r3, [r7, #7]
    _UnlockNote();
 8007b24:	f7ff fe62 	bl	80077ec <NoteFnUnlockNote>
    return success;
 8007b28:	79fb      	ldrb	r3, [r7, #7]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000064 	.word	0x20000064

08007b38 <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08c      	sub	sp, #48	; 0x30
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]

    // Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
    uint32_t segOff = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t segLeft = strlen(json);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f8 fb4c 	bl	80001e4 <strlen>
 8007b4c:	62b8      	str	r0, [r7, #40]	; 0x28
    while (true) {
        size_t segLen = segLeft;
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
        if (segLen > CARD_REQUEST_SEGMENT_MAX_LEN)
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b58:	d902      	bls.n	8007b60 <serialNoteTransaction+0x28>
            segLen = CARD_REQUEST_SEGMENT_MAX_LEN;
 8007b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
        segLeft -= segLen;
 8007b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	62bb      	str	r3, [r7, #40]	; 0x28
        _SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fe5c 	bl	8007830 <NoteFnSerialTransmit>
        if (segLeft == 0) {
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <serialNoteTransaction+0x5c>
			_SerialTransmit((uint8_t *)"\n", 1, true);
 8007b7e:	2201      	movs	r2, #1
 8007b80:	2101      	movs	r1, #1
 8007b82:	4864      	ldr	r0, [pc, #400]	; (8007d14 <serialNoteTransaction+0x1dc>)
 8007b84:	f7ff fe54 	bl	8007830 <NoteFnSerialTransmit>
            break;
 8007b88:	bf00      	nop
    // Wait for something to become available, processing timeout errors up-front
    // because the json parse operation immediately following is subject to the
    // serial port timeout. We'd like more flexibility in max timeout and ultimately
    // in our error handling.
    int start;
    for (start = _GetMs(); !_SerialAvailable(); ) {
 8007b8a:	f7ff fdd7 	bl	800773c <NoteFnGetMs>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	e01e      	b.n	8007bd2 <serialNoteTransaction+0x9a>
        segOff += segLen;
 8007b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	4413      	add	r3, r2
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        _DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8007b9c:	20fa      	movs	r0, #250	; 0xfa
 8007b9e:	f7ff fddd 	bl	800775c <NoteFnDelayMs>
    while (true) {
 8007ba2:	e7d4      	b.n	8007b4e <serialNoteTransaction+0x16>
        if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8007ba4:	f7ff fdca 	bl	800773c <NoteFnGetMs>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d30a      	bcc.n	8007bcc <serialNoteTransaction+0x94>
            _Debug("reply to request didn't arrive from module in %dms\n", _GetMs() - start);
 8007bb6:	f7ff fdc1 	bl	800773c <NoteFnGetMs>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4855      	ldr	r0, [pc, #340]	; (8007d18 <serialNoteTransaction+0x1e0>)
 8007bc4:	f7ff fd96 	bl	80076f4 <NoteFnDebug>
            return "transaction timeout";
 8007bc8:	4b54      	ldr	r3, [pc, #336]	; (8007d1c <serialNoteTransaction+0x1e4>)
 8007bca:	e09e      	b.n	8007d0a <serialNoteTransaction+0x1d2>
        }
        _DelayMs(10);
 8007bcc:	200a      	movs	r0, #10
 8007bce:	f7ff fdc5 	bl	800775c <NoteFnDelayMs>
    for (start = _GetMs(); !_SerialAvailable(); ) {
 8007bd2:	f7ff fe4b 	bl	800786c <NoteFnSerialAvailable>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e0      	bne.n	8007ba4 <serialNoteTransaction+0x6c>
    }

    // Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
    // that it can be null-terminated.  This must be the case because json parsing requires a
    // null-terminated string.
    int jsonbufAllocLen = 1024;
 8007be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be6:	623b      	str	r3, [r7, #32]
    char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	3301      	adds	r3, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7ff fdc7 	bl	8007780 <NoteFnMalloc>
 8007bf2:	61f8      	str	r0, [r7, #28]
    if (jsonbuf == NULL) {
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <serialNoteTransaction+0xce>
        _Debug("transaction: jsonbuf malloc(%d) failed\n", jsonbufAllocLen);
 8007bfa:	6a39      	ldr	r1, [r7, #32]
 8007bfc:	4848      	ldr	r0, [pc, #288]	; (8007d20 <serialNoteTransaction+0x1e8>)
 8007bfe:	f7ff fd79 	bl	80076f4 <NoteFnDebug>
        return "insufficient memory";
 8007c02:	4b48      	ldr	r3, [pc, #288]	; (8007d24 <serialNoteTransaction+0x1ec>)
 8007c04:	e081      	b.n	8007d0a <serialNoteTransaction+0x1d2>
    }
    int jsonbufLen = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
    char ch = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]
    start = _GetMs();
 8007c0e:	f7ff fd95 	bl	800773c <NoteFnGetMs>
 8007c12:	4603      	mov	r3, r0
 8007c14:	613b      	str	r3, [r7, #16]
    while (ch != '\n') {
 8007c16:	e06c      	b.n	8007cf2 <serialNoteTransaction+0x1ba>
        if (!_SerialAvailable()) {
 8007c18:	f7ff fe28 	bl	800786c <NoteFnSerialAvailable>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f083 0301 	eor.w	r3, r3, #1
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d022      	beq.n	8007c6e <serialNoteTransaction+0x136>
          ch = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	75fb      	strb	r3, [r7, #23]
          if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8007c2c:	f7ff fd86 	bl	800773c <NoteFnGetMs>
 8007c30:	4602      	mov	r2, r0
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007c38:	3310      	adds	r3, #16
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d313      	bcc.n	8007c66 <serialNoteTransaction+0x12e>
            jsonbuf[jsonbufLen] = '\0';
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	4413      	add	r3, r2
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
            _Debug("received only %d-byte partial reply after %dms: %s\n", jsonbufLen, _GetMs() - start, jsonbuf);
 8007c48:	f7ff fd78 	bl	800773c <NoteFnGetMs>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad2      	subs	r2, r2, r3
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	69b9      	ldr	r1, [r7, #24]
 8007c56:	4834      	ldr	r0, [pc, #208]	; (8007d28 <serialNoteTransaction+0x1f0>)
 8007c58:	f7ff fd4c 	bl	80076f4 <NoteFnDebug>
            _Free(jsonbuf);
 8007c5c:	69f8      	ldr	r0, [r7, #28]
 8007c5e:	f7ff fda5 	bl	80077ac <NoteFnFree>
            return "transaction incomplete";
 8007c62:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <serialNoteTransaction+0x1f4>)
 8007c64:	e051      	b.n	8007d0a <serialNoteTransaction+0x1d2>
          }
          _DelayMs(1);
 8007c66:	2001      	movs	r0, #1
 8007c68:	f7ff fd78 	bl	800775c <NoteFnDelayMs>
          continue;
 8007c6c:	e041      	b.n	8007cf2 <serialNoteTransaction+0x1ba>
        }
        ch = _SerialReceive();
 8007c6e:	f7ff fe13 	bl	8007898 <NoteFnSerialReceive>
 8007c72:	4603      	mov	r3, r0
 8007c74:	75fb      	strb	r3, [r7, #23]

        // Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
        if (ch == 0 || (ch & 0x80) != 0) {
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <serialNoteTransaction+0x14c>
 8007c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da09      	bge.n	8007c98 <serialNoteTransaction+0x160>
          _Debug("invalid data received on serial port from notecard: 0x%02x\n", ch);
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	4619      	mov	r1, r3
 8007c88:	4829      	ldr	r0, [pc, #164]	; (8007d30 <serialNoteTransaction+0x1f8>)
 8007c8a:	f7ff fd33 	bl	80076f4 <NoteFnDebug>
          _Free(jsonbuf);
 8007c8e:	69f8      	ldr	r0, [r7, #28]
 8007c90:	f7ff fd8c 	bl	80077ac <NoteFnFree>
          return "serial communications error";
 8007c94:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <serialNoteTransaction+0x1fc>)
 8007c96:	e038      	b.n	8007d0a <serialNoteTransaction+0x1d2>
        }

        // Append into the json buffer
        jsonbuf[jsonbufLen++] = ch;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	61ba      	str	r2, [r7, #24]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	7dfa      	ldrb	r2, [r7, #23]
 8007ca6:	701a      	strb	r2, [r3, #0]
        if (jsonbufLen >= jsonbufAllocLen) {
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	db20      	blt.n	8007cf2 <serialNoteTransaction+0x1ba>
            jsonbufAllocLen += 512;
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007cb6:	623b      	str	r3, [r7, #32]
            char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fd5f 	bl	8007780 <NoteFnMalloc>
 8007cc2:	60f8      	str	r0, [r7, #12]
            if (jsonbufNew == NULL) {
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d108      	bne.n	8007cdc <serialNoteTransaction+0x1a4>
                _Debug("transaction: jsonbuf malloc(%d) grow failed\n", jsonbufAllocLen);
 8007cca:	6a39      	ldr	r1, [r7, #32]
 8007ccc:	481a      	ldr	r0, [pc, #104]	; (8007d38 <serialNoteTransaction+0x200>)
 8007cce:	f7ff fd11 	bl	80076f4 <NoteFnDebug>
                _Free(jsonbuf);
 8007cd2:	69f8      	ldr	r0, [r7, #28]
 8007cd4:	f7ff fd6a 	bl	80077ac <NoteFnFree>
                return "insufficient memory";
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <serialNoteTransaction+0x1ec>)
 8007cda:	e016      	b.n	8007d0a <serialNoteTransaction+0x1d2>
            }
            memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	69f9      	ldr	r1, [r7, #28]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f8ea 	bl	8007ebc <memcpy>
            _Free(jsonbuf);
 8007ce8:	69f8      	ldr	r0, [r7, #28]
 8007cea:	f7ff fd5f 	bl	80077ac <NoteFnFree>
            jsonbuf = jsonbufNew;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	61fb      	str	r3, [r7, #28]
    while (ch != '\n') {
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d18f      	bne.n	8007c18 <serialNoteTransaction+0xe0>
        }
    }

    // Null-terminate it, using the +1 space that we'd allocated in the buffer
    jsonbuf[jsonbufLen] = '\0';
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]

    // Return it
    *jsonResponse = jsonbuf;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	601a      	str	r2, [r3, #0]
    return NULL;
 8007d08:	2300      	movs	r3, #0

}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3730      	adds	r7, #48	; 0x30
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	0800891c 	.word	0x0800891c
 8007d18:	08008920 	.word	0x08008920
 8007d1c:	08008954 	.word	0x08008954
 8007d20:	08008968 	.word	0x08008968
 8007d24:	08008990 	.word	0x08008990
 8007d28:	080089a4 	.word	0x080089a4
 8007d2c:	080089d8 	.word	0x080089d8
 8007d30:	080089f0 	.word	0x080089f0
 8007d34:	08008a2c 	.word	0x08008a2c
 8007d38:	08008a48 	.word	0x08008a48

08007d3c <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0

    // Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
    _DelayMs(250);
 8007d42:	20fa      	movs	r0, #250	; 0xfa
 8007d44:	f7ff fd0a 	bl	800775c <NoteFnDelayMs>
    _SerialReset();
 8007d48:	f7ff fd5e 	bl	8007808 <NoteFnSerialReset>

    // The guaranteed behavior for robust resyncing is to send two newlines
    // and  wait for two echoed blank lines in return.
    bool notecardReady = false;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
    int retries;
    for (retries=0; retries<10; retries++) {
 8007d50:	2300      	movs	r3, #0
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	e047      	b.n	8007de6 <serialNoteReset+0xaa>

        _Debug("notecard serial reset\n");
 8007d56:	4828      	ldr	r0, [pc, #160]	; (8007df8 <serialNoteReset+0xbc>)
 8007d58:	f7ff fccc 	bl	80076f4 <NoteFnDebug>

        // Send a few newlines to the module to clean out request/response processing
        _SerialTransmit((uint8_t *)"\n\n", 2, true);
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2102      	movs	r1, #2
 8007d60:	4826      	ldr	r0, [pc, #152]	; (8007dfc <serialNoteReset+0xc0>)
 8007d62:	f7ff fd65 	bl	8007830 <NoteFnSerialTransmit>

        // Drain all serial for 500ms
        bool somethingFound = false;
 8007d66:	2300      	movs	r3, #0
 8007d68:	71fb      	strb	r3, [r7, #7]
        bool nonControlCharFound = false;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	71bb      	strb	r3, [r7, #6]
        int start = _GetMs();
 8007d6e:	f7ff fce5 	bl	800773c <NoteFnGetMs>
 8007d72:	4603      	mov	r3, r0
 8007d74:	603b      	str	r3, [r7, #0]
        while (_GetMs() < start+500) {
 8007d76:	e010      	b.n	8007d9a <serialNoteReset+0x5e>
            while (_SerialAvailable()) {
                somethingFound = true;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	71fb      	strb	r3, [r7, #7]
                if (_SerialReceive() >= ' ')
 8007d7c:	f7ff fd8c 	bl	8007898 <NoteFnSerialReceive>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b1f      	cmp	r3, #31
 8007d84:	d901      	bls.n	8007d8a <serialNoteReset+0x4e>
                    nonControlCharFound = true;
 8007d86:	2301      	movs	r3, #1
 8007d88:	71bb      	strb	r3, [r7, #6]
            while (_SerialAvailable()) {
 8007d8a:	f7ff fd6f 	bl	800786c <NoteFnSerialAvailable>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f1      	bne.n	8007d78 <serialNoteReset+0x3c>
            }
            _DelayMs(1);
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7ff fce1 	bl	800775c <NoteFnDelayMs>
        while (_GetMs() < start+500) {
 8007d9a:	f7ff fccf 	bl	800773c <NoteFnGetMs>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d3ef      	bcc.n	8007d8a <serialNoteReset+0x4e>
        }

        // If all we got back is newlines, we're ready
        if (somethingFound && !nonControlCharFound) {
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <serialNoteReset+0x86>
 8007db0:	79bb      	ldrb	r3, [r7, #6]
 8007db2:	f083 0301 	eor.w	r3, r3, #1
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <serialNoteReset+0x86>
          notecardReady = true;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
          break;
 8007dc0:	e014      	b.n	8007dec <serialNoteReset+0xb0>
        }

        _Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <serialNoteReset+0x90>
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <serialNoteReset+0xc4>)
 8007dca:	e000      	b.n	8007dce <serialNoteReset+0x92>
 8007dcc:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <serialNoteReset+0xc8>)
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fc90 	bl	80076f4 <NoteFnDebug>
        _DelayMs(500);
 8007dd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007dd8:	f7ff fcc0 	bl	800775c <NoteFnDelayMs>
        _SerialReset();
 8007ddc:	f7ff fd14 	bl	8007808 <NoteFnSerialReset>
    for (retries=0; retries<10; retries++) {
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	3301      	adds	r3, #1
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	ddb4      	ble.n	8007d56 <serialNoteReset+0x1a>

    }

    // Done
    return notecardReady;
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	08008a78 	.word	0x08008a78
 8007dfc:	08008a90 	.word	0x08008a90
 8007e00:	08008a94 	.word	0x08008a94
 8007e04:	08008ab8 	.word	0x08008ab8

08007e08 <__errno>:
 8007e08:	4b01      	ldr	r3, [pc, #4]	; (8007e10 <__errno+0x8>)
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000068 	.word	0x20000068

08007e14 <__libc_init_array>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0d      	ldr	r6, [pc, #52]	; (8007e4c <__libc_init_array+0x38>)
 8007e18:	4c0d      	ldr	r4, [pc, #52]	; (8007e50 <__libc_init_array+0x3c>)
 8007e1a:	1ba4      	subs	r4, r4, r6
 8007e1c:	10a4      	asrs	r4, r4, #2
 8007e1e:	2500      	movs	r5, #0
 8007e20:	42a5      	cmp	r5, r4
 8007e22:	d109      	bne.n	8007e38 <__libc_init_array+0x24>
 8007e24:	4e0b      	ldr	r6, [pc, #44]	; (8007e54 <__libc_init_array+0x40>)
 8007e26:	4c0c      	ldr	r4, [pc, #48]	; (8007e58 <__libc_init_array+0x44>)
 8007e28:	f000 fc9e 	bl	8008768 <_init>
 8007e2c:	1ba4      	subs	r4, r4, r6
 8007e2e:	10a4      	asrs	r4, r4, #2
 8007e30:	2500      	movs	r5, #0
 8007e32:	42a5      	cmp	r5, r4
 8007e34:	d105      	bne.n	8007e42 <__libc_init_array+0x2e>
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e3c:	4798      	blx	r3
 8007e3e:	3501      	adds	r5, #1
 8007e40:	e7ee      	b.n	8007e20 <__libc_init_array+0xc>
 8007e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e46:	4798      	blx	r3
 8007e48:	3501      	adds	r5, #1
 8007e4a:	e7f2      	b.n	8007e32 <__libc_init_array+0x1e>
 8007e4c:	08008cc0 	.word	0x08008cc0
 8007e50:	08008cc0 	.word	0x08008cc0
 8007e54:	08008cc0 	.word	0x08008cc0
 8007e58:	08008cc4 	.word	0x08008cc4

08007e5c <__locale_ctype_ptr>:
 8007e5c:	4b04      	ldr	r3, [pc, #16]	; (8007e70 <__locale_ctype_ptr+0x14>)
 8007e5e:	4a05      	ldr	r2, [pc, #20]	; (8007e74 <__locale_ctype_ptr+0x18>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	bf08      	it	eq
 8007e68:	4613      	moveq	r3, r2
 8007e6a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007e6e:	4770      	bx	lr
 8007e70:	20000068 	.word	0x20000068
 8007e74:	200000cc 	.word	0x200000cc

08007e78 <malloc>:
 8007e78:	4b02      	ldr	r3, [pc, #8]	; (8007e84 <malloc+0xc>)
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	f000 b897 	b.w	8007fb0 <_malloc_r>
 8007e82:	bf00      	nop
 8007e84:	20000068 	.word	0x20000068

08007e88 <free>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <free+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f000 b841 	b.w	8007f14 <_free_r>
 8007e92:	bf00      	nop
 8007e94:	20000068 	.word	0x20000068

08007e98 <__ascii_mbtowc>:
 8007e98:	b082      	sub	sp, #8
 8007e9a:	b901      	cbnz	r1, 8007e9e <__ascii_mbtowc+0x6>
 8007e9c:	a901      	add	r1, sp, #4
 8007e9e:	b142      	cbz	r2, 8007eb2 <__ascii_mbtowc+0x1a>
 8007ea0:	b14b      	cbz	r3, 8007eb6 <__ascii_mbtowc+0x1e>
 8007ea2:	7813      	ldrb	r3, [r2, #0]
 8007ea4:	600b      	str	r3, [r1, #0]
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	1c10      	adds	r0, r2, #0
 8007eaa:	bf18      	it	ne
 8007eac:	2001      	movne	r0, #1
 8007eae:	b002      	add	sp, #8
 8007eb0:	4770      	bx	lr
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	e7fb      	b.n	8007eae <__ascii_mbtowc+0x16>
 8007eb6:	f06f 0001 	mvn.w	r0, #1
 8007eba:	e7f8      	b.n	8007eae <__ascii_mbtowc+0x16>

08007ebc <memcpy>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	1e43      	subs	r3, r0, #1
 8007ec0:	440a      	add	r2, r1
 8007ec2:	4291      	cmp	r1, r2
 8007ec4:	d100      	bne.n	8007ec8 <memcpy+0xc>
 8007ec6:	bd10      	pop	{r4, pc}
 8007ec8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed0:	e7f7      	b.n	8007ec2 <memcpy+0x6>

08007ed2 <memmove>:
 8007ed2:	4288      	cmp	r0, r1
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	eb01 0302 	add.w	r3, r1, r2
 8007eda:	d807      	bhi.n	8007eec <memmove+0x1a>
 8007edc:	1e42      	subs	r2, r0, #1
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	d00a      	beq.n	8007ef8 <memmove+0x26>
 8007ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ee6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007eea:	e7f8      	b.n	8007ede <memmove+0xc>
 8007eec:	4283      	cmp	r3, r0
 8007eee:	d9f5      	bls.n	8007edc <memmove+0xa>
 8007ef0:	1881      	adds	r1, r0, r2
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	42d3      	cmn	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memmove+0x28>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007efe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f02:	e7f7      	b.n	8007ef4 <memmove+0x22>

08007f04 <memset>:
 8007f04:	4402      	add	r2, r0
 8007f06:	4603      	mov	r3, r0
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d100      	bne.n	8007f0e <memset+0xa>
 8007f0c:	4770      	bx	lr
 8007f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f12:	e7f9      	b.n	8007f08 <memset+0x4>

08007f14 <_free_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4605      	mov	r5, r0
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	d045      	beq.n	8007fa8 <_free_r+0x94>
 8007f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f20:	1f0c      	subs	r4, r1, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bfb8      	it	lt
 8007f26:	18e4      	addlt	r4, r4, r3
 8007f28:	f000 f913 	bl	8008152 <__malloc_lock>
 8007f2c:	4a1f      	ldr	r2, [pc, #124]	; (8007fac <_free_r+0x98>)
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	4610      	mov	r0, r2
 8007f32:	b933      	cbnz	r3, 8007f42 <_free_r+0x2e>
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6014      	str	r4, [r2, #0]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f3e:	f000 b909 	b.w	8008154 <__malloc_unlock>
 8007f42:	42a3      	cmp	r3, r4
 8007f44:	d90c      	bls.n	8007f60 <_free_r+0x4c>
 8007f46:	6821      	ldr	r1, [r4, #0]
 8007f48:	1862      	adds	r2, r4, r1
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	bf04      	itt	eq
 8007f4e:	681a      	ldreq	r2, [r3, #0]
 8007f50:	685b      	ldreq	r3, [r3, #4]
 8007f52:	6063      	str	r3, [r4, #4]
 8007f54:	bf04      	itt	eq
 8007f56:	1852      	addeq	r2, r2, r1
 8007f58:	6022      	streq	r2, [r4, #0]
 8007f5a:	6004      	str	r4, [r0, #0]
 8007f5c:	e7ec      	b.n	8007f38 <_free_r+0x24>
 8007f5e:	4613      	mov	r3, r2
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	b10a      	cbz	r2, 8007f68 <_free_r+0x54>
 8007f64:	42a2      	cmp	r2, r4
 8007f66:	d9fa      	bls.n	8007f5e <_free_r+0x4a>
 8007f68:	6819      	ldr	r1, [r3, #0]
 8007f6a:	1858      	adds	r0, r3, r1
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	d10b      	bne.n	8007f88 <_free_r+0x74>
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	4401      	add	r1, r0
 8007f74:	1858      	adds	r0, r3, r1
 8007f76:	4282      	cmp	r2, r0
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	d1dd      	bne.n	8007f38 <_free_r+0x24>
 8007f7c:	6810      	ldr	r0, [r2, #0]
 8007f7e:	6852      	ldr	r2, [r2, #4]
 8007f80:	605a      	str	r2, [r3, #4]
 8007f82:	4401      	add	r1, r0
 8007f84:	6019      	str	r1, [r3, #0]
 8007f86:	e7d7      	b.n	8007f38 <_free_r+0x24>
 8007f88:	d902      	bls.n	8007f90 <_free_r+0x7c>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	e7d3      	b.n	8007f38 <_free_r+0x24>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428a      	cmp	r2, r1
 8007f96:	bf04      	itt	eq
 8007f98:	6811      	ldreq	r1, [r2, #0]
 8007f9a:	6852      	ldreq	r2, [r2, #4]
 8007f9c:	6062      	str	r2, [r4, #4]
 8007f9e:	bf04      	itt	eq
 8007fa0:	1809      	addeq	r1, r1, r0
 8007fa2:	6021      	streq	r1, [r4, #0]
 8007fa4:	605c      	str	r4, [r3, #4]
 8007fa6:	e7c7      	b.n	8007f38 <_free_r+0x24>
 8007fa8:	bd38      	pop	{r3, r4, r5, pc}
 8007faa:	bf00      	nop
 8007fac:	200004bc 	.word	0x200004bc

08007fb0 <_malloc_r>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	1ccd      	adds	r5, r1, #3
 8007fb4:	f025 0503 	bic.w	r5, r5, #3
 8007fb8:	3508      	adds	r5, #8
 8007fba:	2d0c      	cmp	r5, #12
 8007fbc:	bf38      	it	cc
 8007fbe:	250c      	movcc	r5, #12
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	db01      	blt.n	8007fca <_malloc_r+0x1a>
 8007fc6:	42a9      	cmp	r1, r5
 8007fc8:	d903      	bls.n	8007fd2 <_malloc_r+0x22>
 8007fca:	230c      	movs	r3, #12
 8007fcc:	6033      	str	r3, [r6, #0]
 8007fce:	2000      	movs	r0, #0
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
 8007fd2:	f000 f8be 	bl	8008152 <__malloc_lock>
 8007fd6:	4a21      	ldr	r2, [pc, #132]	; (800805c <_malloc_r+0xac>)
 8007fd8:	6814      	ldr	r4, [r2, #0]
 8007fda:	4621      	mov	r1, r4
 8007fdc:	b991      	cbnz	r1, 8008004 <_malloc_r+0x54>
 8007fde:	4c20      	ldr	r4, [pc, #128]	; (8008060 <_malloc_r+0xb0>)
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	b91b      	cbnz	r3, 8007fec <_malloc_r+0x3c>
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f000 f83d 	bl	8008064 <_sbrk_r>
 8007fea:	6020      	str	r0, [r4, #0]
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f838 	bl	8008064 <_sbrk_r>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d124      	bne.n	8008042 <_malloc_r+0x92>
 8007ff8:	230c      	movs	r3, #12
 8007ffa:	6033      	str	r3, [r6, #0]
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f000 f8a9 	bl	8008154 <__malloc_unlock>
 8008002:	e7e4      	b.n	8007fce <_malloc_r+0x1e>
 8008004:	680b      	ldr	r3, [r1, #0]
 8008006:	1b5b      	subs	r3, r3, r5
 8008008:	d418      	bmi.n	800803c <_malloc_r+0x8c>
 800800a:	2b0b      	cmp	r3, #11
 800800c:	d90f      	bls.n	800802e <_malloc_r+0x7e>
 800800e:	600b      	str	r3, [r1, #0]
 8008010:	50cd      	str	r5, [r1, r3]
 8008012:	18cc      	adds	r4, r1, r3
 8008014:	4630      	mov	r0, r6
 8008016:	f000 f89d 	bl	8008154 <__malloc_unlock>
 800801a:	f104 000b 	add.w	r0, r4, #11
 800801e:	1d23      	adds	r3, r4, #4
 8008020:	f020 0007 	bic.w	r0, r0, #7
 8008024:	1ac3      	subs	r3, r0, r3
 8008026:	d0d3      	beq.n	8007fd0 <_malloc_r+0x20>
 8008028:	425a      	negs	r2, r3
 800802a:	50e2      	str	r2, [r4, r3]
 800802c:	e7d0      	b.n	8007fd0 <_malloc_r+0x20>
 800802e:	428c      	cmp	r4, r1
 8008030:	684b      	ldr	r3, [r1, #4]
 8008032:	bf16      	itet	ne
 8008034:	6063      	strne	r3, [r4, #4]
 8008036:	6013      	streq	r3, [r2, #0]
 8008038:	460c      	movne	r4, r1
 800803a:	e7eb      	b.n	8008014 <_malloc_r+0x64>
 800803c:	460c      	mov	r4, r1
 800803e:	6849      	ldr	r1, [r1, #4]
 8008040:	e7cc      	b.n	8007fdc <_malloc_r+0x2c>
 8008042:	1cc4      	adds	r4, r0, #3
 8008044:	f024 0403 	bic.w	r4, r4, #3
 8008048:	42a0      	cmp	r0, r4
 800804a:	d005      	beq.n	8008058 <_malloc_r+0xa8>
 800804c:	1a21      	subs	r1, r4, r0
 800804e:	4630      	mov	r0, r6
 8008050:	f000 f808 	bl	8008064 <_sbrk_r>
 8008054:	3001      	adds	r0, #1
 8008056:	d0cf      	beq.n	8007ff8 <_malloc_r+0x48>
 8008058:	6025      	str	r5, [r4, #0]
 800805a:	e7db      	b.n	8008014 <_malloc_r+0x64>
 800805c:	200004bc 	.word	0x200004bc
 8008060:	200004c0 	.word	0x200004c0

08008064 <_sbrk_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4c06      	ldr	r4, [pc, #24]	; (8008080 <_sbrk_r+0x1c>)
 8008068:	2300      	movs	r3, #0
 800806a:	4605      	mov	r5, r0
 800806c:	4608      	mov	r0, r1
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	f7fc fde4 	bl	8004c3c <_sbrk>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_sbrk_r+0x1a>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	b103      	cbz	r3, 800807e <_sbrk_r+0x1a>
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	200005cc 	.word	0x200005cc

08008084 <strchr>:
 8008084:	b2c9      	uxtb	r1, r1
 8008086:	4603      	mov	r3, r0
 8008088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808c:	b11a      	cbz	r2, 8008096 <strchr+0x12>
 800808e:	428a      	cmp	r2, r1
 8008090:	d1f9      	bne.n	8008086 <strchr+0x2>
 8008092:	4618      	mov	r0, r3
 8008094:	4770      	bx	lr
 8008096:	2900      	cmp	r1, #0
 8008098:	bf18      	it	ne
 800809a:	2300      	movne	r3, #0
 800809c:	e7f9      	b.n	8008092 <strchr+0xe>

0800809e <strncmp>:
 800809e:	b510      	push	{r4, lr}
 80080a0:	b16a      	cbz	r2, 80080be <strncmp+0x20>
 80080a2:	3901      	subs	r1, #1
 80080a4:	1884      	adds	r4, r0, r2
 80080a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d103      	bne.n	80080ba <strncmp+0x1c>
 80080b2:	42a0      	cmp	r0, r4
 80080b4:	d001      	beq.n	80080ba <strncmp+0x1c>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f5      	bne.n	80080a6 <strncmp+0x8>
 80080ba:	1a98      	subs	r0, r3, r2
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	4610      	mov	r0, r2
 80080c0:	e7fc      	b.n	80080bc <strncmp+0x1e>

080080c2 <_vsniprintf_r>:
 80080c2:	b530      	push	{r4, r5, lr}
 80080c4:	1e14      	subs	r4, r2, #0
 80080c6:	4605      	mov	r5, r0
 80080c8:	b09b      	sub	sp, #108	; 0x6c
 80080ca:	4618      	mov	r0, r3
 80080cc:	da05      	bge.n	80080da <_vsniprintf_r+0x18>
 80080ce:	238b      	movs	r3, #139	; 0x8b
 80080d0:	602b      	str	r3, [r5, #0]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	b01b      	add	sp, #108	; 0x6c
 80080d8:	bd30      	pop	{r4, r5, pc}
 80080da:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080de:	f8ad 300c 	strh.w	r3, [sp, #12]
 80080e2:	bf14      	ite	ne
 80080e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080e8:	4623      	moveq	r3, r4
 80080ea:	9302      	str	r3, [sp, #8]
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080f2:	9100      	str	r1, [sp, #0]
 80080f4:	9104      	str	r1, [sp, #16]
 80080f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80080fa:	4602      	mov	r2, r0
 80080fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80080fe:	4669      	mov	r1, sp
 8008100:	4628      	mov	r0, r5
 8008102:	f000 f883 	bl	800820c <_svfiprintf_r>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	bfbc      	itt	lt
 800810a:	238b      	movlt	r3, #139	; 0x8b
 800810c:	602b      	strlt	r3, [r5, #0]
 800810e:	2c00      	cmp	r4, #0
 8008110:	d0e1      	beq.n	80080d6 <_vsniprintf_r+0x14>
 8008112:	9b00      	ldr	r3, [sp, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
 8008118:	e7dd      	b.n	80080d6 <_vsniprintf_r+0x14>
	...

0800811c <vsniprintf>:
 800811c:	b507      	push	{r0, r1, r2, lr}
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4613      	mov	r3, r2
 8008122:	460a      	mov	r2, r1
 8008124:	4601      	mov	r1, r0
 8008126:	4803      	ldr	r0, [pc, #12]	; (8008134 <vsniprintf+0x18>)
 8008128:	6800      	ldr	r0, [r0, #0]
 800812a:	f7ff ffca 	bl	80080c2 <_vsniprintf_r>
 800812e:	b003      	add	sp, #12
 8008130:	f85d fb04 	ldr.w	pc, [sp], #4
 8008134:	20000068 	.word	0x20000068

08008138 <__ascii_wctomb>:
 8008138:	b149      	cbz	r1, 800814e <__ascii_wctomb+0x16>
 800813a:	2aff      	cmp	r2, #255	; 0xff
 800813c:	bf85      	ittet	hi
 800813e:	238a      	movhi	r3, #138	; 0x8a
 8008140:	6003      	strhi	r3, [r0, #0]
 8008142:	700a      	strbls	r2, [r1, #0]
 8008144:	f04f 30ff 	movhi.w	r0, #4294967295
 8008148:	bf98      	it	ls
 800814a:	2001      	movls	r0, #1
 800814c:	4770      	bx	lr
 800814e:	4608      	mov	r0, r1
 8008150:	4770      	bx	lr

08008152 <__malloc_lock>:
 8008152:	4770      	bx	lr

08008154 <__malloc_unlock>:
 8008154:	4770      	bx	lr

08008156 <__ssputs_r>:
 8008156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800815a:	688e      	ldr	r6, [r1, #8]
 800815c:	429e      	cmp	r6, r3
 800815e:	4682      	mov	sl, r0
 8008160:	460c      	mov	r4, r1
 8008162:	4690      	mov	r8, r2
 8008164:	4699      	mov	r9, r3
 8008166:	d837      	bhi.n	80081d8 <__ssputs_r+0x82>
 8008168:	898a      	ldrh	r2, [r1, #12]
 800816a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800816e:	d031      	beq.n	80081d4 <__ssputs_r+0x7e>
 8008170:	6825      	ldr	r5, [r4, #0]
 8008172:	6909      	ldr	r1, [r1, #16]
 8008174:	1a6f      	subs	r7, r5, r1
 8008176:	6965      	ldr	r5, [r4, #20]
 8008178:	2302      	movs	r3, #2
 800817a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800817e:	fb95 f5f3 	sdiv	r5, r5, r3
 8008182:	f109 0301 	add.w	r3, r9, #1
 8008186:	443b      	add	r3, r7
 8008188:	429d      	cmp	r5, r3
 800818a:	bf38      	it	cc
 800818c:	461d      	movcc	r5, r3
 800818e:	0553      	lsls	r3, r2, #21
 8008190:	d530      	bpl.n	80081f4 <__ssputs_r+0x9e>
 8008192:	4629      	mov	r1, r5
 8008194:	f7ff ff0c 	bl	8007fb0 <_malloc_r>
 8008198:	4606      	mov	r6, r0
 800819a:	b950      	cbnz	r0, 80081b2 <__ssputs_r+0x5c>
 800819c:	230c      	movs	r3, #12
 800819e:	f8ca 3000 	str.w	r3, [sl]
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a8:	81a3      	strh	r3, [r4, #12]
 80081aa:	f04f 30ff 	mov.w	r0, #4294967295
 80081ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b2:	463a      	mov	r2, r7
 80081b4:	6921      	ldr	r1, [r4, #16]
 80081b6:	f7ff fe81 	bl	8007ebc <memcpy>
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	6126      	str	r6, [r4, #16]
 80081c8:	6165      	str	r5, [r4, #20]
 80081ca:	443e      	add	r6, r7
 80081cc:	1bed      	subs	r5, r5, r7
 80081ce:	6026      	str	r6, [r4, #0]
 80081d0:	60a5      	str	r5, [r4, #8]
 80081d2:	464e      	mov	r6, r9
 80081d4:	454e      	cmp	r6, r9
 80081d6:	d900      	bls.n	80081da <__ssputs_r+0x84>
 80081d8:	464e      	mov	r6, r9
 80081da:	4632      	mov	r2, r6
 80081dc:	4641      	mov	r1, r8
 80081de:	6820      	ldr	r0, [r4, #0]
 80081e0:	f7ff fe77 	bl	8007ed2 <memmove>
 80081e4:	68a3      	ldr	r3, [r4, #8]
 80081e6:	1b9b      	subs	r3, r3, r6
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	441e      	add	r6, r3
 80081ee:	6026      	str	r6, [r4, #0]
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7dc      	b.n	80081ae <__ssputs_r+0x58>
 80081f4:	462a      	mov	r2, r5
 80081f6:	f000 fa89 	bl	800870c <_realloc_r>
 80081fa:	4606      	mov	r6, r0
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d1e2      	bne.n	80081c6 <__ssputs_r+0x70>
 8008200:	6921      	ldr	r1, [r4, #16]
 8008202:	4650      	mov	r0, sl
 8008204:	f7ff fe86 	bl	8007f14 <_free_r>
 8008208:	e7c8      	b.n	800819c <__ssputs_r+0x46>
	...

0800820c <_svfiprintf_r>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	461d      	mov	r5, r3
 8008212:	898b      	ldrh	r3, [r1, #12]
 8008214:	061f      	lsls	r7, r3, #24
 8008216:	b09d      	sub	sp, #116	; 0x74
 8008218:	4680      	mov	r8, r0
 800821a:	460c      	mov	r4, r1
 800821c:	4616      	mov	r6, r2
 800821e:	d50f      	bpl.n	8008240 <_svfiprintf_r+0x34>
 8008220:	690b      	ldr	r3, [r1, #16]
 8008222:	b96b      	cbnz	r3, 8008240 <_svfiprintf_r+0x34>
 8008224:	2140      	movs	r1, #64	; 0x40
 8008226:	f7ff fec3 	bl	8007fb0 <_malloc_r>
 800822a:	6020      	str	r0, [r4, #0]
 800822c:	6120      	str	r0, [r4, #16]
 800822e:	b928      	cbnz	r0, 800823c <_svfiprintf_r+0x30>
 8008230:	230c      	movs	r3, #12
 8008232:	f8c8 3000 	str.w	r3, [r8]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	e0c8      	b.n	80083ce <_svfiprintf_r+0x1c2>
 800823c:	2340      	movs	r3, #64	; 0x40
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	2300      	movs	r3, #0
 8008242:	9309      	str	r3, [sp, #36]	; 0x24
 8008244:	2320      	movs	r3, #32
 8008246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800824a:	2330      	movs	r3, #48	; 0x30
 800824c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008250:	9503      	str	r5, [sp, #12]
 8008252:	f04f 0b01 	mov.w	fp, #1
 8008256:	4637      	mov	r7, r6
 8008258:	463d      	mov	r5, r7
 800825a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800825e:	b10b      	cbz	r3, 8008264 <_svfiprintf_r+0x58>
 8008260:	2b25      	cmp	r3, #37	; 0x25
 8008262:	d13e      	bne.n	80082e2 <_svfiprintf_r+0xd6>
 8008264:	ebb7 0a06 	subs.w	sl, r7, r6
 8008268:	d00b      	beq.n	8008282 <_svfiprintf_r+0x76>
 800826a:	4653      	mov	r3, sl
 800826c:	4632      	mov	r2, r6
 800826e:	4621      	mov	r1, r4
 8008270:	4640      	mov	r0, r8
 8008272:	f7ff ff70 	bl	8008156 <__ssputs_r>
 8008276:	3001      	adds	r0, #1
 8008278:	f000 80a4 	beq.w	80083c4 <_svfiprintf_r+0x1b8>
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	4453      	add	r3, sl
 8008280:	9309      	str	r3, [sp, #36]	; 0x24
 8008282:	783b      	ldrb	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 809d 	beq.w	80083c4 <_svfiprintf_r+0x1b8>
 800828a:	2300      	movs	r3, #0
 800828c:	f04f 32ff 	mov.w	r2, #4294967295
 8008290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008294:	9304      	str	r3, [sp, #16]
 8008296:	9307      	str	r3, [sp, #28]
 8008298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800829c:	931a      	str	r3, [sp, #104]	; 0x68
 800829e:	462f      	mov	r7, r5
 80082a0:	2205      	movs	r2, #5
 80082a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082a6:	4850      	ldr	r0, [pc, #320]	; (80083e8 <_svfiprintf_r+0x1dc>)
 80082a8:	f7f7 ffaa 	bl	8000200 <memchr>
 80082ac:	9b04      	ldr	r3, [sp, #16]
 80082ae:	b9d0      	cbnz	r0, 80082e6 <_svfiprintf_r+0xda>
 80082b0:	06d9      	lsls	r1, r3, #27
 80082b2:	bf44      	itt	mi
 80082b4:	2220      	movmi	r2, #32
 80082b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082ba:	071a      	lsls	r2, r3, #28
 80082bc:	bf44      	itt	mi
 80082be:	222b      	movmi	r2, #43	; 0x2b
 80082c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082c4:	782a      	ldrb	r2, [r5, #0]
 80082c6:	2a2a      	cmp	r2, #42	; 0x2a
 80082c8:	d015      	beq.n	80082f6 <_svfiprintf_r+0xea>
 80082ca:	9a07      	ldr	r2, [sp, #28]
 80082cc:	462f      	mov	r7, r5
 80082ce:	2000      	movs	r0, #0
 80082d0:	250a      	movs	r5, #10
 80082d2:	4639      	mov	r1, r7
 80082d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082d8:	3b30      	subs	r3, #48	; 0x30
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d94d      	bls.n	800837a <_svfiprintf_r+0x16e>
 80082de:	b1b8      	cbz	r0, 8008310 <_svfiprintf_r+0x104>
 80082e0:	e00f      	b.n	8008302 <_svfiprintf_r+0xf6>
 80082e2:	462f      	mov	r7, r5
 80082e4:	e7b8      	b.n	8008258 <_svfiprintf_r+0x4c>
 80082e6:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <_svfiprintf_r+0x1dc>)
 80082e8:	1a80      	subs	r0, r0, r2
 80082ea:	fa0b f000 	lsl.w	r0, fp, r0
 80082ee:	4318      	orrs	r0, r3
 80082f0:	9004      	str	r0, [sp, #16]
 80082f2:	463d      	mov	r5, r7
 80082f4:	e7d3      	b.n	800829e <_svfiprintf_r+0x92>
 80082f6:	9a03      	ldr	r2, [sp, #12]
 80082f8:	1d11      	adds	r1, r2, #4
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	9103      	str	r1, [sp, #12]
 80082fe:	2a00      	cmp	r2, #0
 8008300:	db01      	blt.n	8008306 <_svfiprintf_r+0xfa>
 8008302:	9207      	str	r2, [sp, #28]
 8008304:	e004      	b.n	8008310 <_svfiprintf_r+0x104>
 8008306:	4252      	negs	r2, r2
 8008308:	f043 0302 	orr.w	r3, r3, #2
 800830c:	9207      	str	r2, [sp, #28]
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	783b      	ldrb	r3, [r7, #0]
 8008312:	2b2e      	cmp	r3, #46	; 0x2e
 8008314:	d10c      	bne.n	8008330 <_svfiprintf_r+0x124>
 8008316:	787b      	ldrb	r3, [r7, #1]
 8008318:	2b2a      	cmp	r3, #42	; 0x2a
 800831a:	d133      	bne.n	8008384 <_svfiprintf_r+0x178>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	1d1a      	adds	r2, r3, #4
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	9203      	str	r2, [sp, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfb8      	it	lt
 8008328:	f04f 33ff 	movlt.w	r3, #4294967295
 800832c:	3702      	adds	r7, #2
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	4d2e      	ldr	r5, [pc, #184]	; (80083ec <_svfiprintf_r+0x1e0>)
 8008332:	7839      	ldrb	r1, [r7, #0]
 8008334:	2203      	movs	r2, #3
 8008336:	4628      	mov	r0, r5
 8008338:	f7f7 ff62 	bl	8000200 <memchr>
 800833c:	b138      	cbz	r0, 800834e <_svfiprintf_r+0x142>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	1b40      	subs	r0, r0, r5
 8008342:	fa03 f000 	lsl.w	r0, r3, r0
 8008346:	9b04      	ldr	r3, [sp, #16]
 8008348:	4303      	orrs	r3, r0
 800834a:	3701      	adds	r7, #1
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	7839      	ldrb	r1, [r7, #0]
 8008350:	4827      	ldr	r0, [pc, #156]	; (80083f0 <_svfiprintf_r+0x1e4>)
 8008352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008356:	2206      	movs	r2, #6
 8008358:	1c7e      	adds	r6, r7, #1
 800835a:	f7f7 ff51 	bl	8000200 <memchr>
 800835e:	2800      	cmp	r0, #0
 8008360:	d038      	beq.n	80083d4 <_svfiprintf_r+0x1c8>
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <_svfiprintf_r+0x1e8>)
 8008364:	bb13      	cbnz	r3, 80083ac <_svfiprintf_r+0x1a0>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3307      	adds	r3, #7
 800836a:	f023 0307 	bic.w	r3, r3, #7
 800836e:	3308      	adds	r3, #8
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	444b      	add	r3, r9
 8008376:	9309      	str	r3, [sp, #36]	; 0x24
 8008378:	e76d      	b.n	8008256 <_svfiprintf_r+0x4a>
 800837a:	fb05 3202 	mla	r2, r5, r2, r3
 800837e:	2001      	movs	r0, #1
 8008380:	460f      	mov	r7, r1
 8008382:	e7a6      	b.n	80082d2 <_svfiprintf_r+0xc6>
 8008384:	2300      	movs	r3, #0
 8008386:	3701      	adds	r7, #1
 8008388:	9305      	str	r3, [sp, #20]
 800838a:	4619      	mov	r1, r3
 800838c:	250a      	movs	r5, #10
 800838e:	4638      	mov	r0, r7
 8008390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008394:	3a30      	subs	r2, #48	; 0x30
 8008396:	2a09      	cmp	r2, #9
 8008398:	d903      	bls.n	80083a2 <_svfiprintf_r+0x196>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0c8      	beq.n	8008330 <_svfiprintf_r+0x124>
 800839e:	9105      	str	r1, [sp, #20]
 80083a0:	e7c6      	b.n	8008330 <_svfiprintf_r+0x124>
 80083a2:	fb05 2101 	mla	r1, r5, r1, r2
 80083a6:	2301      	movs	r3, #1
 80083a8:	4607      	mov	r7, r0
 80083aa:	e7f0      	b.n	800838e <_svfiprintf_r+0x182>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4622      	mov	r2, r4
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <_svfiprintf_r+0x1ec>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4640      	mov	r0, r8
 80083b8:	f3af 8000 	nop.w
 80083bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083c0:	4681      	mov	r9, r0
 80083c2:	d1d6      	bne.n	8008372 <_svfiprintf_r+0x166>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	065b      	lsls	r3, r3, #25
 80083c8:	f53f af35 	bmi.w	8008236 <_svfiprintf_r+0x2a>
 80083cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ce:	b01d      	add	sp, #116	; 0x74
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	ab03      	add	r3, sp, #12
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4622      	mov	r2, r4
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <_svfiprintf_r+0x1ec>)
 80083dc:	a904      	add	r1, sp, #16
 80083de:	4640      	mov	r0, r8
 80083e0:	f000 f882 	bl	80084e8 <_printf_i>
 80083e4:	e7ea      	b.n	80083bc <_svfiprintf_r+0x1b0>
 80083e6:	bf00      	nop
 80083e8:	08008c83 	.word	0x08008c83
 80083ec:	08008c89 	.word	0x08008c89
 80083f0:	08008c8d 	.word	0x08008c8d
 80083f4:	00000000 	.word	0x00000000
 80083f8:	08008157 	.word	0x08008157

080083fc <_printf_common>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	4691      	mov	r9, r2
 8008402:	461f      	mov	r7, r3
 8008404:	688a      	ldr	r2, [r1, #8]
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800840c:	4293      	cmp	r3, r2
 800840e:	bfb8      	it	lt
 8008410:	4613      	movlt	r3, r2
 8008412:	f8c9 3000 	str.w	r3, [r9]
 8008416:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800841a:	4606      	mov	r6, r0
 800841c:	460c      	mov	r4, r1
 800841e:	b112      	cbz	r2, 8008426 <_printf_common+0x2a>
 8008420:	3301      	adds	r3, #1
 8008422:	f8c9 3000 	str.w	r3, [r9]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	0699      	lsls	r1, r3, #26
 800842a:	bf42      	ittt	mi
 800842c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008430:	3302      	addmi	r3, #2
 8008432:	f8c9 3000 	strmi.w	r3, [r9]
 8008436:	6825      	ldr	r5, [r4, #0]
 8008438:	f015 0506 	ands.w	r5, r5, #6
 800843c:	d107      	bne.n	800844e <_printf_common+0x52>
 800843e:	f104 0a19 	add.w	sl, r4, #25
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	f8d9 2000 	ldr.w	r2, [r9]
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	42ab      	cmp	r3, r5
 800844c:	dc28      	bgt.n	80084a0 <_printf_common+0xa4>
 800844e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	3300      	adds	r3, #0
 8008456:	bf18      	it	ne
 8008458:	2301      	movne	r3, #1
 800845a:	0692      	lsls	r2, r2, #26
 800845c:	d42d      	bmi.n	80084ba <_printf_common+0xbe>
 800845e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008462:	4639      	mov	r1, r7
 8008464:	4630      	mov	r0, r6
 8008466:	47c0      	blx	r8
 8008468:	3001      	adds	r0, #1
 800846a:	d020      	beq.n	80084ae <_printf_common+0xb2>
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	68e5      	ldr	r5, [r4, #12]
 8008470:	f8d9 2000 	ldr.w	r2, [r9]
 8008474:	f003 0306 	and.w	r3, r3, #6
 8008478:	2b04      	cmp	r3, #4
 800847a:	bf08      	it	eq
 800847c:	1aad      	subeq	r5, r5, r2
 800847e:	68a3      	ldr	r3, [r4, #8]
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	bf0c      	ite	eq
 8008484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008488:	2500      	movne	r5, #0
 800848a:	4293      	cmp	r3, r2
 800848c:	bfc4      	itt	gt
 800848e:	1a9b      	subgt	r3, r3, r2
 8008490:	18ed      	addgt	r5, r5, r3
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	341a      	adds	r4, #26
 8008498:	454d      	cmp	r5, r9
 800849a:	d11a      	bne.n	80084d2 <_printf_common+0xd6>
 800849c:	2000      	movs	r0, #0
 800849e:	e008      	b.n	80084b2 <_printf_common+0xb6>
 80084a0:	2301      	movs	r3, #1
 80084a2:	4652      	mov	r2, sl
 80084a4:	4639      	mov	r1, r7
 80084a6:	4630      	mov	r0, r6
 80084a8:	47c0      	blx	r8
 80084aa:	3001      	adds	r0, #1
 80084ac:	d103      	bne.n	80084b6 <_printf_common+0xba>
 80084ae:	f04f 30ff 	mov.w	r0, #4294967295
 80084b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b6:	3501      	adds	r5, #1
 80084b8:	e7c3      	b.n	8008442 <_printf_common+0x46>
 80084ba:	18e1      	adds	r1, r4, r3
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	2030      	movs	r0, #48	; 0x30
 80084c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084c4:	4422      	add	r2, r4
 80084c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084ce:	3302      	adds	r3, #2
 80084d0:	e7c5      	b.n	800845e <_printf_common+0x62>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4622      	mov	r2, r4
 80084d6:	4639      	mov	r1, r7
 80084d8:	4630      	mov	r0, r6
 80084da:	47c0      	blx	r8
 80084dc:	3001      	adds	r0, #1
 80084de:	d0e6      	beq.n	80084ae <_printf_common+0xb2>
 80084e0:	f109 0901 	add.w	r9, r9, #1
 80084e4:	e7d8      	b.n	8008498 <_printf_common+0x9c>
	...

080084e8 <_printf_i>:
 80084e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084f0:	460c      	mov	r4, r1
 80084f2:	7e09      	ldrb	r1, [r1, #24]
 80084f4:	b085      	sub	sp, #20
 80084f6:	296e      	cmp	r1, #110	; 0x6e
 80084f8:	4617      	mov	r7, r2
 80084fa:	4606      	mov	r6, r0
 80084fc:	4698      	mov	r8, r3
 80084fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008500:	f000 80b3 	beq.w	800866a <_printf_i+0x182>
 8008504:	d822      	bhi.n	800854c <_printf_i+0x64>
 8008506:	2963      	cmp	r1, #99	; 0x63
 8008508:	d036      	beq.n	8008578 <_printf_i+0x90>
 800850a:	d80a      	bhi.n	8008522 <_printf_i+0x3a>
 800850c:	2900      	cmp	r1, #0
 800850e:	f000 80b9 	beq.w	8008684 <_printf_i+0x19c>
 8008512:	2958      	cmp	r1, #88	; 0x58
 8008514:	f000 8083 	beq.w	800861e <_printf_i+0x136>
 8008518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800851c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008520:	e032      	b.n	8008588 <_printf_i+0xa0>
 8008522:	2964      	cmp	r1, #100	; 0x64
 8008524:	d001      	beq.n	800852a <_printf_i+0x42>
 8008526:	2969      	cmp	r1, #105	; 0x69
 8008528:	d1f6      	bne.n	8008518 <_printf_i+0x30>
 800852a:	6820      	ldr	r0, [r4, #0]
 800852c:	6813      	ldr	r3, [r2, #0]
 800852e:	0605      	lsls	r5, r0, #24
 8008530:	f103 0104 	add.w	r1, r3, #4
 8008534:	d52a      	bpl.n	800858c <_printf_i+0xa4>
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da03      	bge.n	8008546 <_printf_i+0x5e>
 800853e:	222d      	movs	r2, #45	; 0x2d
 8008540:	425b      	negs	r3, r3
 8008542:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008546:	486f      	ldr	r0, [pc, #444]	; (8008704 <_printf_i+0x21c>)
 8008548:	220a      	movs	r2, #10
 800854a:	e039      	b.n	80085c0 <_printf_i+0xd8>
 800854c:	2973      	cmp	r1, #115	; 0x73
 800854e:	f000 809d 	beq.w	800868c <_printf_i+0x1a4>
 8008552:	d808      	bhi.n	8008566 <_printf_i+0x7e>
 8008554:	296f      	cmp	r1, #111	; 0x6f
 8008556:	d020      	beq.n	800859a <_printf_i+0xb2>
 8008558:	2970      	cmp	r1, #112	; 0x70
 800855a:	d1dd      	bne.n	8008518 <_printf_i+0x30>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	f043 0320 	orr.w	r3, r3, #32
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e003      	b.n	800856e <_printf_i+0x86>
 8008566:	2975      	cmp	r1, #117	; 0x75
 8008568:	d017      	beq.n	800859a <_printf_i+0xb2>
 800856a:	2978      	cmp	r1, #120	; 0x78
 800856c:	d1d4      	bne.n	8008518 <_printf_i+0x30>
 800856e:	2378      	movs	r3, #120	; 0x78
 8008570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008574:	4864      	ldr	r0, [pc, #400]	; (8008708 <_printf_i+0x220>)
 8008576:	e055      	b.n	8008624 <_printf_i+0x13c>
 8008578:	6813      	ldr	r3, [r2, #0]
 800857a:	1d19      	adds	r1, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6011      	str	r1, [r2, #0]
 8008580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008588:	2301      	movs	r3, #1
 800858a:	e08c      	b.n	80086a6 <_printf_i+0x1be>
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6011      	str	r1, [r2, #0]
 8008590:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008594:	bf18      	it	ne
 8008596:	b21b      	sxthne	r3, r3
 8008598:	e7cf      	b.n	800853a <_printf_i+0x52>
 800859a:	6813      	ldr	r3, [r2, #0]
 800859c:	6825      	ldr	r5, [r4, #0]
 800859e:	1d18      	adds	r0, r3, #4
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	0628      	lsls	r0, r5, #24
 80085a4:	d501      	bpl.n	80085aa <_printf_i+0xc2>
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	e002      	b.n	80085b0 <_printf_i+0xc8>
 80085aa:	0668      	lsls	r0, r5, #25
 80085ac:	d5fb      	bpl.n	80085a6 <_printf_i+0xbe>
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	4854      	ldr	r0, [pc, #336]	; (8008704 <_printf_i+0x21c>)
 80085b2:	296f      	cmp	r1, #111	; 0x6f
 80085b4:	bf14      	ite	ne
 80085b6:	220a      	movne	r2, #10
 80085b8:	2208      	moveq	r2, #8
 80085ba:	2100      	movs	r1, #0
 80085bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c0:	6865      	ldr	r5, [r4, #4]
 80085c2:	60a5      	str	r5, [r4, #8]
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	f2c0 8095 	blt.w	80086f4 <_printf_i+0x20c>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	f021 0104 	bic.w	r1, r1, #4
 80085d0:	6021      	str	r1, [r4, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d13d      	bne.n	8008652 <_printf_i+0x16a>
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	f040 808e 	bne.w	80086f8 <_printf_i+0x210>
 80085dc:	4665      	mov	r5, ip
 80085de:	2a08      	cmp	r2, #8
 80085e0:	d10b      	bne.n	80085fa <_printf_i+0x112>
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	07db      	lsls	r3, r3, #31
 80085e6:	d508      	bpl.n	80085fa <_printf_i+0x112>
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	bfde      	ittt	le
 80085f0:	2330      	movle	r3, #48	; 0x30
 80085f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085fa:	ebac 0305 	sub.w	r3, ip, r5
 80085fe:	6123      	str	r3, [r4, #16]
 8008600:	f8cd 8000 	str.w	r8, [sp]
 8008604:	463b      	mov	r3, r7
 8008606:	aa03      	add	r2, sp, #12
 8008608:	4621      	mov	r1, r4
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff fef6 	bl	80083fc <_printf_common>
 8008610:	3001      	adds	r0, #1
 8008612:	d14d      	bne.n	80086b0 <_printf_i+0x1c8>
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	b005      	add	sp, #20
 800861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861e:	4839      	ldr	r0, [pc, #228]	; (8008704 <_printf_i+0x21c>)
 8008620:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008624:	6813      	ldr	r3, [r2, #0]
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	1d1d      	adds	r5, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6015      	str	r5, [r2, #0]
 800862e:	060a      	lsls	r2, r1, #24
 8008630:	d50b      	bpl.n	800864a <_printf_i+0x162>
 8008632:	07ca      	lsls	r2, r1, #31
 8008634:	bf44      	itt	mi
 8008636:	f041 0120 	orrmi.w	r1, r1, #32
 800863a:	6021      	strmi	r1, [r4, #0]
 800863c:	b91b      	cbnz	r3, 8008646 <_printf_i+0x15e>
 800863e:	6822      	ldr	r2, [r4, #0]
 8008640:	f022 0220 	bic.w	r2, r2, #32
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	2210      	movs	r2, #16
 8008648:	e7b7      	b.n	80085ba <_printf_i+0xd2>
 800864a:	064d      	lsls	r5, r1, #25
 800864c:	bf48      	it	mi
 800864e:	b29b      	uxthmi	r3, r3
 8008650:	e7ef      	b.n	8008632 <_printf_i+0x14a>
 8008652:	4665      	mov	r5, ip
 8008654:	fbb3 f1f2 	udiv	r1, r3, r2
 8008658:	fb02 3311 	mls	r3, r2, r1, r3
 800865c:	5cc3      	ldrb	r3, [r0, r3]
 800865e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008662:	460b      	mov	r3, r1
 8008664:	2900      	cmp	r1, #0
 8008666:	d1f5      	bne.n	8008654 <_printf_i+0x16c>
 8008668:	e7b9      	b.n	80085de <_printf_i+0xf6>
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	6825      	ldr	r5, [r4, #0]
 800866e:	6961      	ldr	r1, [r4, #20]
 8008670:	1d18      	adds	r0, r3, #4
 8008672:	6010      	str	r0, [r2, #0]
 8008674:	0628      	lsls	r0, r5, #24
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	d501      	bpl.n	800867e <_printf_i+0x196>
 800867a:	6019      	str	r1, [r3, #0]
 800867c:	e002      	b.n	8008684 <_printf_i+0x19c>
 800867e:	066a      	lsls	r2, r5, #25
 8008680:	d5fb      	bpl.n	800867a <_printf_i+0x192>
 8008682:	8019      	strh	r1, [r3, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	4665      	mov	r5, ip
 800868a:	e7b9      	b.n	8008600 <_printf_i+0x118>
 800868c:	6813      	ldr	r3, [r2, #0]
 800868e:	1d19      	adds	r1, r3, #4
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	681d      	ldr	r5, [r3, #0]
 8008694:	6862      	ldr	r2, [r4, #4]
 8008696:	2100      	movs	r1, #0
 8008698:	4628      	mov	r0, r5
 800869a:	f7f7 fdb1 	bl	8000200 <memchr>
 800869e:	b108      	cbz	r0, 80086a4 <_printf_i+0x1bc>
 80086a0:	1b40      	subs	r0, r0, r5
 80086a2:	6060      	str	r0, [r4, #4]
 80086a4:	6863      	ldr	r3, [r4, #4]
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	2300      	movs	r3, #0
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ae:	e7a7      	b.n	8008600 <_printf_i+0x118>
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	462a      	mov	r2, r5
 80086b4:	4639      	mov	r1, r7
 80086b6:	4630      	mov	r0, r6
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d0aa      	beq.n	8008614 <_printf_i+0x12c>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	079b      	lsls	r3, r3, #30
 80086c2:	d413      	bmi.n	80086ec <_printf_i+0x204>
 80086c4:	68e0      	ldr	r0, [r4, #12]
 80086c6:	9b03      	ldr	r3, [sp, #12]
 80086c8:	4298      	cmp	r0, r3
 80086ca:	bfb8      	it	lt
 80086cc:	4618      	movlt	r0, r3
 80086ce:	e7a3      	b.n	8008618 <_printf_i+0x130>
 80086d0:	2301      	movs	r3, #1
 80086d2:	464a      	mov	r2, r9
 80086d4:	4639      	mov	r1, r7
 80086d6:	4630      	mov	r0, r6
 80086d8:	47c0      	blx	r8
 80086da:	3001      	adds	r0, #1
 80086dc:	d09a      	beq.n	8008614 <_printf_i+0x12c>
 80086de:	3501      	adds	r5, #1
 80086e0:	68e3      	ldr	r3, [r4, #12]
 80086e2:	9a03      	ldr	r2, [sp, #12]
 80086e4:	1a9b      	subs	r3, r3, r2
 80086e6:	42ab      	cmp	r3, r5
 80086e8:	dcf2      	bgt.n	80086d0 <_printf_i+0x1e8>
 80086ea:	e7eb      	b.n	80086c4 <_printf_i+0x1dc>
 80086ec:	2500      	movs	r5, #0
 80086ee:	f104 0919 	add.w	r9, r4, #25
 80086f2:	e7f5      	b.n	80086e0 <_printf_i+0x1f8>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ac      	bne.n	8008652 <_printf_i+0x16a>
 80086f8:	7803      	ldrb	r3, [r0, #0]
 80086fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008702:	e76c      	b.n	80085de <_printf_i+0xf6>
 8008704:	08008c94 	.word	0x08008c94
 8008708:	08008ca5 	.word	0x08008ca5

0800870c <_realloc_r>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4607      	mov	r7, r0
 8008710:	4614      	mov	r4, r2
 8008712:	460e      	mov	r6, r1
 8008714:	b921      	cbnz	r1, 8008720 <_realloc_r+0x14>
 8008716:	4611      	mov	r1, r2
 8008718:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800871c:	f7ff bc48 	b.w	8007fb0 <_malloc_r>
 8008720:	b922      	cbnz	r2, 800872c <_realloc_r+0x20>
 8008722:	f7ff fbf7 	bl	8007f14 <_free_r>
 8008726:	4625      	mov	r5, r4
 8008728:	4628      	mov	r0, r5
 800872a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872c:	f000 f814 	bl	8008758 <_malloc_usable_size_r>
 8008730:	42a0      	cmp	r0, r4
 8008732:	d20f      	bcs.n	8008754 <_realloc_r+0x48>
 8008734:	4621      	mov	r1, r4
 8008736:	4638      	mov	r0, r7
 8008738:	f7ff fc3a 	bl	8007fb0 <_malloc_r>
 800873c:	4605      	mov	r5, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d0f2      	beq.n	8008728 <_realloc_r+0x1c>
 8008742:	4631      	mov	r1, r6
 8008744:	4622      	mov	r2, r4
 8008746:	f7ff fbb9 	bl	8007ebc <memcpy>
 800874a:	4631      	mov	r1, r6
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff fbe1 	bl	8007f14 <_free_r>
 8008752:	e7e9      	b.n	8008728 <_realloc_r+0x1c>
 8008754:	4635      	mov	r5, r6
 8008756:	e7e7      	b.n	8008728 <_realloc_r+0x1c>

08008758 <_malloc_usable_size_r>:
 8008758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800875c:	1f18      	subs	r0, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbc      	itt	lt
 8008762:	580b      	ldrlt	r3, [r1, r0]
 8008764:	18c0      	addlt	r0, r0, r3
 8008766:	4770      	bx	lr

08008768 <_init>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr

08008774 <_fini>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr
